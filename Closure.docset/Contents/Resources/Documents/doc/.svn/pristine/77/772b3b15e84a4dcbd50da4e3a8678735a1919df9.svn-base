<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>filewriter.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_testing_fs_filewriter.js.html">filewriter.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Mock FileWriter object.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>
<a name="line20"></a>goog.provide(&#39;goog.testing.fs.FileWriter&#39;);
<a name="line21"></a>
<a name="line22"></a>goog.require(&#39;goog.Timer&#39;);
<a name="line23"></a>goog.require(&#39;goog.events.Event&#39;);
<a name="line24"></a>goog.require(&#39;goog.events.EventTarget&#39;);
<a name="line25"></a>goog.require(&#39;goog.fs.Error&#39;);
<a name="line26"></a>goog.require(&#39;goog.fs.FileSaver.EventType&#39;);
<a name="line27"></a>goog.require(&#39;goog.fs.FileSaver.ReadyState&#39;);
<a name="line28"></a>goog.require(&#39;goog.string&#39;);
<a name="line29"></a>goog.require(&#39;goog.testing.fs.File&#39;);
<a name="line30"></a>goog.require(&#39;goog.testing.fs.ProgressEvent&#39;);
<a name="line31"></a>
<a name="line32"></a>
<a name="line33"></a>
<a name="line34"></a>/**
<a name="line35"></a> * A mock FileWriter object. This emits the same events as
<a name="line36"></a> * {@link goog.fs.FileSaver} and {@link goog.fs.FileWriter}.
<a name="line37"></a> *
<a name="line38"></a> * @param {!goog.testing.fs.FileEntry} fileEntry The file entry to write to.
<a name="line39"></a> * @constructor
<a name="line40"></a> * @extends {goog.events.EventTarget}
<a name="line41"></a> */
<a name="line42"></a>goog.testing.fs.FileWriter = function(fileEntry) {
<a name="line43"></a>  goog.base(this);
<a name="line44"></a>
<a name="line45"></a>  /**
<a name="line46"></a>   * The file entry to which to write.
<a name="line47"></a>   * @type {!goog.testing.fs.FileEntry}
<a name="line48"></a>   * @private
<a name="line49"></a>   */
<a name="line50"></a>  this.fileEntry_ = fileEntry;
<a name="line51"></a>
<a name="line52"></a>  /**
<a name="line53"></a>   * The file blob to write to.
<a name="line54"></a>   * @type {!goog.testing.fs.File}
<a name="line55"></a>   * @private
<a name="line56"></a>   */
<a name="line57"></a>  this.file_ = fileEntry.fileSync();
<a name="line58"></a>
<a name="line59"></a>  /**
<a name="line60"></a>   * The current state of the writer.
<a name="line61"></a>   * @type {goog.fs.FileSaver.ReadyState}
<a name="line62"></a>   * @private
<a name="line63"></a>   */
<a name="line64"></a>  this.readyState_ = goog.fs.FileSaver.ReadyState.INIT;
<a name="line65"></a>};
<a name="line66"></a>goog.inherits(goog.testing.fs.FileWriter, goog.events.EventTarget);
<a name="line67"></a>
<a name="line68"></a>
<a name="line69"></a>/**
<a name="line70"></a> * The most recent error experienced by this writer.
<a name="line71"></a> * @type {goog.fs.Error}
<a name="line72"></a> * @private
<a name="line73"></a> */
<a name="line74"></a>goog.testing.fs.FileWriter.prototype.error_;
<a name="line75"></a>
<a name="line76"></a>
<a name="line77"></a>/**
<a name="line78"></a> * Whether the current operation has been aborted.
<a name="line79"></a> * @type {boolean}
<a name="line80"></a> * @private
<a name="line81"></a> */
<a name="line82"></a>goog.testing.fs.FileWriter.prototype.aborted_ = false;
<a name="line83"></a>
<a name="line84"></a>
<a name="line85"></a>/**
<a name="line86"></a> * The current position in the file.
<a name="line87"></a> * @type {number}
<a name="line88"></a> * @private
<a name="line89"></a> */
<a name="line90"></a>goog.testing.fs.FileWriter.prototype.position_ = 0;
<a name="line91"></a>
<a name="line92"></a>
<a name="line93"></a>/**
<a name="line94"></a> * @see {goog.fs.FileSaver#getReadyState}
<a name="line95"></a> * @return {goog.fs.FileSaver.ReadyState} The ready state.
<a name="line96"></a> */
<a name="line97"></a>goog.testing.fs.FileWriter.prototype.getReadyState = function() {
<a name="line98"></a>  return this.readyState_;
<a name="line99"></a>};
<a name="line100"></a>
<a name="line101"></a>
<a name="line102"></a>/**
<a name="line103"></a> * @see {goog.fs.FileSaver#getError}
<a name="line104"></a> * @return {goog.fs.Error} The error.
<a name="line105"></a> */
<a name="line106"></a>goog.testing.fs.FileWriter.prototype.getError = function() {
<a name="line107"></a>  return this.error_;
<a name="line108"></a>};
<a name="line109"></a>
<a name="line110"></a>
<a name="line111"></a>/**
<a name="line112"></a> * @see {goog.fs.FileWriter#getPosition}
<a name="line113"></a> * @return {number} The position.
<a name="line114"></a> */
<a name="line115"></a>goog.testing.fs.FileWriter.prototype.getPosition = function() {
<a name="line116"></a>  return this.position_;
<a name="line117"></a>};
<a name="line118"></a>
<a name="line119"></a>
<a name="line120"></a>/**
<a name="line121"></a> * @see {goog.fs.FileWriter#getLength}
<a name="line122"></a> * @return {number} The length.
<a name="line123"></a> */
<a name="line124"></a>goog.testing.fs.FileWriter.prototype.getLength = function() {
<a name="line125"></a>  return this.file_.size;
<a name="line126"></a>};
<a name="line127"></a>
<a name="line128"></a>
<a name="line129"></a>/**
<a name="line130"></a> * @see {goog.fs.FileSaver#abort}
<a name="line131"></a> */
<a name="line132"></a>goog.testing.fs.FileWriter.prototype.abort = function() {
<a name="line133"></a>  if (this.readyState_ != goog.fs.FileSaver.ReadyState.WRITING) {
<a name="line134"></a>    var msg = &#39;aborting save of &#39; + this.fileEntry_.getFullPath();
<a name="line135"></a>    throw new goog.fs.Error(goog.fs.Error.ErrorCode.INVALID_STATE, msg);
<a name="line136"></a>  }
<a name="line137"></a>
<a name="line138"></a>  this.aborted_ = true;
<a name="line139"></a>};
<a name="line140"></a>
<a name="line141"></a>
<a name="line142"></a>/**
<a name="line143"></a> * @see {goog.fs.FileWriter#write}
<a name="line144"></a> * @param {!goog.testing.fs.Blob} blob The blob to write.
<a name="line145"></a> */
<a name="line146"></a>goog.testing.fs.FileWriter.prototype.write = function(blob) {
<a name="line147"></a>  if (this.readyState_ == goog.fs.FileSaver.ReadyState.WRITING) {
<a name="line148"></a>    var msg = &#39;writing to &#39; + this.fileEntry_.getFullPath();
<a name="line149"></a>    throw new goog.fs.Error(goog.fs.Error.ErrorCode.INVALID_STATE, msg);
<a name="line150"></a>  }
<a name="line151"></a>
<a name="line152"></a>  this.readyState_ = goog.fs.FileSaver.ReadyState.WRITING;
<a name="line153"></a>  goog.Timer.callOnce(function() {
<a name="line154"></a>    if (this.aborted_) {
<a name="line155"></a>      this.abort_(blob.size);
<a name="line156"></a>      return;
<a name="line157"></a>    }
<a name="line158"></a>
<a name="line159"></a>    this.progressEvent_(goog.fs.FileSaver.EventType.WRITE_START, 0, blob.size);
<a name="line160"></a>    var fileString = this.file_.toString();
<a name="line161"></a>    this.file_.setDataInternal(
<a name="line162"></a>        fileString.substring(0, this.position_) + blob.toString() +
<a name="line163"></a>        fileString.substring(this.position_ + blob.size, fileString.length));
<a name="line164"></a>    this.position_ += blob.size;
<a name="line165"></a>
<a name="line166"></a>    this.progressEvent_(
<a name="line167"></a>        goog.fs.FileSaver.EventType.WRITE, blob.size, blob.size);
<a name="line168"></a>    this.readyState_ = goog.fs.FileSaver.ReadyState.DONE;
<a name="line169"></a>    this.progressEvent_(
<a name="line170"></a>        goog.fs.FileSaver.EventType.WRITE_END, blob.size, blob.size);
<a name="line171"></a>  }, 0, this);
<a name="line172"></a>};
<a name="line173"></a>
<a name="line174"></a>
<a name="line175"></a>/**
<a name="line176"></a> * @see {goog.fs.FileWriter#truncate}
<a name="line177"></a> * @param {number} size The size to truncate to.
<a name="line178"></a> */
<a name="line179"></a>goog.testing.fs.FileWriter.prototype.truncate = function(size) {
<a name="line180"></a>  if (this.readyState_ == goog.fs.FileSaver.ReadyState.WRITING) {
<a name="line181"></a>    var msg = &#39;truncating &#39; + this.fileEntry_.getFullPath();
<a name="line182"></a>    throw new goog.fs.Error(goog.fs.Error.ErrorCode.INVALID_STATE, msg);
<a name="line183"></a>  }
<a name="line184"></a>
<a name="line185"></a>  this.readyState_ = goog.fs.FileSaver.ReadyState.WRITING;
<a name="line186"></a>  goog.Timer.callOnce(function() {
<a name="line187"></a>    if (this.aborted_) {
<a name="line188"></a>      this.abort_(size);
<a name="line189"></a>      return;
<a name="line190"></a>    }
<a name="line191"></a>
<a name="line192"></a>    this.progressEvent_(goog.fs.FileSaver.EventType.WRITE_START, 0, size);
<a name="line193"></a>
<a name="line194"></a>    var fileString = this.file_.toString();
<a name="line195"></a>    if (size &gt; fileString.length) {
<a name="line196"></a>      this.file_.setDataInternal(
<a name="line197"></a>          fileString + goog.string.repeat(&#39;\0&#39;, size - fileString.length));
<a name="line198"></a>    } else {
<a name="line199"></a>      this.file_.setDataInternal(fileString.substring(0, size));
<a name="line200"></a>    }
<a name="line201"></a>    this.position_ = Math.min(this.position_, size);
<a name="line202"></a>
<a name="line203"></a>    this.progressEvent_(goog.fs.FileSaver.EventType.WRITE, size, size);
<a name="line204"></a>    this.readyState_ = goog.fs.FileSaver.ReadyState.DONE;
<a name="line205"></a>    this.progressEvent_(goog.fs.FileSaver.EventType.WRITE_END, size, size);
<a name="line206"></a>  }, 0, this);
<a name="line207"></a>};
<a name="line208"></a>
<a name="line209"></a>
<a name="line210"></a>/**
<a name="line211"></a> * @see {goog.fs.FileWriter#seek}
<a name="line212"></a> * @param {number} offset The offset to seek to.
<a name="line213"></a> */
<a name="line214"></a>goog.testing.fs.FileWriter.prototype.seek = function(offset) {
<a name="line215"></a>  if (this.readyState_ == goog.fs.FileSaver.ReadyState.WRITING) {
<a name="line216"></a>    var msg = &#39;truncating &#39; + this.fileEntry_.getFullPath();
<a name="line217"></a>    throw new goog.fs.Error(goog.fs.Error.ErrorCode.INVALID_STATE, msg);
<a name="line218"></a>  }
<a name="line219"></a>
<a name="line220"></a>  if (offset &lt; 0) {
<a name="line221"></a>    this.position_ = Math.max(0, this.file_.size + offset);
<a name="line222"></a>  } else {
<a name="line223"></a>    this.position_ = Math.min(offset, this.file_.size);
<a name="line224"></a>  }
<a name="line225"></a>};
<a name="line226"></a>
<a name="line227"></a>
<a name="line228"></a>/**
<a name="line229"></a> * Abort the current action and emit appropriate events.
<a name="line230"></a> *
<a name="line231"></a> * @param {number} total The total data that was to be processed, in bytes.
<a name="line232"></a> * @private
<a name="line233"></a> */
<a name="line234"></a>goog.testing.fs.FileWriter.prototype.abort_ = function(total) {
<a name="line235"></a>  this.error_ = new goog.fs.Error(
<a name="line236"></a>      goog.fs.Error.ErrorCode.ABORT, &#39;saving &#39; + this.fileEntry_.getFullPath());
<a name="line237"></a>  this.progressEvent_(goog.fs.FileSaver.EventType.ERROR, 0, total);
<a name="line238"></a>  this.progressEvent_(goog.fs.FileSaver.EventType.ABORT, 0, total);
<a name="line239"></a>  this.readyState_ = goog.fs.FileSaver.ReadyState.DONE;
<a name="line240"></a>  this.progressEvent_(goog.fs.FileSaver.EventType.WRITE_END, 0, total);
<a name="line241"></a>  this.aborted_ = false;
<a name="line242"></a>};
<a name="line243"></a>
<a name="line244"></a>
<a name="line245"></a>/**
<a name="line246"></a> * Dispatch a progress event.
<a name="line247"></a> *
<a name="line248"></a> * @param {goog.fs.FileSaver.EventType} type The type of the event.
<a name="line249"></a> * @param {number} loaded The number of bytes processed.
<a name="line250"></a> * @param {number} total The total data that was to be processed, in bytes.
<a name="line251"></a> * @private
<a name="line252"></a> */
<a name="line253"></a>goog.testing.fs.FileWriter.prototype.progressEvent_ = function(
<a name="line254"></a>    type, loaded, total) {
<a name="line255"></a>  // On write, update the last modified date to the current (real or mock) time.
<a name="line256"></a>  if (type == goog.fs.FileSaver.EventType.WRITE) {
<a name="line257"></a>    this.file_.lastModifiedDate = new Date(goog.now());
<a name="line258"></a>  }
<a name="line259"></a>
<a name="line260"></a>  this.dispatchEvent(new goog.testing.fs.ProgressEvent(type, loaded, total));
<a name="line261"></a>};
</pre>


</body>
</html>
