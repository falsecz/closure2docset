<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>structs.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_structs_structs.js.html">structs.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2006 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Generics method for collection-like classes and objects.
<a name="line17"></a> *
<a name="line18"></a> *
<a name="line19"></a> * This file contains functions to work with collections. It supports using
<a name="line20"></a> * Map, Set, Array and Object and other classes that implement collection-like
<a name="line21"></a> * methods.
<a name="line22"></a> */
<a name="line23"></a>
<a name="line24"></a>
<a name="line25"></a>goog.provide(&#39;goog.structs&#39;);
<a name="line26"></a>
<a name="line27"></a>goog.require(&#39;goog.array&#39;);
<a name="line28"></a>goog.require(&#39;goog.object&#39;);
<a name="line29"></a>
<a name="line30"></a>
<a name="line31"></a>// We treat an object as a dictionary if it has getKeys or it is an object that
<a name="line32"></a>// isn&#39;t arrayLike.
<a name="line33"></a>
<a name="line34"></a>
<a name="line35"></a>/**
<a name="line36"></a> * Returns the number of values in the collection-like object.
<a name="line37"></a> * @param {Object} col The collection-like object.
<a name="line38"></a> * @return {number} The number of values in the collection-like object.
<a name="line39"></a> */
<a name="line40"></a>goog.structs.getCount = function(col) {
<a name="line41"></a>  if (typeof col.getCount == &#39;function&#39;) {
<a name="line42"></a>    return col.getCount();
<a name="line43"></a>  }
<a name="line44"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line45"></a>    return col.length;
<a name="line46"></a>  }
<a name="line47"></a>  return goog.object.getCount(col);
<a name="line48"></a>};
<a name="line49"></a>
<a name="line50"></a>
<a name="line51"></a>/**
<a name="line52"></a> * Returns the values of the collection-like object.
<a name="line53"></a> * @param {Object} col The collection-like object.
<a name="line54"></a> * @return {!Array} The values in the collection-like object.
<a name="line55"></a> */
<a name="line56"></a>goog.structs.getValues = function(col) {
<a name="line57"></a>  if (typeof col.getValues == &#39;function&#39;) {
<a name="line58"></a>    return col.getValues();
<a name="line59"></a>  }
<a name="line60"></a>  if (goog.isString(col)) {
<a name="line61"></a>    return col.split(&#39;&#39;);
<a name="line62"></a>  }
<a name="line63"></a>  if (goog.isArrayLike(col)) {
<a name="line64"></a>    var rv = [];
<a name="line65"></a>    var l = col.length;
<a name="line66"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line67"></a>      rv.push(col[i]);
<a name="line68"></a>    }
<a name="line69"></a>    return rv;
<a name="line70"></a>  }
<a name="line71"></a>  return goog.object.getValues(col);
<a name="line72"></a>};
<a name="line73"></a>
<a name="line74"></a>
<a name="line75"></a>/**
<a name="line76"></a> * Returns the keys of the collection. Some collections have no notion of
<a name="line77"></a> * keys/indexes and this function will return undefined in those cases.
<a name="line78"></a> * @param {Object} col The collection-like object.
<a name="line79"></a> * @return {!Array|undefined} The keys in the collection.
<a name="line80"></a> */
<a name="line81"></a>goog.structs.getKeys = function(col) {
<a name="line82"></a>  if (typeof col.getKeys == &#39;function&#39;) {
<a name="line83"></a>    return col.getKeys();
<a name="line84"></a>  }
<a name="line85"></a>  // if we have getValues but no getKeys we know this is a key-less collection
<a name="line86"></a>  if (typeof col.getValues == &#39;function&#39;) {
<a name="line87"></a>    return undefined;
<a name="line88"></a>  }
<a name="line89"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line90"></a>    var rv = [];
<a name="line91"></a>    var l = col.length;
<a name="line92"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line93"></a>      rv.push(i);
<a name="line94"></a>    }
<a name="line95"></a>    return rv;
<a name="line96"></a>  }
<a name="line97"></a>
<a name="line98"></a>  return goog.object.getKeys(col);
<a name="line99"></a>};
<a name="line100"></a>
<a name="line101"></a>
<a name="line102"></a>/**
<a name="line103"></a> * Whether the collection contains the given value. This is O(n) and uses
<a name="line104"></a> * equals (==) to test the existence.
<a name="line105"></a> * @param {Object} col The collection-like object.
<a name="line106"></a> * @param {*} val The value to check for.
<a name="line107"></a> * @return {boolean} True if the map contains the value.
<a name="line108"></a> */
<a name="line109"></a>goog.structs.contains = function(col, val) {
<a name="line110"></a>  if (typeof col.contains == &#39;function&#39;) {
<a name="line111"></a>    return col.contains(val);
<a name="line112"></a>  }
<a name="line113"></a>  if (typeof col.containsValue == &#39;function&#39;) {
<a name="line114"></a>    return col.containsValue(val);
<a name="line115"></a>  }
<a name="line116"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line117"></a>    return goog.array.contains(/** @type {Array} */ (col), val);
<a name="line118"></a>  }
<a name="line119"></a>  return goog.object.containsValue(col, val);
<a name="line120"></a>};
<a name="line121"></a>
<a name="line122"></a>
<a name="line123"></a>/**
<a name="line124"></a> * Whether the collection is empty.
<a name="line125"></a> * @param {Object} col The collection-like object.
<a name="line126"></a> * @return {boolean} True if empty.
<a name="line127"></a> */
<a name="line128"></a>goog.structs.isEmpty = function(col) {
<a name="line129"></a>  if (typeof col.isEmpty == &#39;function&#39;) {
<a name="line130"></a>    return col.isEmpty();
<a name="line131"></a>  }
<a name="line132"></a>
<a name="line133"></a>  // We do not use goog.string.isEmpty because here we treat the string as
<a name="line134"></a>  // collection and as such even whitespace matters
<a name="line135"></a>
<a name="line136"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line137"></a>    return goog.array.isEmpty(/** @type {Array} */ (col));
<a name="line138"></a>  }
<a name="line139"></a>  return goog.object.isEmpty(col);
<a name="line140"></a>};
<a name="line141"></a>
<a name="line142"></a>
<a name="line143"></a>/**
<a name="line144"></a> * Removes all the elements from the collection.
<a name="line145"></a> * @param {Object} col The collection-like object.
<a name="line146"></a> */
<a name="line147"></a>goog.structs.clear = function(col) {
<a name="line148"></a>  // NOTE(user): This should not contain strings because strings are immutable
<a name="line149"></a>  if (typeof col.clear == &#39;function&#39;) {
<a name="line150"></a>    col.clear();
<a name="line151"></a>  } else if (goog.isArrayLike(col)) {
<a name="line152"></a>    goog.array.clear((/** @type {goog.array.ArrayLike} */ col));
<a name="line153"></a>  } else {
<a name="line154"></a>    goog.object.clear(col);
<a name="line155"></a>  }
<a name="line156"></a>};
<a name="line157"></a>
<a name="line158"></a>
<a name="line159"></a>/**
<a name="line160"></a> * Calls a function for each value in a collection. The function takes
<a name="line161"></a> * three arguments; the value, the key and the collection.
<a name="line162"></a> *
<a name="line163"></a> * @param {Object} col The collection-like object.
<a name="line164"></a> * @param {Function} f The function to call for every value. This function takes
<a name="line165"></a> *     3 arguments (the value, the key or undefined if the collection has no
<a name="line166"></a> *     notion of keys, and the collection) and the return value is irrelevant.
<a name="line167"></a> * @param {Object=} opt_obj The object to be used as the value of &#39;this&#39;
<a name="line168"></a> *     within {@code f}.
<a name="line169"></a> */
<a name="line170"></a>goog.structs.forEach = function(col, f, opt_obj) {
<a name="line171"></a>  if (typeof col.forEach == &#39;function&#39;) {
<a name="line172"></a>    col.forEach(f, opt_obj);
<a name="line173"></a>  } else if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line174"></a>    goog.array.forEach(/** @type {Array} */ (col), f, opt_obj);
<a name="line175"></a>  } else {
<a name="line176"></a>    var keys = goog.structs.getKeys(col);
<a name="line177"></a>    var values = goog.structs.getValues(col);
<a name="line178"></a>    var l = values.length;
<a name="line179"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line180"></a>      f.call(opt_obj, values[i], keys &amp;&amp; keys[i], col);
<a name="line181"></a>    }
<a name="line182"></a>  }
<a name="line183"></a>};
<a name="line184"></a>
<a name="line185"></a>
<a name="line186"></a>/**
<a name="line187"></a> * Calls a function for every value in the collection. When a call returns true,
<a name="line188"></a> * adds the value to a new collection (Array is returned by default).
<a name="line189"></a> *
<a name="line190"></a> * @param {Object} col The collection-like object.
<a name="line191"></a> * @param {Function} f The function to call for every value. This function takes
<a name="line192"></a> *     3 arguments (the value, the key or undefined if the collection has no
<a name="line193"></a> *     notion of keys, and the collection) and should return a Boolean. If the
<a name="line194"></a> *     return value is true the value is added to the result collection. If it
<a name="line195"></a> *     is false the value is not included.
<a name="line196"></a> * @param {Object=} opt_obj The object to be used as the value of &#39;this&#39;
<a name="line197"></a> *     within {@code f}.
<a name="line198"></a> * @return {!Object|!Array} A new collection where the passed values are
<a name="line199"></a> *     present. If col is a key-less collection an array is returned.  If col
<a name="line200"></a> *     has keys and values a plain old JS object is returned.
<a name="line201"></a> */
<a name="line202"></a>goog.structs.filter = function(col, f, opt_obj) {
<a name="line203"></a>  if (typeof col.filter == &#39;function&#39;) {
<a name="line204"></a>    return col.filter(f, opt_obj);
<a name="line205"></a>  }
<a name="line206"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line207"></a>    return goog.array.filter(/** @type {!Array} */ (col), f, opt_obj);
<a name="line208"></a>  }
<a name="line209"></a>
<a name="line210"></a>  var rv;
<a name="line211"></a>  var keys = goog.structs.getKeys(col);
<a name="line212"></a>  var values = goog.structs.getValues(col);
<a name="line213"></a>  var l = values.length;
<a name="line214"></a>  if (keys) {
<a name="line215"></a>    rv = {};
<a name="line216"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line217"></a>      if (f.call(opt_obj, values[i], keys[i], col)) {
<a name="line218"></a>        rv[keys[i]] = values[i];
<a name="line219"></a>      }
<a name="line220"></a>    }
<a name="line221"></a>  } else {
<a name="line222"></a>    // We should not use goog.array.filter here since we want to make sure that
<a name="line223"></a>    // the index is undefined as well as make sure that col is passed to the
<a name="line224"></a>    // function.
<a name="line225"></a>    rv = [];
<a name="line226"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line227"></a>      if (f.call(opt_obj, values[i], undefined, col)) {
<a name="line228"></a>        rv.push(values[i]);
<a name="line229"></a>      }
<a name="line230"></a>    }
<a name="line231"></a>  }
<a name="line232"></a>  return rv;
<a name="line233"></a>};
<a name="line234"></a>
<a name="line235"></a>
<a name="line236"></a>/**
<a name="line237"></a> * Calls a function for every value in the collection and adds the result into a
<a name="line238"></a> * new collection (defaults to creating a new Array).
<a name="line239"></a> *
<a name="line240"></a> * @param {Object} col The collection-like object.
<a name="line241"></a> * @param {Function} f The function to call for every value. This function
<a name="line242"></a> *     takes 3 arguments (the value, the key or undefined if the collection has
<a name="line243"></a> *     no notion of keys, and the collection) and should return something. The
<a name="line244"></a> *     result will be used as the value in the new collection.
<a name="line245"></a> * @param {Object=} opt_obj  The object to be used as the value of &#39;this&#39;
<a name="line246"></a> *     within {@code f}.
<a name="line247"></a> * @return {!Object|!Array} A new collection with the new values.  If col is a
<a name="line248"></a> *     key-less collection an array is returned.  If col has keys and values a
<a name="line249"></a> *     plain old JS object is returned.
<a name="line250"></a> */
<a name="line251"></a>goog.structs.map = function(col, f, opt_obj) {
<a name="line252"></a>  if (typeof col.map == &#39;function&#39;) {
<a name="line253"></a>    return col.map(f, opt_obj);
<a name="line254"></a>  }
<a name="line255"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line256"></a>    return goog.array.map(/** @type {!Array} */ (col), f, opt_obj);
<a name="line257"></a>  }
<a name="line258"></a>
<a name="line259"></a>  var rv;
<a name="line260"></a>  var keys = goog.structs.getKeys(col);
<a name="line261"></a>  var values = goog.structs.getValues(col);
<a name="line262"></a>  var l = values.length;
<a name="line263"></a>  if (keys) {
<a name="line264"></a>    rv = {};
<a name="line265"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line266"></a>      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
<a name="line267"></a>    }
<a name="line268"></a>  } else {
<a name="line269"></a>    // We should not use goog.array.map here since we want to make sure that
<a name="line270"></a>    // the index is undefined as well as make sure that col is passed to the
<a name="line271"></a>    // function.
<a name="line272"></a>    rv = [];
<a name="line273"></a>    for (var i = 0; i &lt; l; i++) {
<a name="line274"></a>      rv[i] = f.call(opt_obj, values[i], undefined, col);
<a name="line275"></a>    }
<a name="line276"></a>  }
<a name="line277"></a>  return rv;
<a name="line278"></a>};
<a name="line279"></a>
<a name="line280"></a>
<a name="line281"></a>/**
<a name="line282"></a> * Calls f for each value in a collection. If any call returns true this returns
<a name="line283"></a> * true (without checking the rest). If all returns false this returns false.
<a name="line284"></a> *
<a name="line285"></a> * @param {Object|Array|string} col The collection-like object.
<a name="line286"></a> * @param {Function} f The function to call for every value. This function takes
<a name="line287"></a> *     3 arguments (the value, the key or undefined if the collection has no
<a name="line288"></a> *     notion of keys, and the collection) and should return a Boolean.
<a name="line289"></a> * @param {Object=} opt_obj  The object to be used as the value of &#39;this&#39;
<a name="line290"></a> *     within {@code f}.
<a name="line291"></a> * @return {boolean} True if any value passes the test.
<a name="line292"></a> */
<a name="line293"></a>goog.structs.some = function(col, f, opt_obj) {
<a name="line294"></a>  if (typeof col.some == &#39;function&#39;) {
<a name="line295"></a>    return col.some(f, opt_obj);
<a name="line296"></a>  }
<a name="line297"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line298"></a>    return goog.array.some(/** @type {!Array} */ (col), f, opt_obj);
<a name="line299"></a>  }
<a name="line300"></a>  var keys = goog.structs.getKeys(col);
<a name="line301"></a>  var values = goog.structs.getValues(col);
<a name="line302"></a>  var l = values.length;
<a name="line303"></a>  for (var i = 0; i &lt; l; i++) {
<a name="line304"></a>    if (f.call(opt_obj, values[i], keys &amp;&amp; keys[i], col)) {
<a name="line305"></a>      return true;
<a name="line306"></a>    }
<a name="line307"></a>  }
<a name="line308"></a>  return false;
<a name="line309"></a>};
<a name="line310"></a>
<a name="line311"></a>
<a name="line312"></a>/**
<a name="line313"></a> * Calls f for each value in a collection. If all calls return true this return
<a name="line314"></a> * true this returns true. If any returns false this returns false at this point
<a name="line315"></a> *  and does not continue to check the remaining values.
<a name="line316"></a> *
<a name="line317"></a> * @param {Object} col The collection-like object.
<a name="line318"></a> * @param {Function} f The function to call for every value. This function takes
<a name="line319"></a> *     3 arguments (the value, the key or undefined if the collection has no
<a name="line320"></a> *     notion of keys, and the collection) and should return a Boolean.
<a name="line321"></a> * @param {Object=} opt_obj  The object to be used as the value of &#39;this&#39;
<a name="line322"></a> *     within {@code f}.
<a name="line323"></a> * @return {boolean} True if all key-value pairs pass the test.
<a name="line324"></a> */
<a name="line325"></a>goog.structs.every = function(col, f, opt_obj) {
<a name="line326"></a>  if (typeof col.every == &#39;function&#39;) {
<a name="line327"></a>    return col.every(f, opt_obj);
<a name="line328"></a>  }
<a name="line329"></a>  if (goog.isArrayLike(col) || goog.isString(col)) {
<a name="line330"></a>    return goog.array.every(/** @type {!Array} */ (col), f, opt_obj);
<a name="line331"></a>  }
<a name="line332"></a>  var keys = goog.structs.getKeys(col);
<a name="line333"></a>  var values = goog.structs.getValues(col);
<a name="line334"></a>  var l = values.length;
<a name="line335"></a>  for (var i = 0; i &lt; l; i++) {
<a name="line336"></a>    if (!f.call(opt_obj, values[i], keys &amp;&amp; keys[i], col)) {
<a name="line337"></a>      return false;
<a name="line338"></a>    }
<a name="line339"></a>  }
<a name="line340"></a>  return true;
<a name="line341"></a>};
</pre>


</body>
</html>
