<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>anim.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_fx_anim_anim.js.html">anim.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2006 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Basic animation controls.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>goog.provide(&#39;goog.fx.anim&#39;);
<a name="line20"></a>goog.provide(&#39;goog.fx.anim.Animated&#39;);
<a name="line21"></a>
<a name="line22"></a>goog.require(&#39;goog.Timer&#39;);
<a name="line23"></a>goog.require(&#39;goog.events&#39;);
<a name="line24"></a>goog.require(&#39;goog.object&#39;);
<a name="line25"></a>
<a name="line26"></a>
<a name="line27"></a>
<a name="line28"></a>/**
<a name="line29"></a> * An interface for programatically animated objects. I.e. rendered in
<a name="line30"></a> * javascript frame by frame.
<a name="line31"></a> *
<a name="line32"></a> * @interface
<a name="line33"></a> */
<a name="line34"></a>goog.fx.anim.Animated = function() {};
<a name="line35"></a>
<a name="line36"></a>
<a name="line37"></a>/**
<a name="line38"></a> * Function called when a frame is requested for the animation.
<a name="line39"></a> *
<a name="line40"></a> * @param {number} now Current time in milliseconds.
<a name="line41"></a> */
<a name="line42"></a>goog.fx.anim.Animated.prototype.onAnimationFrame;
<a name="line43"></a>
<a name="line44"></a>
<a name="line45"></a>/**
<a name="line46"></a> * Default wait timeout for animations (in milliseconds).  Only used for timed
<a name="line47"></a> * animation, which uses a timer (setTimeout) to schedule animation.
<a name="line48"></a> *
<a name="line49"></a> * @type {number}
<a name="line50"></a> * @const
<a name="line51"></a> */
<a name="line52"></a>goog.fx.anim.TIMEOUT = 20;
<a name="line53"></a>
<a name="line54"></a>
<a name="line55"></a>/**
<a name="line56"></a> * Name of event received from the requestAnimationFrame in Firefox.
<a name="line57"></a> *
<a name="line58"></a> * @type {string}
<a name="line59"></a> * @const
<a name="line60"></a> * @private
<a name="line61"></a> */
<a name="line62"></a>goog.fx.anim.MOZ_BEFORE_PAINT_EVENT_ = &#39;MozBeforePaint&#39;;
<a name="line63"></a>
<a name="line64"></a>
<a name="line65"></a>/**
<a name="line66"></a> * A map of animations which should be cycled on the global timer.
<a name="line67"></a> *
<a name="line68"></a> * @type {Object.&lt;number, goog.fx.anim.Animated&gt;}
<a name="line69"></a> * @private
<a name="line70"></a> */
<a name="line71"></a>goog.fx.anim.activeAnimations_ = {};
<a name="line72"></a>
<a name="line73"></a>
<a name="line74"></a>/**
<a name="line75"></a> * An optional animation window.
<a name="line76"></a> * @type {Window}
<a name="line77"></a> * @private
<a name="line78"></a> */
<a name="line79"></a>goog.fx.anim.animationWindow_ = null;
<a name="line80"></a>
<a name="line81"></a>
<a name="line82"></a>/**
<a name="line83"></a> * A timing control function.
<a name="line84"></a> * @type {?function(?function(number))}
<a name="line85"></a> * @private
<a name="line86"></a> */
<a name="line87"></a>goog.fx.anim.requestAnimationFrameFn_ = null;
<a name="line88"></a>
<a name="line89"></a>
<a name="line90"></a>/**
<a name="line91"></a> * Cancel function for timing control.
<a name="line92"></a> * @type {?function(number)}
<a name="line93"></a> * @private
<a name="line94"></a> */
<a name="line95"></a>goog.fx.anim.cancelRequestAnimationFrameFn_ = null;
<a name="line96"></a>
<a name="line97"></a>
<a name="line98"></a>/**
<a name="line99"></a> * An interval ID for the global timer or event handler uid.
<a name="line100"></a> * @type {?number}
<a name="line101"></a> * @private
<a name="line102"></a> */
<a name="line103"></a>goog.fx.anim.animationTimer_ = null;
<a name="line104"></a>
<a name="line105"></a>
<a name="line106"></a>/**
<a name="line107"></a> * Registers an animation to be cycled on the global timer.
<a name="line108"></a> * @param {goog.fx.anim.Animated} animation The animation to register.
<a name="line109"></a> */
<a name="line110"></a>goog.fx.anim.registerAnimation = function(animation) {
<a name="line111"></a>  var uid = goog.getUid(animation);
<a name="line112"></a>  if (!(uid in goog.fx.anim.activeAnimations_)) {
<a name="line113"></a>    goog.fx.anim.activeAnimations_[uid] = animation;
<a name="line114"></a>  }
<a name="line115"></a>
<a name="line116"></a>  // If the timer is not already started, start it now.
<a name="line117"></a>  goog.fx.anim.requestAnimationTimer_();
<a name="line118"></a>};
<a name="line119"></a>
<a name="line120"></a>
<a name="line121"></a>/**
<a name="line122"></a> * Removes an animation from the list of animations which are cycled on the
<a name="line123"></a> * global timer.
<a name="line124"></a> * @param {goog.fx.anim.Animated} animation The animation to unregister.
<a name="line125"></a> */
<a name="line126"></a>goog.fx.anim.unregisterAnimation = function(animation) {
<a name="line127"></a>  var uid = goog.getUid(animation);
<a name="line128"></a>  delete goog.fx.anim.activeAnimations_[uid];
<a name="line129"></a>
<a name="line130"></a>  // If a timer is running and we no longer have any active timers we stop the
<a name="line131"></a>  // timers.
<a name="line132"></a>  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
<a name="line133"></a>    goog.fx.anim.cancelAnimationTimer_();
<a name="line134"></a>  }
<a name="line135"></a>};
<a name="line136"></a>
<a name="line137"></a>
<a name="line138"></a>/**
<a name="line139"></a> * Registers an animation window. This allows usage of the timing control API
<a name="line140"></a> * for animations. Note that this window must be visible, as non-visible
<a name="line141"></a> * windows can potentially stop animating. This window does not necessarily
<a name="line142"></a> * need to be the window inside which animation occurs, but must remain visible.
<a name="line143"></a> * See: https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame.
<a name="line144"></a> *
<a name="line145"></a> * @param {Window} animationWindow The window in which to animate elements.
<a name="line146"></a> */
<a name="line147"></a>goog.fx.anim.setAnimationWindow = function(animationWindow) {
<a name="line148"></a>  goog.fx.anim.animationWindow_ = animationWindow;
<a name="line149"></a>
<a name="line150"></a>  var hasTimer = !!goog.fx.anim.animationTimer_;
<a name="line151"></a>  // If a timer is currently running, reset it and restart with new functions
<a name="line152"></a>  // after a timeout. This is to avoid mismatching timer UIDs if we change the
<a name="line153"></a>  // animation window during a running animation.
<a name="line154"></a>  //
<a name="line155"></a>  // In practice this cannot happen before some animation window and timer
<a name="line156"></a>  // control functions has already been set.
<a name="line157"></a>  if (hasTimer) {
<a name="line158"></a>    goog.fx.anim.cancelAnimationTimer_();
<a name="line159"></a>  }
<a name="line160"></a>
<a name="line161"></a>  if (!animationWindow) {
<a name="line162"></a>    goog.fx.anim.requestAnimationFrameFn_ = null;
<a name="line163"></a>    goog.fx.anim.cancelRequestAnimationFrameFn_ = null;
<a name="line164"></a>  } else {
<a name="line165"></a>    goog.fx.anim.requestAnimationFrameFn_ =
<a name="line166"></a>        animationWindow[&#39;requestAnimationFrame&#39;] ||
<a name="line167"></a>        animationWindow[&#39;webkitRequestAnimationFrame&#39;] ||
<a name="line168"></a>        animationWindow[&#39;mozRequestAnimationFrame&#39;] ||
<a name="line169"></a>        animationWindow[&#39;oRequestAnimationFrame&#39;] ||
<a name="line170"></a>        animationWindow[&#39;msRequestAnimationFrame&#39;] ||
<a name="line171"></a>        null;
<a name="line172"></a>
<a name="line173"></a>    goog.fx.anim.cancelRequestAnimationFrameFn_ =
<a name="line174"></a>        animationWindow[&#39;cancelRequestAnimationFrame&#39;] ||
<a name="line175"></a>        animationWindow[&#39;webkitCancelRequestAnimationFrame&#39;] ||
<a name="line176"></a>        animationWindow[&#39;mozCancelRequestAnimationFrame&#39;] ||
<a name="line177"></a>        animationWindow[&#39;oCancelRequestAnimationFrame&#39;] ||
<a name="line178"></a>        animationWindow[&#39;msCancelRequestAnimationFrame&#39;] ||
<a name="line179"></a>        null;
<a name="line180"></a>  }
<a name="line181"></a>
<a name="line182"></a>  // Set up matching render timing functions, the requestAnimationTimer_ and
<a name="line183"></a>  // cancelAnimationTimer_ functions.
<a name="line184"></a>  if (goog.fx.anim.requestAnimationFrameFn_ &amp;&amp;
<a name="line185"></a>      animationWindow[&#39;mozRequestAnimationFrame&#39;] &amp;&amp;
<a name="line186"></a>      !goog.fx.anim.cancelRequestAnimationFrameFn_) {
<a name="line187"></a>    // Because Firefox (Gecko) runs animation in separate threads, it also saves
<a name="line188"></a>    // time by running the requestAnimationFrame callbacks in that same thread.
<a name="line189"></a>    // Sadly this breaks the assumption of implicit thread-safety in JS, and can
<a name="line190"></a>    // thus create thread-based inconsistencies on counters etc.
<a name="line191"></a>    //
<a name="line192"></a>    // Calling cycleAnimations_ using the MozBeforePaint event instead of as
<a name="line193"></a>    // callback fixes this.
<a name="line194"></a>    //
<a name="line195"></a>    // Trigger this condition only if the mozRequestAnimationFrame is available,
<a name="line196"></a>    // but not the W3C requestAnimationFrame function (as in draft) or the
<a name="line197"></a>    // equivalent cancel functions.
<a name="line198"></a>    goog.fx.anim.requestAnimationTimer_ =
<a name="line199"></a>        goog.fx.anim.requestMozAnimationFrame_;
<a name="line200"></a>    goog.fx.anim.cancelAnimationTimer_ = goog.fx.anim.cancelMozAnimationFrame_;
<a name="line201"></a>  } else if (goog.fx.anim.requestAnimationFrameFn_ &amp;&amp;
<a name="line202"></a>             goog.fx.anim.cancelRequestAnimationFrameFn_) {
<a name="line203"></a>    goog.fx.anim.requestAnimationTimer_ = goog.fx.anim.requestAnimationFrame_;
<a name="line204"></a>    goog.fx.anim.cancelAnimationTimer_ = goog.fx.anim.cancelAnimationFrame_;
<a name="line205"></a>  } else {
<a name="line206"></a>    goog.fx.anim.requestAnimationTimer_ = goog.fx.anim.requestTimer_;
<a name="line207"></a>    goog.fx.anim.cancelAnimationTimer_ = goog.fx.anim.cancelTimer_;
<a name="line208"></a>  }
<a name="line209"></a>
<a name="line210"></a>  // If the timer was running, start it again.
<a name="line211"></a>  if (hasTimer) {
<a name="line212"></a>    goog.fx.anim.requestAnimationTimer_();
<a name="line213"></a>  }
<a name="line214"></a>};
<a name="line215"></a>
<a name="line216"></a>
<a name="line217"></a>/**
<a name="line218"></a> * Requests a scheduled timer call.
<a name="line219"></a> * @private
<a name="line220"></a> */
<a name="line221"></a>goog.fx.anim.requestTimer_ = function() {
<a name="line222"></a>  if (!goog.fx.anim.animationTimer_) {
<a name="line223"></a>    goog.fx.anim.animationTimer_ = goog.Timer.callOnce(function() {
<a name="line224"></a>      goog.fx.anim.animationTimer_ = null;
<a name="line225"></a>      // Cycle all animations at &#39;the same time&#39;.
<a name="line226"></a>      goog.fx.anim.cycleAnimations_(goog.now());
<a name="line227"></a>    }, goog.fx.anim.TIMEOUT);
<a name="line228"></a>  }
<a name="line229"></a>};
<a name="line230"></a>
<a name="line231"></a>
<a name="line232"></a>/**
<a name="line233"></a> * Cancels a timer created by requestTimer_().
<a name="line234"></a> * @private
<a name="line235"></a> */
<a name="line236"></a>goog.fx.anim.cancelTimer_ = function() {
<a name="line237"></a>  if (goog.fx.anim.animationTimer_) {
<a name="line238"></a>    goog.Timer.clear(goog.fx.anim.animationTimer_);
<a name="line239"></a>    goog.fx.anim.animationTimer_ = null;
<a name="line240"></a>  }
<a name="line241"></a>};
<a name="line242"></a>
<a name="line243"></a>
<a name="line244"></a>/**
<a name="line245"></a> * Requests an animation frame based on the requestAnimationFrame and
<a name="line246"></a> * cancelRequestAnimationFrame function pair.
<a name="line247"></a> * @private
<a name="line248"></a> */
<a name="line249"></a>goog.fx.anim.requestAnimationFrame_ = function() {
<a name="line250"></a>  if (!goog.fx.anim.animationTimer_) {
<a name="line251"></a>    // requestAnimationFrame will call cycleAnimations_ with the current
<a name="line252"></a>    // time in ms, as returned from goog.now().
<a name="line253"></a>    goog.fx.anim.animationTimer_ =
<a name="line254"></a>        goog.fx.anim.requestAnimationFrameFn_.call(
<a name="line255"></a>            goog.fx.anim.animationWindow_, function(now) {
<a name="line256"></a>              goog.fx.anim.animationTimer_ = null;
<a name="line257"></a>              goog.fx.anim.cycleAnimations_(now);
<a name="line258"></a>            });
<a name="line259"></a>  }
<a name="line260"></a>};
<a name="line261"></a>
<a name="line262"></a>
<a name="line263"></a>/**
<a name="line264"></a> * Cancels an animation frame created by requestAnimationFrame_().
<a name="line265"></a> * @private
<a name="line266"></a> */
<a name="line267"></a>goog.fx.anim.cancelAnimationFrame_ = function() {
<a name="line268"></a>  if (goog.fx.anim.animationTimer_) {
<a name="line269"></a>    goog.fx.anim.cancelRequestAnimationFrameFn_.call(
<a name="line270"></a>        goog.fx.anim.animationWindow_,
<a name="line271"></a>        goog.fx.anim.animationTimer_);
<a name="line272"></a>    goog.fx.anim.animationTimer_ = null;
<a name="line273"></a>  }
<a name="line274"></a>};
<a name="line275"></a>
<a name="line276"></a>
<a name="line277"></a>/**
<a name="line278"></a> * Requests an animation frame based on the requestAnimationFrame and
<a name="line279"></a> * cancelRequestAnimationFrame function pair.
<a name="line280"></a> * @private
<a name="line281"></a> */
<a name="line282"></a>goog.fx.anim.requestMozAnimationFrame_ = function() {
<a name="line283"></a>  if (!goog.fx.anim.animationTimer_) {
<a name="line284"></a>    goog.fx.anim.animationTimer_ = goog.events.listen(
<a name="line285"></a>        goog.fx.anim.animationWindow_, goog.fx.anim.MOZ_BEFORE_PAINT_EVENT_,
<a name="line286"></a>        function(event) {
<a name="line287"></a>          goog.fx.anim.cycleAnimations_(event[&#39;timeStamp&#39;] || goog.now());
<a name="line288"></a>        }, false);
<a name="line289"></a>  }
<a name="line290"></a>  goog.fx.anim.requestAnimationFrameFn_.call(
<a name="line291"></a>      goog.fx.anim.animationWindow_, null);
<a name="line292"></a>};
<a name="line293"></a>
<a name="line294"></a>
<a name="line295"></a>/**
<a name="line296"></a> * Cancels an animation frame created by requestAnimationFrame_().
<a name="line297"></a> * @private
<a name="line298"></a> */
<a name="line299"></a>goog.fx.anim.cancelMozAnimationFrame_ = function() {
<a name="line300"></a>  if (goog.fx.anim.animationTimer_) {
<a name="line301"></a>    goog.events.unlistenByKey(goog.fx.anim.animationTimer_);
<a name="line302"></a>    goog.fx.anim.animationTimer_ = null;
<a name="line303"></a>  }
<a name="line304"></a>};
<a name="line305"></a>
<a name="line306"></a>
<a name="line307"></a>/**
<a name="line308"></a> * Starts the animation timer.  This is the currently active function selected
<a name="line309"></a> * based on the animation window.
<a name="line310"></a> * @private
<a name="line311"></a> */
<a name="line312"></a>goog.fx.anim.requestAnimationTimer_ = goog.fx.anim.requestTimer_;
<a name="line313"></a>
<a name="line314"></a>
<a name="line315"></a>/**
<a name="line316"></a> * Cancels the animation timer.  This is the currently active function selected
<a name="line317"></a> * based on the animation window.
<a name="line318"></a> * @private
<a name="line319"></a> */
<a name="line320"></a>goog.fx.anim.cancelAnimationTimer_ = goog.fx.anim.cancelTimer_;
<a name="line321"></a>
<a name="line322"></a>
<a name="line323"></a>/**
<a name="line324"></a> * Cycles through all registered animations.
<a name="line325"></a> * @param {number} now Current time in milliseconds.
<a name="line326"></a> * @private
<a name="line327"></a> */
<a name="line328"></a>goog.fx.anim.cycleAnimations_ = function(now) {
<a name="line329"></a>  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
<a name="line330"></a>    anim.onAnimationFrame(now);
<a name="line331"></a>  });
<a name="line332"></a>
<a name="line333"></a>  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
<a name="line334"></a>    goog.fx.anim.requestAnimationTimer_();
<a name="line335"></a>  }
<a name="line336"></a>};
</pre>


</body>
</html>
