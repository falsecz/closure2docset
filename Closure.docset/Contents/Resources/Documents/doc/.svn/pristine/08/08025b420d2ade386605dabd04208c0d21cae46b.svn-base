<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>basicmenu.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_ui_basicmenu.js.html">basicmenu.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2006 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview A basic menu that accepts a set of items.  The ITEM_EVENT
<a name="line17"></a> * instead of returning the DOM node returns a reference to the menu item.
<a name="line18"></a> *
<a name="line19"></a> * NOTE: This class has been deprecated.  Please use goog.ui.Menu,
<a name="line20"></a> * goog.ui.PopupMenu, and if you need submenus goog.ui.SubMenu.
<a name="line21"></a> *
<a name="line22"></a> *
<a name="line23"></a> */
<a name="line24"></a>
<a name="line25"></a>goog.provide(&#39;goog.ui.BasicMenu&#39;);
<a name="line26"></a>goog.provide(&#39;goog.ui.BasicMenu.Item&#39;);
<a name="line27"></a>goog.provide(&#39;goog.ui.BasicMenu.Separator&#39;);
<a name="line28"></a>
<a name="line29"></a>goog.require(&#39;goog.array&#39;);
<a name="line30"></a>goog.require(&#39;goog.dom&#39;);
<a name="line31"></a>goog.require(&#39;goog.dom.a11y&#39;);
<a name="line32"></a>goog.require(&#39;goog.events.EventType&#39;);
<a name="line33"></a>goog.require(&#39;goog.positioning&#39;);
<a name="line34"></a>goog.require(&#39;goog.positioning.AnchoredPosition&#39;);
<a name="line35"></a>goog.require(&#39;goog.positioning.Corner&#39;);
<a name="line36"></a>goog.require(&#39;goog.ui.AttachableMenu&#39;);
<a name="line37"></a>goog.require(&#39;goog.ui.ItemEvent&#39;);
<a name="line38"></a>
<a name="line39"></a>
<a name="line40"></a>
<a name="line41"></a>/**
<a name="line42"></a> * Class that extends AttachableMenu and creates a simple menu, purely from
<a name="line43"></a> * code.The ITEM_EVENT instead of returning the DOM node returns a reference the
<a name="line44"></a> * menu item.
<a name="line45"></a> *
<a name="line46"></a> * @param {string=} opt_class Optional class for menu element, Default: &#39;menu&#39;.
<a name="line47"></a> * @param {Element=} opt_parent Optional parent element, otherwise it will be
<a name="line48"></a> *     added to the end of the document body.
<a name="line49"></a> * @constructor
<a name="line50"></a> * @extends {goog.ui.AttachableMenu}
<a name="line51"></a> */
<a name="line52"></a>goog.ui.BasicMenu = function(opt_class, opt_parent) {
<a name="line53"></a>  var cls = opt_class || &#39;menu&#39;;
<a name="line54"></a>  var parent = opt_parent || goog.dom.getDocument().body;
<a name="line55"></a>
<a name="line56"></a>  /**
<a name="line57"></a>   * Menu element
<a name="line58"></a>   * @type {Element}
<a name="line59"></a>   * @private
<a name="line60"></a>   */
<a name="line61"></a>  this.element_ = goog.dom.createDom(&#39;div&#39;, {&#39;tabIndex&#39;: 0, &#39;class&#39;: cls});
<a name="line62"></a>
<a name="line63"></a>  goog.dom.a11y.setRole(this.element_, &#39;menu&#39;);
<a name="line64"></a>  goog.dom.a11y.setState(this.element_, &#39;haspopup&#39;, true);
<a name="line65"></a>
<a name="line66"></a>  parent.appendChild(this.element_);
<a name="line67"></a>  goog.ui.AttachableMenu.call(this, this.element_);
<a name="line68"></a>
<a name="line69"></a>  /**
<a name="line70"></a>   * Parent menu
<a name="line71"></a>   * @type {goog.ui.BasicMenu}
<a name="line72"></a>   * @private
<a name="line73"></a>   */
<a name="line74"></a>  this.parentMenu_ = null;
<a name="line75"></a>
<a name="line76"></a>  /**
<a name="line77"></a>   * Array of menu items
<a name="line78"></a>   * @type {Array}
<a name="line79"></a>   * @private
<a name="line80"></a>   */
<a name="line81"></a>  this.items_ = [];
<a name="line82"></a>
<a name="line83"></a>  /**
<a name="line84"></a>   * The active item.
<a name="line85"></a>   * @type {goog.ui.BasicMenu.Item}
<a name="line86"></a>   * @private
<a name="line87"></a>   */
<a name="line88"></a>  this.activeItem_;
<a name="line89"></a>};
<a name="line90"></a>goog.inherits(goog.ui.BasicMenu, goog.ui.AttachableMenu);
<a name="line91"></a>
<a name="line92"></a>
<a name="line93"></a>/**
<a name="line94"></a> * Key for the event used to trigger the menu
<a name="line95"></a> * @type {?number}
<a name="line96"></a> * @private
<a name="line97"></a> */
<a name="line98"></a>goog.ui.BasicMenu.prototype.evtKey_ = null;
<a name="line99"></a>
<a name="line100"></a>
<a name="line101"></a>/**
<a name="line102"></a> * Key for the window resize event listener
<a name="line103"></a> * @type {?number}
<a name="line104"></a> * @private
<a name="line105"></a> */
<a name="line106"></a>goog.ui.BasicMenu.prototype.resizeEvtKey_ = null;
<a name="line107"></a>
<a name="line108"></a>
<a name="line109"></a>/**
<a name="line110"></a> * Z-index used for top level menu.
<a name="line111"></a> * @type {number}
<a name="line112"></a> * @private
<a name="line113"></a> */
<a name="line114"></a>goog.ui.BasicMenu.prototype.zIndex_ = 10;
<a name="line115"></a>
<a name="line116"></a>
<a name="line117"></a>/**
<a name="line118"></a> * A time in ms used to delay opening/closing submenus when the selection
<a name="line119"></a> * changes.
<a name="line120"></a> *
<a name="line121"></a> * @type {number}
<a name="line122"></a> * @private
<a name="line123"></a> */
<a name="line124"></a>goog.ui.BasicMenu.SUBMENU_ACTIVATION_DELAY_MS_ = 300;
<a name="line125"></a>
<a name="line126"></a>
<a name="line127"></a>/**
<a name="line128"></a> * @return {number} The z-index.
<a name="line129"></a> */
<a name="line130"></a>goog.ui.BasicMenu.prototype.getZIndex = function() {
<a name="line131"></a>  return this.zIndex_;
<a name="line132"></a>};
<a name="line133"></a>
<a name="line134"></a>
<a name="line135"></a>/**
<a name="line136"></a> * Sets the z-index. The change will take effect the next time
<a name="line137"></a> * setVisible(true) is called.
<a name="line138"></a> *
<a name="line139"></a> * @param {number} zIndex The new z-index.
<a name="line140"></a> */
<a name="line141"></a>goog.ui.BasicMenu.prototype.setZIndex = function(zIndex) {
<a name="line142"></a>  this.zIndex_ = zIndex;
<a name="line143"></a>};
<a name="line144"></a>
<a name="line145"></a>
<a name="line146"></a>/**
<a name="line147"></a> * Add a menu item.
<a name="line148"></a> *
<a name="line149"></a> * @param {goog.ui.BasicMenu.Item} item Menu Item.
<a name="line150"></a> */
<a name="line151"></a>goog.ui.BasicMenu.prototype.add = function(item) {
<a name="line152"></a>  var el = this.getElement();
<a name="line153"></a>  if (!el) {
<a name="line154"></a>    throw Error(&#39;setElement() called before create()&#39;);
<a name="line155"></a>  }
<a name="line156"></a>  if (item.getMenu()) {
<a name="line157"></a>    throw Error(&#39;Menu item already added to a menu&#39;);
<a name="line158"></a>  }
<a name="line159"></a>
<a name="line160"></a>  item.setMenu_(this);
<a name="line161"></a>  this.items_.push(item);
<a name="line162"></a>  el.appendChild(item.create());
<a name="line163"></a>};
<a name="line164"></a>
<a name="line165"></a>
<a name="line166"></a>/**
<a name="line167"></a> * Add a menu item at a specific index.
<a name="line168"></a> * @param {goog.ui.BasicMenu.Item} item Menu Item.
<a name="line169"></a> * @param {number} index The index to insert at.
<a name="line170"></a> */
<a name="line171"></a>goog.ui.BasicMenu.prototype.insertAt = function(item, index) {
<a name="line172"></a>  var el = this.getElement();
<a name="line173"></a>  if (!el) {
<a name="line174"></a>    throw Error(&#39;setElement() called before create()&#39;);
<a name="line175"></a>  }
<a name="line176"></a>  if (item.getMenu()) {
<a name="line177"></a>    throw Error(&#39;Menu item already added to a menu&#39;);
<a name="line178"></a>  }
<a name="line179"></a>
<a name="line180"></a>  item.setMenu_(this);
<a name="line181"></a>  goog.array.insertAt(this.items_, item, index);
<a name="line182"></a>  el.insertBefore(item.create(), el.childNodes[index]);
<a name="line183"></a>};
<a name="line184"></a>
<a name="line185"></a>
<a name="line186"></a>/**
<a name="line187"></a> * Remove a menu item.
<a name="line188"></a> * @param {goog.ui.BasicMenu.Item} item Menu Item.
<a name="line189"></a> */
<a name="line190"></a>goog.ui.BasicMenu.prototype.remove = function(item) {
<a name="line191"></a>  item.remove();
<a name="line192"></a>  item.setMenu_(null);
<a name="line193"></a>  goog.array.remove(this.items_, item);
<a name="line194"></a>};
<a name="line195"></a>
<a name="line196"></a>
<a name="line197"></a>/**
<a name="line198"></a> * Remove a menu item from a particular index.
<a name="line199"></a> * @param {number} index Index of menu item to remove.
<a name="line200"></a> */
<a name="line201"></a>goog.ui.BasicMenu.prototype.removeAt = function(index) {
<a name="line202"></a>  this.remove(this.items_[index]);
<a name="line203"></a>};
<a name="line204"></a>
<a name="line205"></a>
<a name="line206"></a>/**
<a name="line207"></a> * Sets focus to the menu&#39;s base element.
<a name="line208"></a> */
<a name="line209"></a>goog.ui.BasicMenu.prototype.focus = function() {
<a name="line210"></a>  this.element_.focus();
<a name="line211"></a>};
<a name="line212"></a>
<a name="line213"></a>
<a name="line214"></a>/**
<a name="line215"></a> * Sets menu&#39;s parent menu in case it&#39;s a submenu.
<a name="line216"></a> * @param {goog.ui.BasicMenu} parent Parent menu.
<a name="line217"></a> * @private
<a name="line218"></a> */
<a name="line219"></a>goog.ui.BasicMenu.prototype.setParentMenu_ = function(parent) {
<a name="line220"></a>  this.parentMenu_ = parent;
<a name="line221"></a>  this.setParentEventTarget(parent);
<a name="line222"></a>};
<a name="line223"></a>
<a name="line224"></a>
<a name="line225"></a>/**
<a name="line226"></a> * @return {goog.ui.BasicMenu} The menu&#39;s parent menu in case it&#39;s a submenu.
<a name="line227"></a> */
<a name="line228"></a>goog.ui.BasicMenu.prototype.getParentMenu = function() {
<a name="line229"></a>  return this.parentMenu_;
<a name="line230"></a>};
<a name="line231"></a>
<a name="line232"></a>
<a name="line233"></a>/**
<a name="line234"></a> * Anchor the menu position to an element, and attach a click event.
<a name="line235"></a> * @param {Element} el Element to anchor menu to.
<a name="line236"></a> * @param {goog.positioning.Corner=} opt_pos Corner: Default Bottom-left.
<a name="line237"></a> * @param {goog.events.EventType=} opt_eventType Event that triggers menu.
<a name="line238"></a> *     Default click.
<a name="line239"></a> */
<a name="line240"></a>goog.ui.BasicMenu.prototype.setAnchorElement = function(el, opt_pos,
<a name="line241"></a>                                                        opt_eventType) {
<a name="line242"></a>  if (this.evtKey_) {
<a name="line243"></a>    goog.events.unlistenByKey(this.evtKey_);
<a name="line244"></a>  }
<a name="line245"></a>
<a name="line246"></a>  // Reset properties related to showing/hiding the menu as their state is only
<a name="line247"></a>  // applicable when bound to the anchor element original triggering the menu.
<a name="line248"></a>  if (this.anchorElement_ != el) {
<a name="line249"></a>    this.clickToClose_ = false;
<a name="line250"></a>    this.lastHideTime_ = -1;
<a name="line251"></a>  }
<a name="line252"></a>
<a name="line253"></a>  var eventType = opt_eventType || goog.events.EventType.CLICK;
<a name="line254"></a>  this.evtKey_ = goog.events.listen(el, eventType, this.openMenu_, false, this);
<a name="line255"></a>  this.resizeEvtKey_ = goog.events.listen(window,
<a name="line256"></a>      goog.events.EventType.RESIZE, this.onResize_, false, this);
<a name="line257"></a>  this.setPosition(new goog.positioning.AnchoredPosition(el,
<a name="line258"></a>      goog.isDef(opt_pos) ? opt_pos : goog.positioning.Corner.BOTTOM_START));
<a name="line259"></a>  this.anchorElement_ = el;
<a name="line260"></a>};
<a name="line261"></a>
<a name="line262"></a>
<a name="line263"></a>/** @override */
<a name="line264"></a>goog.ui.BasicMenu.prototype.disposeInternal = function() {
<a name="line265"></a>  for (var i = 0; i &lt; this.items_.length; i++) {
<a name="line266"></a>    this.items_[i].dispose();
<a name="line267"></a>  }
<a name="line268"></a>  goog.events.unlistenByKey(this.evtKey_);
<a name="line269"></a>  goog.events.unlistenByKey(this.resizeEvtKey_);
<a name="line270"></a>  goog.dom.removeNode(this.element_);
<a name="line271"></a>  delete this.element_;
<a name="line272"></a>  this.anchorElement_ = null;
<a name="line273"></a>  goog.ui.BasicMenu.superClass_.disposeInternal.call(this);
<a name="line274"></a>};
<a name="line275"></a>
<a name="line276"></a>
<a name="line277"></a>/**
<a name="line278"></a> * Sets whether the popup should be visible.
<a name="line279"></a> * @param {boolean} visible Show menu?.
<a name="line280"></a>*  @param {boolean=} opt_bubble Bubble to parent menu?.
<a name="line281"></a> */
<a name="line282"></a>goog.ui.BasicMenu.prototype.setVisible = function(visible, opt_bubble) {
<a name="line283"></a>  // Ignore setVisible(true) if already visible
<a name="line284"></a>  if (this.isOrWasRecentlyVisible() &amp;&amp; visible) {
<a name="line285"></a>    return;
<a name="line286"></a>  }
<a name="line287"></a>
<a name="line288"></a>  if (visible == false) {
<a name="line289"></a>
<a name="line290"></a>    // Close submenus recursively. goog.ui.BasicMenu.Item.closeSubmenu calls
<a name="line291"></a>    // goog.ui.BasicMenu.setVisible(false) for the submenu.
<a name="line292"></a>    if (this.activeItem_) {
<a name="line293"></a>      this.activeItem_.closeSubmenu();
<a name="line294"></a>      goog.ui.AttachableMenu.prototype.setSelectedItem.call(this, null);
<a name="line295"></a>    }
<a name="line296"></a>
<a name="line297"></a>    // Set focus to parent for submenus.
<a name="line298"></a>    if (this.parentMenu_ &amp;&amp; !opt_bubble) {
<a name="line299"></a>      this.parentMenu_.focus();
<a name="line300"></a>    }
<a name="line301"></a>  }
<a name="line302"></a>  else {
<a name="line303"></a>    if (this.parentMenu_) {
<a name="line304"></a>      this.zIndex_ = this.parentMenu_.getZIndex() + 1;
<a name="line305"></a>    }
<a name="line306"></a>    this.element_.style.zIndex = this.zIndex_;
<a name="line307"></a>  }
<a name="line308"></a>
<a name="line309"></a>  if (opt_bubble &amp;&amp; this.parentMenu_) {
<a name="line310"></a>    this.parentMenu_.setVisible(visible, opt_bubble);
<a name="line311"></a>  }
<a name="line312"></a>
<a name="line313"></a>  // Clear activation timer
<a name="line314"></a>  if (this.activationTimer_) {
<a name="line315"></a>    window.clearTimeout(this.activationTimer_);
<a name="line316"></a>    this.activationTimer_ = null;
<a name="line317"></a>  }
<a name="line318"></a>
<a name="line319"></a>  this.activeItem_ = null;
<a name="line320"></a>  goog.ui.PopupBase.prototype.setVisible.call(this, visible);
<a name="line321"></a>};
<a name="line322"></a>
<a name="line323"></a>
<a name="line324"></a>/**
<a name="line325"></a> * Select menu item by index.
<a name="line326"></a> * @param {number} index Index of item to select, zero based.
<a name="line327"></a> */
<a name="line328"></a>goog.ui.BasicMenu.prototype.setSelectedIndex = function(index) {
<a name="line329"></a>  this.setSelectedItem(index == -1 ? null : this.element_.childNodes[index]);
<a name="line330"></a>};
<a name="line331"></a>
<a name="line332"></a>
<a name="line333"></a>/**
<a name="line334"></a> * Select menu item by element reference and active it (open/close submenus)
<a name="line335"></a> * with a slight delay.
<a name="line336"></a> * @param {Element} el Element for item to select.
<a name="line337"></a> * @param {boolean=} opt_keyEvent Was item selected using keyboard? In that case
<a name="line338"></a> *     open submenus are closed immediately and new submenus are not opened
<a name="line339"></a> *     automatically.
<a name="line340"></a> * @private
<a name="line341"></a> */
<a name="line342"></a>goog.ui.BasicMenu.prototype.itemSelectionHandler_ = function(el, opt_keyEvent) {
<a name="line343"></a>  // Highlight menu item
<a name="line344"></a>  if (el || !this.activeItem_ || !this.activeItem_.hasOpenSubmenu()) {
<a name="line345"></a>    goog.ui.AttachableMenu.prototype.setSelectedItem.call(this, el);
<a name="line346"></a>  }
<a name="line347"></a>
<a name="line348"></a>  var item = el ? this.getItemForElement_(el) : null;
<a name="line349"></a>
<a name="line350"></a>  if (item &amp;&amp; item != this.activeItem_) {
<a name="line351"></a>
<a name="line352"></a>    if (opt_keyEvent &amp;&amp; this.activeItem_) {
<a name="line353"></a>      this.activeItem_.closeSubmenu();
<a name="line354"></a>      this.activeItem_ = null;
<a name="line355"></a>    }
<a name="line356"></a>
<a name="line357"></a>    // Clear previous timer, if any
<a name="line358"></a>    if (this.activationTimer_) {
<a name="line359"></a>      window.clearTimeout(this.activationTimer_);
<a name="line360"></a>      this.activationTimer_ = null;
<a name="line361"></a>    }
<a name="line362"></a>
<a name="line363"></a>    // Call selectItem_ with delay
<a name="line364"></a>    if (!opt_keyEvent) {
<a name="line365"></a>      this.activationTimer_ = window.setTimeout(
<a name="line366"></a>          goog.bind(this.selectItem_, this, item),
<a name="line367"></a>          goog.ui.BasicMenu.SUBMENU_ACTIVATION_DELAY_MS_);
<a name="line368"></a>    }
<a name="line369"></a>
<a name="line370"></a>    // Select anchor element in parent menu (to prevent submenu from closing).
<a name="line371"></a>    if (this.parentMenu_) {
<a name="line372"></a>      this.parentMenu_.setSelectedItem(this.anchorElement_);
<a name="line373"></a>      this.element_.focus();
<a name="line374"></a>    }
<a name="line375"></a>  }
<a name="line376"></a>};
<a name="line377"></a>
<a name="line378"></a>
<a name="line379"></a>/**
<a name="line380"></a> * Select menu item by element reference and activate it immediately.
<a name="line381"></a> * @param {Element|goog.ui.BasicMenu.Item} arg Element Item to select or element
<a name="line382"></a> *     for it.
<a name="line383"></a> */
<a name="line384"></a>goog.ui.BasicMenu.prototype.setSelectedItem = function(arg) {
<a name="line385"></a>  var el, item;
<a name="line386"></a>  if (!arg) {
<a name="line387"></a>    el = null;
<a name="line388"></a>    item = null;
<a name="line389"></a>  } else if (arg instanceof goog.ui.BasicMenu.Item) {
<a name="line390"></a>    item = arg;
<a name="line391"></a>    el = item.element_;
<a name="line392"></a>  } else {
<a name="line393"></a>    el = arg;
<a name="line394"></a>    item = this.getItemForElement_(el);
<a name="line395"></a>  }
<a name="line396"></a>
<a name="line397"></a>  if (el || !this.activeItem_ || !this.activeItem_.hasOpenSubmenu()) {
<a name="line398"></a>    goog.ui.AttachableMenu.prototype.setSelectedItem.call(this, el);
<a name="line399"></a>  }
<a name="line400"></a>
<a name="line401"></a>  if (item == this.activeItem_) {
<a name="line402"></a>    return;
<a name="line403"></a>  }
<a name="line404"></a>
<a name="line405"></a>  if (this.activeItem_ &amp;&amp; el) {
<a name="line406"></a>    this.activeItem_.closeSubmenu();
<a name="line407"></a>  }
<a name="line408"></a>
<a name="line409"></a>  if (el) {
<a name="line410"></a>  // TODO(user): var item declared earlier
<a name="line411"></a>    item = this.getItemForElement_(el);
<a name="line412"></a>    if (item.hasSubmenu()) {
<a name="line413"></a>      item.openSubmenu();
<a name="line414"></a>      item.getSubmenu().focus();
<a name="line415"></a>    }
<a name="line416"></a>    this.activeItem_ = item;
<a name="line417"></a>  }
<a name="line418"></a>};
<a name="line419"></a>
<a name="line420"></a>
<a name="line421"></a>/**
<a name="line422"></a> * @return {goog.ui.BasicMenu.Item} The selected item.
<a name="line423"></a> */
<a name="line424"></a>goog.ui.BasicMenu.prototype.getSelectedItem = function() {
<a name="line425"></a>  return this.selectedElement_ ? this.items_[goog.array.indexOf(
<a name="line426"></a>      this.element_.childNodes, this.selectedElement_)] : null;
<a name="line427"></a>};
<a name="line428"></a>
<a name="line429"></a>
<a name="line430"></a>/**
<a name="line431"></a> * Select menu item, triggered by a delayed call from itemSelectionHandler_.
<a name="line432"></a> * Opens submenu associated with selected/active item and/or closes any other
<a name="line433"></a> * open submenus.
<a name="line434"></a> * @param {goog.ui.BasicMenu.Item} item Menu item to select.
<a name="line435"></a> * @private
<a name="line436"></a> */
<a name="line437"></a>goog.ui.BasicMenu.prototype.selectItem_ = function(item) {
<a name="line438"></a>  // Clear timer
<a name="line439"></a>  if (this.activationTimer_) {
<a name="line440"></a>    window.clearTimeout(this.activationTimer_);
<a name="line441"></a>    this.activationTimer_ = null;
<a name="line442"></a>  }
<a name="line443"></a>
<a name="line444"></a>  var selectedItem = this.getItemForElement_(this.selectedElement_);
<a name="line445"></a>  if (selectedItem != item) {
<a name="line446"></a>    return;
<a name="line447"></a>  }
<a name="line448"></a>
<a name="line449"></a>  if (this.activeItem_ &amp;&amp; item) {
<a name="line450"></a>    this.activeItem_.closeSubmenu();
<a name="line451"></a>  }
<a name="line452"></a>
<a name="line453"></a>  if (item.hasSubmenu()) {
<a name="line454"></a>    item.openSubmenu();
<a name="line455"></a>    item.getSubmenu().focus();
<a name="line456"></a>  }
<a name="line457"></a>  else {
<a name="line458"></a>    this.element_.focus();
<a name="line459"></a>  }
<a name="line460"></a>
<a name="line461"></a>  this.activeItem_ = item;
<a name="line462"></a>};
<a name="line463"></a>
<a name="line464"></a>
<a name="line465"></a>/**
<a name="line466"></a> * Activates a menu item, opens submenu or triggers the select event and closes
<a name="line467"></a> * the menu if no submenu is available for item.
<a name="line468"></a> * @param {Element} el Element for item to activate.
<a name="line469"></a> * @private
<a name="line470"></a> */
<a name="line471"></a>goog.ui.BasicMenu.prototype.activateItem_ = function(el) {
<a name="line472"></a>  var item = this.getItemForElement_(el);
<a name="line473"></a>
<a name="line474"></a>  if (item.hasSubmenu()) {
<a name="line475"></a>    item.openSubmenu();
<a name="line476"></a>    var submenu = item.getSubmenu();
<a name="line477"></a>    submenu.focus();
<a name="line478"></a>    this.activeItem_ = item;
<a name="line479"></a>  }
<a name="line480"></a>  else {
<a name="line481"></a>    this.setVisible(false, true);
<a name="line482"></a>    this.dispatchEvent(new goog.ui.ItemEvent(
<a name="line483"></a>        goog.ui.MenuBase.Events.ITEM_ACTION, this, item));
<a name="line484"></a>  }
<a name="line485"></a>};
<a name="line486"></a>
<a name="line487"></a>
<a name="line488"></a>/**
<a name="line489"></a> * Anchor triggered, open menu unless it was just closed by the mousedown part
<a name="line490"></a> * of the click.
<a name="line491"></a> *
<a name="line492"></a> * @private
<a name="line493"></a> */
<a name="line494"></a>goog.ui.BasicMenu.prototype.openMenu_ = function() {
<a name="line495"></a>  if (!this.clickToClose_) {
<a name="line496"></a>    this.setVisible(true);
<a name="line497"></a>  }
<a name="line498"></a>  this.clickToClose_ = false;
<a name="line499"></a>};
<a name="line500"></a>
<a name="line501"></a>
<a name="line502"></a>/**
<a name="line503"></a> * Returns whether the specified element is contained inside the menu, including
<a name="line504"></a> * open submenus.
<a name="line505"></a> * @param {Element} el Element to check.
<a name="line506"></a> * @return {boolean} Whether the specified element is contained inside the menu,
<a name="line507"></a> *     including open submenus.
<a name="line508"></a> * @private
<a name="line509"></a> */
<a name="line510"></a>goog.ui.BasicMenu.prototype.containsElement_ = function(el) {
<a name="line511"></a>  if (goog.dom.contains(this.element_, el)) {
<a name="line512"></a>    return true;
<a name="line513"></a>  }
<a name="line514"></a>
<a name="line515"></a>  if (this.activeItem_ &amp;&amp; this.activeItem_.hasSubmenu()) {
<a name="line516"></a>    return this.activeItem_.getSubmenu().containsElement_(el);
<a name="line517"></a>  }
<a name="line518"></a>
<a name="line519"></a>  return false;
<a name="line520"></a>};
<a name="line521"></a>
<a name="line522"></a>
<a name="line523"></a>/**
<a name="line524"></a> * Mouse down handler for the document on capture phase. Hides the menu.
<a name="line525"></a> * @param {goog.events.BrowserEvent} e The event object.
<a name="line526"></a> * @private
<a name="line527"></a> */
<a name="line528"></a>goog.ui.BasicMenu.prototype.onDocumentMouseDown_ = function(e) {
<a name="line529"></a>  // Mousedown on anchor element, set clickToClose_ to true to prevent the
<a name="line530"></a>  // mouseup event from opening the menu.
<a name="line531"></a>  if (this.anchorElement_ == e.target ||
<a name="line532"></a>      goog.dom.contains(this.anchorElement_, /** @type {Node} */ (e.target))) {
<a name="line533"></a>    this.clickToClose_ = true;
<a name="line534"></a>  }
<a name="line535"></a>
<a name="line536"></a>  // Mousedown outside menu, close it.
<a name="line537"></a>  var rootMenu = this;
<a name="line538"></a>  while (rootMenu.parentMenu_) {
<a name="line539"></a>    rootMenu = rootMenu.parentMenu_;
<a name="line540"></a>  }
<a name="line541"></a>  if (!rootMenu.containsElement_(/** @type {Element} */ (e.target))) {
<a name="line542"></a>    this.hide_();
<a name="line543"></a>  }
<a name="line544"></a>};
<a name="line545"></a>
<a name="line546"></a>
<a name="line547"></a>/**
<a name="line548"></a> * Mouse over handler for the menu.
<a name="line549"></a> * @param {goog.events.Event} e The event object.
<a name="line550"></a> * @protected
<a name="line551"></a> */
<a name="line552"></a>goog.ui.BasicMenu.prototype.onMouseOver = function(e) {
<a name="line553"></a>  var eltItem = this.getAncestorMenuItem_(/** @type {Element} */ (e.target));
<a name="line554"></a>  if (eltItem == null) {
<a name="line555"></a>    return;
<a name="line556"></a>  }
<a name="line557"></a>
<a name="line558"></a>  this.itemSelectionHandler_(eltItem);
<a name="line559"></a>};
<a name="line560"></a>
<a name="line561"></a>
<a name="line562"></a>/**
<a name="line563"></a> * Mouse out handler for the menu.
<a name="line564"></a> * @param {goog.events.Event} e The event object.
<a name="line565"></a> * @protected
<a name="line566"></a> */
<a name="line567"></a>goog.ui.BasicMenu.prototype.onMouseOut = function(e) {
<a name="line568"></a>  var eltItem = this.getAncestorMenuItem_(/** @type {Element} */ (e.target));
<a name="line569"></a>  if (eltItem == null) {
<a name="line570"></a>    return;
<a name="line571"></a>  }
<a name="line572"></a>
<a name="line573"></a>  this.itemSelectionHandler_(null);
<a name="line574"></a>};
<a name="line575"></a>
<a name="line576"></a>
<a name="line577"></a>/**
<a name="line578"></a> * Overloaded document focus handler. Prevents the default action which is to
<a name="line579"></a> * close the menu on focus change, which is not desirable for hierarchical
<a name="line580"></a> * menus.
<a name="line581"></a> * @param {goog.events.Event} e The event object.
<a name="line582"></a> * @private
<a name="line583"></a> */
<a name="line584"></a>goog.ui.BasicMenu.prototype.onDocumentFocus_ = function(e) {
<a name="line585"></a>
<a name="line586"></a>};
<a name="line587"></a>
<a name="line588"></a>
<a name="line589"></a>/**
<a name="line590"></a> * Mouse up handler for the menu.
<a name="line591"></a> * @param {goog.events.Event} e The event object.
<a name="line592"></a> * @protected
<a name="line593"></a> */
<a name="line594"></a>goog.ui.BasicMenu.prototype.onMouseUp = function(e) {
<a name="line595"></a>  var eltItem = this.getAncestorMenuItem_(/** @type {Element} */ (e.target));
<a name="line596"></a>  if (eltItem != null) {
<a name="line597"></a>    this.activateItem_(eltItem);
<a name="line598"></a>  }
<a name="line599"></a>};
<a name="line600"></a>
<a name="line601"></a>
<a name="line602"></a>/**
<a name="line603"></a> * Window resize handler.
<a name="line604"></a> * @private
<a name="line605"></a> */
<a name="line606"></a>goog.ui.BasicMenu.prototype.onResize_ = function() {
<a name="line607"></a>  if (!this.isDisposed() &amp;&amp; this.isVisible()) {
<a name="line608"></a>    this.reposition();
<a name="line609"></a>  }
<a name="line610"></a>};
<a name="line611"></a>
<a name="line612"></a>
<a name="line613"></a>/**
<a name="line614"></a> * Key down handler for the menu.
<a name="line615"></a> * @param {goog.events.KeyEvent} e The event object.
<a name="line616"></a> * @protected
<a name="line617"></a> */
<a name="line618"></a>goog.ui.BasicMenu.prototype.onKeyDown = function(e) {
<a name="line619"></a>  var handled = false;
<a name="line620"></a>
<a name="line621"></a>  switch (e.keyCode) {
<a name="line622"></a>    case 37: // Left
<a name="line623"></a>      if (this.parentMenu_) {
<a name="line624"></a>        this.setVisible(false); // setVisible(false) calls focus on the parent
<a name="line625"></a>      }
<a name="line626"></a>      handled = true;
<a name="line627"></a>      break;
<a name="line628"></a>    case 39: // Right
<a name="line629"></a>      var item = this.getItemForElement_(this.selectedElement_);
<a name="line630"></a>     if (this.selectedElement_ &amp;&amp; item.hasSubmenu()) {
<a name="line631"></a>       this.activateItem_(this.selectedElement_);
<a name="line632"></a>       item.getSubmenu().setSelectedIndex(0);
<a name="line633"></a>      }
<a name="line634"></a>      handled = true;
<a name="line635"></a>      break;
<a name="line636"></a>    case 40: // Down
<a name="line637"></a>      this.itemSelectionHandler_(this.getNextPrevItem(false), true);
<a name="line638"></a>      handled = true;
<a name="line639"></a>      break;
<a name="line640"></a>    case 38: // Up
<a name="line641"></a>      this.itemSelectionHandler_(this.getNextPrevItem(true), true);
<a name="line642"></a>      handled = true;
<a name="line643"></a>      break;
<a name="line644"></a>    case 13: // Enter
<a name="line645"></a>      if (this.selectedElement_) {
<a name="line646"></a>        this.activateItem_(this.selectedElement_);
<a name="line647"></a>      }
<a name="line648"></a>      handled = true;
<a name="line649"></a>      break;
<a name="line650"></a>    case 27: // Esc
<a name="line651"></a>      this.setVisible(false);
<a name="line652"></a>      handled = true;
<a name="line653"></a>      break;
<a name="line654"></a>  }
<a name="line655"></a>
<a name="line656"></a>  // Prevent the browser&#39;s default keydown behaviour when the menu is open,
<a name="line657"></a>  // e.g. keyboard scrolling
<a name="line658"></a>  if (handled) {
<a name="line659"></a>    e.preventDefault();
<a name="line660"></a>  }
<a name="line661"></a>};
<a name="line662"></a>
<a name="line663"></a>
<a name="line664"></a>/**
<a name="line665"></a> * Called after the menu is shown.
<a name="line666"></a> * @protected
<a name="line667"></a> * @suppress {underscore}
<a name="line668"></a> * @override
<a name="line669"></a> */
<a name="line670"></a>goog.ui.BasicMenu.prototype.onShow_ = function() {
<a name="line671"></a>  goog.ui.BasicMenu.superClass_.onShow_.call(this);
<a name="line672"></a>  this.setSelectedItem(null);
<a name="line673"></a>
<a name="line674"></a>  var rtl = goog.style.isRightToLeft(this.element_);
<a name="line675"></a>  goog.dom.classes.enable(this.element_, goog.getCssName(&#39;goog-rtl&#39;), rtl);
<a name="line676"></a>
<a name="line677"></a>  if (!this.parentMenu_) {
<a name="line678"></a>    this.element_.focus();
<a name="line679"></a>  }
<a name="line680"></a>};
<a name="line681"></a>
<a name="line682"></a>
<a name="line683"></a>/**
<a name="line684"></a> * Returns the menu item a given element is associated with.
<a name="line685"></a> * @param {Element} el Element.
<a name="line686"></a> * @return {goog.ui.BasicMenu.Item} The menu item a given element is associated
<a name="line687"></a> *     with.
<a name="line688"></a> * @private
<a name="line689"></a> */
<a name="line690"></a>goog.ui.BasicMenu.prototype.getItemForElement_ = function(el) {
<a name="line691"></a>  var index = -1;
<a name="line692"></a>  for (var node = el; node; node = goog.dom.getPreviousElementSibling(node)) {
<a name="line693"></a>    index++;
<a name="line694"></a>  }
<a name="line695"></a>  return index == -1 ? null : this.items_[index];
<a name="line696"></a>};
<a name="line697"></a>
<a name="line698"></a>
<a name="line699"></a>
<a name="line700"></a>/**
<a name="line701"></a> * A menu item
<a name="line702"></a> *
<a name="line703"></a> * @param {?string} caption Html caption that gets shown in the menu.
<a name="line704"></a> * @param {Object=} opt_value The value that gets returned in the ItemEvent.
<a name="line705"></a> * @param {goog.ui.BasicMenu=} opt_submenu Optional menu that this item is the
<a name="line706"></a> *    anchor for.
<a name="line707"></a> * @constructor
<a name="line708"></a> * @extends {goog.Disposable}
<a name="line709"></a> */
<a name="line710"></a>goog.ui.BasicMenu.Item = function(caption, opt_value, opt_submenu) {
<a name="line711"></a>  goog.Disposable.call(this);
<a name="line712"></a>
<a name="line713"></a>  /**
<a name="line714"></a>   * HTML Caption that gets displayed in the menu
<a name="line715"></a>   * @type {string}
<a name="line716"></a>   * @private
<a name="line717"></a>   */
<a name="line718"></a>  this.caption_ = String(caption);
<a name="line719"></a>
<a name="line720"></a>  /**
<a name="line721"></a>   * Value associated with the menu option.
<a name="line722"></a>   * @type {*}
<a name="line723"></a>   * @private
<a name="line724"></a>   */
<a name="line725"></a>  this.value_ = opt_value || caption;
<a name="line726"></a>
<a name="line727"></a>  /**
<a name="line728"></a>   * Reference to the sub menu that this item is the anchor for.
<a name="line729"></a>   * @type {goog.ui.BasicMenu}
<a name="line730"></a>   * @private
<a name="line731"></a>   */
<a name="line732"></a>  this.submenu_ = opt_submenu || null;
<a name="line733"></a>
<a name="line734"></a>  /**
<a name="line735"></a>   * Reference to the menu that this item is attached to.
<a name="line736"></a>   * @type {goog.ui.BasicMenu}
<a name="line737"></a>   * @private
<a name="line738"></a>   */
<a name="line739"></a>  this.menu_ = null;
<a name="line740"></a>
<a name="line741"></a>  /**
<a name="line742"></a>   * Menu item element
<a name="line743"></a>   * @type {Element}
<a name="line744"></a>   * @private
<a name="line745"></a>   */
<a name="line746"></a>  this.element_ = null;
<a name="line747"></a>};
<a name="line748"></a>goog.inherits(goog.ui.BasicMenu.Item, goog.Disposable);
<a name="line749"></a>
<a name="line750"></a>
<a name="line751"></a>/**
<a name="line752"></a> * @return {string} The caption.
<a name="line753"></a> */
<a name="line754"></a>goog.ui.BasicMenu.Item.prototype.getCaption = function() {
<a name="line755"></a>  return this.caption_;
<a name="line756"></a>};
<a name="line757"></a>
<a name="line758"></a>
<a name="line759"></a>/**
<a name="line760"></a> * @return {*} The value associated with menu item.
<a name="line761"></a> */
<a name="line762"></a>goog.ui.BasicMenu.Item.prototype.getValue = function() {
<a name="line763"></a>  return this.value_;
<a name="line764"></a>};
<a name="line765"></a>
<a name="line766"></a>
<a name="line767"></a>/**
<a name="line768"></a> * Updates caption.
<a name="line769"></a> * @param {string} caption Desired caption.
<a name="line770"></a> */
<a name="line771"></a>goog.ui.BasicMenu.Item.prototype.setCaption = function(caption) {
<a name="line772"></a>  this.caption_ = caption;
<a name="line773"></a>  if (this.element_) {
<a name="line774"></a>    this.element_.firstChild.nodeValue = caption;
<a name="line775"></a>  }
<a name="line776"></a>};
<a name="line777"></a>
<a name="line778"></a>
<a name="line779"></a>/**
<a name="line780"></a> * Sets value associated with menu item.
<a name="line781"></a> * @param {Object} value Desired value.
<a name="line782"></a> */
<a name="line783"></a>goog.ui.BasicMenu.Item.prototype.setValue = function(value) {
<a name="line784"></a>  this.value_ = value;
<a name="line785"></a>};
<a name="line786"></a>
<a name="line787"></a>
<a name="line788"></a>/** @override */
<a name="line789"></a>goog.ui.BasicMenu.Item.prototype.disposeInternal = function() {
<a name="line790"></a>  goog.ui.BasicMenu.Item.superClass_.disposeInternal.call(this);
<a name="line791"></a>  this.remove();
<a name="line792"></a>  if (this.submenu_) {
<a name="line793"></a>    this.submenu_.dispose();
<a name="line794"></a>  }
<a name="line795"></a>};
<a name="line796"></a>
<a name="line797"></a>
<a name="line798"></a>/**
<a name="line799"></a> * Set the parent menu for this menu item.
<a name="line800"></a> * @param {goog.ui.BasicMenu} menu Parent menu.
<a name="line801"></a> * @private
<a name="line802"></a> */
<a name="line803"></a>goog.ui.BasicMenu.Item.prototype.setMenu_ = function(menu) {
<a name="line804"></a>  this.menu_ = menu;
<a name="line805"></a>  if (this.submenu_) {
<a name="line806"></a>    this.submenu_.setParentMenu_(menu);
<a name="line807"></a>  }
<a name="line808"></a>};
<a name="line809"></a>
<a name="line810"></a>
<a name="line811"></a>/**
<a name="line812"></a> * @return {goog.ui.BasicMenu} The parent menu for this menu item.
<a name="line813"></a> * @protected
<a name="line814"></a> */
<a name="line815"></a>goog.ui.BasicMenu.Item.prototype.getMenu = function() {
<a name="line816"></a>  return this.menu_;
<a name="line817"></a>};
<a name="line818"></a>
<a name="line819"></a>
<a name="line820"></a>/**
<a name="line821"></a> * Returns the DOM element(s) for the menu item.  Should be treated as package
<a name="line822"></a> * scope.
<a name="line823"></a> * @return {Element} The DOM element(s) for the menu item.
<a name="line824"></a> */
<a name="line825"></a>goog.ui.BasicMenu.Item.prototype.create = function() {
<a name="line826"></a>  if (!this.menu_) {
<a name="line827"></a>    throw Error(&#39;MenuItem is not attached to a menu&#39;);
<a name="line828"></a>  }
<a name="line829"></a>  var leftArrow, rightArrow;
<a name="line830"></a>  if (this.submenu_) {
<a name="line831"></a>    rightArrow = goog.dom.createDom(&#39;span&#39;,
<a name="line832"></a>        goog.getCssName(&#39;goog-menu-arrow-right&#39;), &#39;\u25b6&#39;);
<a name="line833"></a>    leftArrow = goog.dom.createDom(&#39;span&#39;,
<a name="line834"></a>        goog.getCssName(&#39;goog-menu-arrow-left&#39;), &#39;\u25c0&#39;);
<a name="line835"></a>  }
<a name="line836"></a>
<a name="line837"></a>  this.element_ = goog.dom.createDom(&#39;div&#39;, this.menu_.getItemClassName(),
<a name="line838"></a>      this.caption_, leftArrow, rightArrow);
<a name="line839"></a>
<a name="line840"></a>  return this.element_;
<a name="line841"></a>};
<a name="line842"></a>
<a name="line843"></a>
<a name="line844"></a>/**
<a name="line845"></a> * Removes DOM element(s) for item.
<a name="line846"></a> */
<a name="line847"></a>goog.ui.BasicMenu.Item.prototype.remove = function() {
<a name="line848"></a>  goog.dom.removeNode(this.element_);
<a name="line849"></a>  this.element_ = null;
<a name="line850"></a>};
<a name="line851"></a>
<a name="line852"></a>
<a name="line853"></a>/**
<a name="line854"></a> * @return {boolean} Whether the menu item has has submenu.
<a name="line855"></a> */
<a name="line856"></a>goog.ui.BasicMenu.Item.prototype.hasSubmenu = function() {
<a name="line857"></a>  return this.submenu_ != null;
<a name="line858"></a>};
<a name="line859"></a>
<a name="line860"></a>
<a name="line861"></a>/**
<a name="line862"></a> * @return {boolean} Whether the menu item has has submenu that&#39;s open.
<a name="line863"></a> */
<a name="line864"></a>goog.ui.BasicMenu.Item.prototype.hasOpenSubmenu = function() {
<a name="line865"></a>  return this.hasSubmenu() ? this.submenu_.isOrWasRecentlyVisible() : false;
<a name="line866"></a>};
<a name="line867"></a>
<a name="line868"></a>
<a name="line869"></a>/**
<a name="line870"></a> * @return {goog.ui.BasicMenu} The submenu associated with the item.
<a name="line871"></a> */
<a name="line872"></a>goog.ui.BasicMenu.Item.prototype.getSubmenu = function() {
<a name="line873"></a>  return this.submenu_;
<a name="line874"></a>};
<a name="line875"></a>
<a name="line876"></a>
<a name="line877"></a>/**
<a name="line878"></a> * Opens the item&#39;s submenu.
<a name="line879"></a> */
<a name="line880"></a>goog.ui.BasicMenu.Item.prototype.openSubmenu = function() {
<a name="line881"></a>  if (this.submenu_) {
<a name="line882"></a>    var submenu = this.submenu_;
<a name="line883"></a>
<a name="line884"></a>    // If the submenu is pinned at a TOP position, infer
<a name="line885"></a>    // that we want to anchor at the opposite corresponding
<a name="line886"></a>    // absolute/relative horizontal position.
<a name="line887"></a>    var pinComplement = goog.positioning.flipCornerHorizontal(
<a name="line888"></a>        submenu.getPinnedCorner());
<a name="line889"></a>    submenu.setAnchorElement(this.element_, pinComplement);
<a name="line890"></a>    submenu.setVisible(true);
<a name="line891"></a>  }
<a name="line892"></a>};
<a name="line893"></a>
<a name="line894"></a>
<a name="line895"></a>/**
<a name="line896"></a> * Closes the item&#39;s submenu.
<a name="line897"></a> */
<a name="line898"></a>goog.ui.BasicMenu.Item.prototype.closeSubmenu = function() {
<a name="line899"></a>  if (this.submenu_) {
<a name="line900"></a>    this.submenu_.setVisible(false);
<a name="line901"></a>  }
<a name="line902"></a>};
<a name="line903"></a>
<a name="line904"></a>
<a name="line905"></a>
<a name="line906"></a>/**
<a name="line907"></a> * A menu separator
<a name="line908"></a> *
<a name="line909"></a> * @constructor
<a name="line910"></a> * @extends {goog.ui.BasicMenu.Item}
<a name="line911"></a> */
<a name="line912"></a>goog.ui.BasicMenu.Separator = function() {
<a name="line913"></a>  goog.ui.BasicMenu.Item.call(this, null);
<a name="line914"></a>};
<a name="line915"></a>goog.inherits(goog.ui.BasicMenu.Separator, goog.ui.BasicMenu.Item);
<a name="line916"></a>
<a name="line917"></a>
<a name="line918"></a>/**
<a name="line919"></a> * Returns the DOM element(s) for the separator.  Should be treated as having
<a name="line920"></a> * package scope.
<a name="line921"></a> * @return {Element} The DOM element(s) for the separator.
<a name="line922"></a> */
<a name="line923"></a>goog.ui.BasicMenu.Separator.prototype.create = function() {
<a name="line924"></a>  if (!this.menu_) {
<a name="line925"></a>    throw Error(&#39;MenuSeparator is not attached to a menu&#39;);
<a name="line926"></a>  }
<a name="line927"></a>  this.element_ = goog.dom.createElement(&#39;hr&#39;);
<a name="line928"></a>  goog.dom.a11y.setRole(this.element_, &#39;separator&#39;);
<a name="line929"></a>  return this.element_;
<a name="line930"></a>};
</pre>


</body>
</html>
