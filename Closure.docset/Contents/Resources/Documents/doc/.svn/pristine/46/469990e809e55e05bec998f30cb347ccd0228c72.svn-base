<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>eventobserver.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_testing_events_eventobserver.js.html">eventobserver.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2010 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Event observer.
<a name="line17"></a> *
<a name="line18"></a> * Provides an event observer that holds onto events that it handles.  This
<a name="line19"></a> * can be used in unit testing to verify an event target&#39;s events --
<a name="line20"></a> * that the order count, types, etc. are correct.
<a name="line21"></a> *
<a name="line22"></a> * Example usage:
<a name="line23"></a> * &lt;pre&gt;
<a name="line24"></a> * var observer = new goog.testing.events.EventObserver();
<a name="line25"></a> * var widget = new foo.Widget();
<a name="line26"></a> * goog.events.listen(widget, [&#39;select&#39;, &#39;submit&#39;], observer);
<a name="line27"></a> * // Simulate user action of 3 select events and 2 submit events.
<a name="line28"></a> * assertEquals(3, observer.getEvents(&#39;select&#39;).length);
<a name="line29"></a> * assertEquals(2, observer.getEvents(&#39;submit&#39;).length);
<a name="line30"></a> * &lt;/pre&gt;
<a name="line31"></a> *
<a name="line32"></a> */
<a name="line33"></a>
<a name="line34"></a>goog.provide(&#39;goog.testing.events.EventObserver&#39;);
<a name="line35"></a>
<a name="line36"></a>goog.require(&#39;goog.array&#39;);
<a name="line37"></a>
<a name="line38"></a>
<a name="line39"></a>
<a name="line40"></a>/**
<a name="line41"></a> * Event observer.  Implements a handleEvent interface so it may be used as
<a name="line42"></a> * a listener in listening functions and methods.
<a name="line43"></a> * @see goog.events.listen
<a name="line44"></a> * @see goog.events.EventHandler
<a name="line45"></a> * @constructor
<a name="line46"></a> */
<a name="line47"></a>goog.testing.events.EventObserver = function() {
<a name="line48"></a>
<a name="line49"></a>  /**
<a name="line50"></a>   * A list of events handled by the observer in order of handling, oldest to
<a name="line51"></a>   * newest.
<a name="line52"></a>   * @type {!Array.&lt;!goog.events.Event&gt;}
<a name="line53"></a>   * @private
<a name="line54"></a>   */
<a name="line55"></a>  this.events_ = [];
<a name="line56"></a>};
<a name="line57"></a>
<a name="line58"></a>
<a name="line59"></a>/**
<a name="line60"></a> * Handles an event and remembers it.  Event listening functions and methods
<a name="line61"></a> * will call this method when this observer is used as a listener.
<a name="line62"></a> * @see goog.events.listen
<a name="line63"></a> * @see goog.events.EventHandler
<a name="line64"></a> * @param {!goog.events.Event} e Event to handle.
<a name="line65"></a> */
<a name="line66"></a>goog.testing.events.EventObserver.prototype.handleEvent = function(e) {
<a name="line67"></a>  this.events_.push(e);
<a name="line68"></a>};
<a name="line69"></a>
<a name="line70"></a>
<a name="line71"></a>/**
<a name="line72"></a> * @param {string=} opt_type If given, only return events of this type.
<a name="line73"></a> * @return {!Array.&lt;!goog.events.Event&gt;} The events handled, oldest to newest.
<a name="line74"></a> */
<a name="line75"></a>goog.testing.events.EventObserver.prototype.getEvents = function(opt_type) {
<a name="line76"></a>  var events = goog.array.clone(this.events_);
<a name="line77"></a>
<a name="line78"></a>  if (opt_type) {
<a name="line79"></a>    events = goog.array.filter(events, function(event) {
<a name="line80"></a>      return event.type == opt_type;
<a name="line81"></a>    });
<a name="line82"></a>  }
<a name="line83"></a>
<a name="line84"></a>  return events;
<a name="line85"></a>};
</pre>


</body>
</html>
