<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>replay.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_jsaction_replay.js.html">replay.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Functions for replaying events.
<a name="line17"></a> * NOTE(user): This file should be considered private within goog.jsaction.
<a name="line18"></a> *
<a name="line19"></a> */
<a name="line20"></a>
<a name="line21"></a>
<a name="line22"></a>goog.provide(&#39;goog.jsaction.replay&#39;);
<a name="line23"></a>
<a name="line24"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line25"></a>goog.require(&#39;goog.jsaction.EventContract&#39;);
<a name="line26"></a>
<a name="line27"></a>
<a name="line28"></a>/**
<a name="line29"></a> * Replays an event.
<a name="line30"></a> * @param {!goog.jsaction.ReplayInfo} replayInfo The replay info record.
<a name="line31"></a> */
<a name="line32"></a>goog.jsaction.replay.replayEvent = function(replayInfo) {
<a name="line33"></a>  var event = goog.jsaction.replay.createEvent_(replayInfo.event);
<a name="line34"></a>
<a name="line35"></a>  // Add the replay info as property to the event object.
<a name="line36"></a>  // This allows the event handler (EventContract#handleEvent_) to
<a name="line37"></a>  // detect replayed events.
<a name="line38"></a>  event[goog.jsaction.EventContract.PROPERTY_KEY_REPLAY_INFO] = replayInfo;
<a name="line39"></a>
<a name="line40"></a>  goog.jsaction.replay.triggerEvent_(replayInfo.element, event);
<a name="line41"></a>};
<a name="line42"></a>
<a name="line43"></a>
<a name="line44"></a>/**
<a name="line45"></a> * Creates an event object.
<a name="line46"></a> * @param {!Event} original The event to create a new event from.
<a name="line47"></a> * @return {!Event} The event object.
<a name="line48"></a> * @private
<a name="line49"></a> */
<a name="line50"></a>goog.jsaction.replay.createEvent_ = function(original) {
<a name="line51"></a>  var event;
<a name="line52"></a>  if (document.createEvent) {
<a name="line53"></a>    // Event creation as per W3C event model specification.
<a name="line54"></a>    event = document.createEvent(&#39;MouseEvents&#39;);
<a name="line55"></a>    event.initMouseEvent(
<a name="line56"></a>        original.type,
<a name="line57"></a>        true,  // canBubble
<a name="line58"></a>        true,  // cancelable
<a name="line59"></a>        window,
<a name="line60"></a>        original.detail,
<a name="line61"></a>        original.screenX, original.screenY,
<a name="line62"></a>        original.clientX, original.clientY,
<a name="line63"></a>        original.ctrlKey, original.altKey,
<a name="line64"></a>        original.shiftKey, original.metaKey,
<a name="line65"></a>        original.button,
<a name="line66"></a>        original.relatedTarget);
<a name="line67"></a>
<a name="line68"></a>  } else {
<a name="line69"></a>    goog.asserts.assert(document.createEventObject);
<a name="line70"></a>    // Older versions of IE (up to version 8) do not support the
<a name="line71"></a>    // W3C event model. Use the IE specific functions instead.
<a name="line72"></a>    event = document.createEventObject();
<a name="line73"></a>    event.type = original.type;
<a name="line74"></a>    event.clientX = original.clientX;
<a name="line75"></a>    event.clientY = original.clientY;
<a name="line76"></a>    event.button = original.button;
<a name="line77"></a>    event.detail = original.detail;
<a name="line78"></a>    event.ctrlKey = original.ctrlKey;
<a name="line79"></a>    event.altKey = original.altKey;
<a name="line80"></a>    event.shiftKey = original.shiftKey;
<a name="line81"></a>    event.metaKey = original.metaKey;
<a name="line82"></a>  }
<a name="line83"></a>  return event;
<a name="line84"></a>};
<a name="line85"></a>
<a name="line86"></a>
<a name="line87"></a>/**
<a name="line88"></a> * Triggers an event.
<a name="line89"></a> * @param {!Element} elem The element to trigger the event on.
<a name="line90"></a> * @param {!Event} event The event object.
<a name="line91"></a> * @private
<a name="line92"></a> */
<a name="line93"></a>goog.jsaction.replay.triggerEvent_ = function(elem, event) {
<a name="line94"></a>  if (elem.dispatchEvent) {
<a name="line95"></a>    elem.dispatchEvent(event);
<a name="line96"></a>  } else {
<a name="line97"></a>    goog.asserts.assert(elem.fireEvent);
<a name="line98"></a>    elem.fireEvent(&#39;on&#39; + event.type, event);
<a name="line99"></a>  }
<a name="line100"></a>};
</pre>


</body>
</html>
