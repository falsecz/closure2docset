<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>mat4.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_vec_mat4.js.html">mat4.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Implements 4x4 matrices and their related functions which are
<a name="line17"></a> * compatible with WebGL. The API is structured to avoid unnecessary memory
<a name="line18"></a> * allocations.  The last parameter will typically be the output vector and
<a name="line19"></a> * an object can be both an input and output parameter to all methods except
<a name="line20"></a> * where noted. Matrix operations follow the mathematical form when multiplying
<a name="line21"></a> * vectors as follows: resultVec = matrix * vec.
<a name="line22"></a> *
<a name="line23"></a> */
<a name="line24"></a>goog.provide(&#39;goog.vec.Mat4&#39;);
<a name="line25"></a>
<a name="line26"></a>goog.require(&#39;goog.vec&#39;);
<a name="line27"></a>goog.require(&#39;goog.vec.Vec3&#39;);
<a name="line28"></a>goog.require(&#39;goog.vec.Vec4&#39;);
<a name="line29"></a>
<a name="line30"></a>
<a name="line31"></a>/**
<a name="line32"></a> * Type used when an argument can be either an array of numbers or a
<a name="line33"></a> * typed float32 array. This allows using the class on normal js arrays too.
<a name="line34"></a> * E.g. the following code is perfectly valid:
<a name="line35"></a> * &lt;pre&gt;
<a name="line36"></a> * var matA = new Array(16);
<a name="line37"></a> * var matB = goog.vec.Mat4.create();
<a name="line38"></a> * goog.vec.Mat4.makeIdentity(matA);
<a name="line39"></a> * goog.vec.Mat4.makeIdentity(matB);
<a name="line40"></a> * goog.vec.Mat4.multMat(matA, matB, matA);
<a name="line41"></a> * &lt;/pre&gt;
<a name="line42"></a> * Note that matA is a double precision matrix (doubles), while matB is a
<a name="line43"></a> * single precision matrix (floats).
<a name="line44"></a> * @typedef {goog.vec.ArrayType}
<a name="line45"></a> */
<a name="line46"></a>goog.vec.Mat4.Mat4Like;
<a name="line47"></a>
<a name="line48"></a>
<a name="line49"></a>/**
<a name="line50"></a> * @typedef {Float32Array}
<a name="line51"></a> */
<a name="line52"></a>goog.vec.Mat4.Type;
<a name="line53"></a>
<a name="line54"></a>
<a name="line55"></a>/**
<a name="line56"></a> * Creates the array representation of a 4x4 matrix. The use of the array
<a name="line57"></a> * directly instead of a class reduces overhead.
<a name="line58"></a> * The returned matrix is cleared to all zeros.
<a name="line59"></a> *
<a name="line60"></a> * @return {!goog.vec.Mat4.Type} The new, sixteen element array.
<a name="line61"></a> */
<a name="line62"></a>goog.vec.Mat4.create = function() {
<a name="line63"></a>  return new Float32Array(16);
<a name="line64"></a>};
<a name="line65"></a>
<a name="line66"></a>
<a name="line67"></a>/**
<a name="line68"></a> * Creates the array representation of a 4x4 matrix. The use of the array
<a name="line69"></a> * directly eliminates any overhead associated with the class representation
<a name="line70"></a> * defined above. The returned matrix is initialized with the identity
<a name="line71"></a> *
<a name="line72"></a> * @return {!goog.vec.Mat4.Type} The new, sixteen element array.
<a name="line73"></a> */
<a name="line74"></a>goog.vec.Mat4.createIdentity = function() {
<a name="line75"></a>  var mat = goog.vec.Mat4.create();
<a name="line76"></a>  mat[0] = mat[5] = mat[10] = mat[15] = 1;
<a name="line77"></a>  return mat;
<a name="line78"></a>};
<a name="line79"></a>
<a name="line80"></a>
<a name="line81"></a>/**
<a name="line82"></a> * Creates a 4x4 matrix initialized from the given array.
<a name="line83"></a> *
<a name="line84"></a> * @param {goog.vec.Mat4.Mat4Like} matrix The array containing the
<a name="line85"></a> *     matrix values in column major order.
<a name="line86"></a> * @return {!goog.vec.Mat4.Type} The new, 16 element array.
<a name="line87"></a> */
<a name="line88"></a>goog.vec.Mat4.createFromArray = function(matrix) {
<a name="line89"></a>  var newMatrix = goog.vec.Mat4.create();
<a name="line90"></a>  goog.vec.Mat4.setFromArray(newMatrix, matrix);
<a name="line91"></a>  return newMatrix;
<a name="line92"></a>};
<a name="line93"></a>
<a name="line94"></a>
<a name="line95"></a>/**
<a name="line96"></a> * Creates a 4x4 matrix initialized from the given values.
<a name="line97"></a> *
<a name="line98"></a> * @param {number} v00 The values at (0, 0).
<a name="line99"></a> * @param {number} v10 The values at (1, 0).
<a name="line100"></a> * @param {number} v20 The values at (2, 0).
<a name="line101"></a> * @param {number} v30 The values at (3, 0).
<a name="line102"></a> * @param {number} v01 The values at (0, 1).
<a name="line103"></a> * @param {number} v11 The values at (1, 1).
<a name="line104"></a> * @param {number} v21 The values at (2, 1).
<a name="line105"></a> * @param {number} v31 The values at (3, 1).
<a name="line106"></a> * @param {number} v02 The values at (0, 2).
<a name="line107"></a> * @param {number} v12 The values at (1, 2).
<a name="line108"></a> * @param {number} v22 The values at (2, 2).
<a name="line109"></a> * @param {number} v32 The values at (3, 2).
<a name="line110"></a> * @param {number} v03 The values at (0, 3).
<a name="line111"></a> * @param {number} v13 The values at (1, 3).
<a name="line112"></a> * @param {number} v23 The values at (2, 3).
<a name="line113"></a> * @param {number} v33 The values at (3, 3).
<a name="line114"></a> * @return {!goog.vec.Mat4.Type} The new, 16 element array.
<a name="line115"></a> */
<a name="line116"></a>goog.vec.Mat4.createFromValues = function(
<a name="line117"></a>    v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32,
<a name="line118"></a>    v03, v13, v23, v33) {
<a name="line119"></a>  var newMatrix = goog.vec.Mat4.create();
<a name="line120"></a>  goog.vec.Mat4.setFromValues(
<a name="line121"></a>      newMatrix, v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32,
<a name="line122"></a>      v03, v13, v23, v33);
<a name="line123"></a>  return newMatrix;
<a name="line124"></a>};
<a name="line125"></a>
<a name="line126"></a>
<a name="line127"></a>/**
<a name="line128"></a> * Creates a clone of a 4x4 matrix.
<a name="line129"></a> *
<a name="line130"></a> * @param {goog.vec.Mat4.Mat4Like} matrix The source 4x4 matrix.
<a name="line131"></a> * @return {!goog.vec.Mat4.Type} The new, 16 element matrix.
<a name="line132"></a> */
<a name="line133"></a>goog.vec.Mat4.clone = goog.vec.Mat4.createFromArray;
<a name="line134"></a>
<a name="line135"></a>
<a name="line136"></a>/**
<a name="line137"></a> * Retrieves the element at the requested row and column.
<a name="line138"></a> *
<a name="line139"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix containing the
<a name="line140"></a> *     value to retrieve.
<a name="line141"></a> * @param {number} row The row index.
<a name="line142"></a> * @param {number} column The column index.
<a name="line143"></a> * @return {number} The element value at the requested row, column indices.
<a name="line144"></a> */
<a name="line145"></a>goog.vec.Mat4.getElement = function(mat, row, column) {
<a name="line146"></a>  return mat[row + column * 4];
<a name="line147"></a>};
<a name="line148"></a>
<a name="line149"></a>
<a name="line150"></a>/**
<a name="line151"></a> * Sets the element at the requested row and column.
<a name="line152"></a> *
<a name="line153"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to set the value on.
<a name="line154"></a> * @param {number} row The row index.
<a name="line155"></a> * @param {number} column The column index.
<a name="line156"></a> * @param {number} value The value to set at the requested row, column.
<a name="line157"></a> */
<a name="line158"></a>goog.vec.Mat4.setElement = function(mat, row, column, value) {
<a name="line159"></a>  mat[row + column * 4] = value;
<a name="line160"></a>};
<a name="line161"></a>
<a name="line162"></a>
<a name="line163"></a>/**
<a name="line164"></a> * Initializes the matrix from the set of values. Note the values supplied are
<a name="line165"></a> * in column major order.
<a name="line166"></a> *
<a name="line167"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the
<a name="line168"></a> *     values.
<a name="line169"></a> * @param {number} v00 The values at (0, 0).
<a name="line170"></a> * @param {number} v10 The values at (1, 0).
<a name="line171"></a> * @param {number} v20 The values at (2, 0).
<a name="line172"></a> * @param {number} v30 The values at (3, 0).
<a name="line173"></a> * @param {number} v01 The values at (0, 1).
<a name="line174"></a> * @param {number} v11 The values at (1, 1).
<a name="line175"></a> * @param {number} v21 The values at (2, 1).
<a name="line176"></a> * @param {number} v31 The values at (3, 1).
<a name="line177"></a> * @param {number} v02 The values at (0, 2).
<a name="line178"></a> * @param {number} v12 The values at (1, 2).
<a name="line179"></a> * @param {number} v22 The values at (2, 2).
<a name="line180"></a> * @param {number} v32 The values at (3, 2).
<a name="line181"></a> * @param {number} v03 The values at (0, 3).
<a name="line182"></a> * @param {number} v13 The values at (1, 3).
<a name="line183"></a> * @param {number} v23 The values at (2, 3).
<a name="line184"></a> * @param {number} v33 The values at (3, 3).
<a name="line185"></a> */
<a name="line186"></a>goog.vec.Mat4.setFromValues = function(
<a name="line187"></a>    mat, v00, v10, v20, v30, v01, v11, v21, v31, v02, v12, v22, v32,
<a name="line188"></a>    v03, v13, v23, v33) {
<a name="line189"></a>  mat[0] = v00;
<a name="line190"></a>  mat[1] = v10;
<a name="line191"></a>  mat[2] = v20;
<a name="line192"></a>  mat[3] = v30;
<a name="line193"></a>  mat[4] = v01;
<a name="line194"></a>  mat[5] = v11;
<a name="line195"></a>  mat[6] = v21;
<a name="line196"></a>  mat[7] = v31;
<a name="line197"></a>  mat[8] = v02;
<a name="line198"></a>  mat[9] = v12;
<a name="line199"></a>  mat[10] = v22;
<a name="line200"></a>  mat[11] = v32;
<a name="line201"></a>  mat[12] = v03;
<a name="line202"></a>  mat[13] = v13;
<a name="line203"></a>  mat[14] = v23;
<a name="line204"></a>  mat[15] = v33;
<a name="line205"></a>};
<a name="line206"></a>
<a name="line207"></a>
<a name="line208"></a>/**
<a name="line209"></a> * Sets the matrix from the array of values stored in column major order.
<a name="line210"></a> *
<a name="line211"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line212"></a> * @param {goog.vec.Mat4.Mat4Like} values The column major ordered
<a name="line213"></a> *     array of values to store in the matrix.
<a name="line214"></a> */
<a name="line215"></a>goog.vec.Mat4.setFromArray = function(mat, values) {
<a name="line216"></a>  mat[0] = values[0];
<a name="line217"></a>  mat[1] = values[1];
<a name="line218"></a>  mat[2] = values[2];
<a name="line219"></a>  mat[3] = values[3];
<a name="line220"></a>  mat[4] = values[4];
<a name="line221"></a>  mat[5] = values[5];
<a name="line222"></a>  mat[6] = values[6];
<a name="line223"></a>  mat[7] = values[7];
<a name="line224"></a>  mat[8] = values[8];
<a name="line225"></a>  mat[9] = values[9];
<a name="line226"></a>  mat[10] = values[10];
<a name="line227"></a>  mat[11] = values[11];
<a name="line228"></a>  mat[12] = values[12];
<a name="line229"></a>  mat[13] = values[13];
<a name="line230"></a>  mat[14] = values[14];
<a name="line231"></a>  mat[15] = values[15];
<a name="line232"></a>};
<a name="line233"></a>
<a name="line234"></a>
<a name="line235"></a>/**
<a name="line236"></a> * Sets the matrix from the array of values stored in row major order.
<a name="line237"></a> *
<a name="line238"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line239"></a> * @param {goog.vec.Mat4.Mat4Like} values The row major ordered array of
<a name="line240"></a> *     values to store in the matrix.
<a name="line241"></a> */
<a name="line242"></a>goog.vec.Mat4.setFromRowMajorArray = function(mat, values) {
<a name="line243"></a>  mat[0] = values[0];
<a name="line244"></a>  mat[1] = values[4];
<a name="line245"></a>  mat[2] = values[8];
<a name="line246"></a>  mat[3] = values[12];
<a name="line247"></a>
<a name="line248"></a>  mat[4] = values[1];
<a name="line249"></a>  mat[5] = values[5];
<a name="line250"></a>  mat[6] = values[9];
<a name="line251"></a>  mat[7] = values[13];
<a name="line252"></a>
<a name="line253"></a>  mat[8] = values[2];
<a name="line254"></a>  mat[9] = values[6];
<a name="line255"></a>  mat[10] = values[10];
<a name="line256"></a>  mat[11] = values[14];
<a name="line257"></a>
<a name="line258"></a>  mat[12] = values[3];
<a name="line259"></a>  mat[13] = values[7];
<a name="line260"></a>  mat[14] = values[11];
<a name="line261"></a>  mat[15] = values[15];
<a name="line262"></a>};
<a name="line263"></a>
<a name="line264"></a>
<a name="line265"></a>/**
<a name="line266"></a> * Sets the diagonal values of the matrix from the given values.
<a name="line267"></a> *
<a name="line268"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line269"></a> * @param {number} v00 The values for (0, 0).
<a name="line270"></a> * @param {number} v11 The values for (1, 1).
<a name="line271"></a> * @param {number} v22 The values for (2, 2).
<a name="line272"></a> * @param {number} v33 The values for (3, 3).
<a name="line273"></a> */
<a name="line274"></a>goog.vec.Mat4.setDiagonalValues = function(mat, v00, v11, v22, v33) {
<a name="line275"></a>  mat[0] = v00;
<a name="line276"></a>  mat[5] = v11;
<a name="line277"></a>  mat[10] = v22;
<a name="line278"></a>  mat[15] = v33;
<a name="line279"></a>};
<a name="line280"></a>
<a name="line281"></a>
<a name="line282"></a>/**
<a name="line283"></a> * Sets the diagonal values of the matrix from the given vector.
<a name="line284"></a> *
<a name="line285"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line286"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector containing the values.
<a name="line287"></a> */
<a name="line288"></a>goog.vec.Mat4.setDiagonal = function(mat, vec) {
<a name="line289"></a>  mat[0] = vec[0];
<a name="line290"></a>  mat[5] = vec[1];
<a name="line291"></a>  mat[10] = vec[2];
<a name="line292"></a>  mat[15] = vec[3];
<a name="line293"></a>};
<a name="line294"></a>
<a name="line295"></a>
<a name="line296"></a>/**
<a name="line297"></a> * Gets the diagonal values of the matrix into the given vector.
<a name="line298"></a> *
<a name="line299"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix containing the values.
<a name="line300"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector to receive the values.
<a name="line301"></a> * @param {number=} opt_diagonal Which diagonal to get. A value of 0 selects the
<a name="line302"></a> *     main diagonal, a positive number selects a super diagonal and a negative
<a name="line303"></a> *     number selects a sub diagonal.
<a name="line304"></a> */
<a name="line305"></a>goog.vec.Mat4.getDiagonal = function(mat, vec, opt_diagonal) {
<a name="line306"></a>  if (!opt_diagonal) {
<a name="line307"></a>    // This is the most common case, so we avoid the for loop.
<a name="line308"></a>    vec[0] = mat[0];
<a name="line309"></a>    vec[1] = mat[5];
<a name="line310"></a>    vec[2] = mat[10];
<a name="line311"></a>    vec[3] = mat[15];
<a name="line312"></a>  } else {
<a name="line313"></a>    var offset = opt_diagonal &gt; 0 ? 4 * opt_diagonal : -opt_diagonal;
<a name="line314"></a>    for (var i = 0; i &lt; 4 - Math.abs(opt_diagonal); i++) {
<a name="line315"></a>      vec[i] = mat[offset + 5 * i];
<a name="line316"></a>    }
<a name="line317"></a>  }
<a name="line318"></a>};
<a name="line319"></a>
<a name="line320"></a>
<a name="line321"></a>/**
<a name="line322"></a> * Sets the specified column with the supplied values.
<a name="line323"></a> *
<a name="line324"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to recieve the values.
<a name="line325"></a> * @param {number} column The column index to set the values on.
<a name="line326"></a> * @param {number} v0 The value for row 0.
<a name="line327"></a> * @param {number} v1 The value for row 1.
<a name="line328"></a> * @param {number} v2 The value for row 2.
<a name="line329"></a> * @param {number} v3 The value for row 3.
<a name="line330"></a> */
<a name="line331"></a>goog.vec.Mat4.setColumnValues = function(mat, column, v0, v1, v2, v3) {
<a name="line332"></a>  var i = column * 4;
<a name="line333"></a>  mat[i] = v0;
<a name="line334"></a>  mat[i + 1] = v1;
<a name="line335"></a>  mat[i + 2] = v2;
<a name="line336"></a>  mat[i + 3] = v3;
<a name="line337"></a>};
<a name="line338"></a>
<a name="line339"></a>
<a name="line340"></a>/**
<a name="line341"></a> * Sets the specified column with the value from the supplied vector.
<a name="line342"></a> *
<a name="line343"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line344"></a> * @param {number} column The column index to set the values on.
<a name="line345"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector of elements for the column.
<a name="line346"></a> */
<a name="line347"></a>goog.vec.Mat4.setColumn = function(mat, column, vec) {
<a name="line348"></a>  var i = column * 4;
<a name="line349"></a>  mat[i] = vec[0];
<a name="line350"></a>  mat[i + 1] = vec[1];
<a name="line351"></a>  mat[i + 2] = vec[2];
<a name="line352"></a>  mat[i + 3] = vec[3];
<a name="line353"></a>};
<a name="line354"></a>
<a name="line355"></a>
<a name="line356"></a>/**
<a name="line357"></a> * Retrieves the specified column from the matrix into the given vector.
<a name="line358"></a> *
<a name="line359"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the values.
<a name="line360"></a> * @param {number} column The column to get the values from.
<a name="line361"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector of elements to
<a name="line362"></a> *     receive the column.
<a name="line363"></a> */
<a name="line364"></a>goog.vec.Mat4.getColumn = function(mat, column, vec) {
<a name="line365"></a>  var i = column * 4;
<a name="line366"></a>  vec[0] = mat[i];
<a name="line367"></a>  vec[1] = mat[i + 1];
<a name="line368"></a>  vec[2] = mat[i + 2];
<a name="line369"></a>  vec[3] = mat[i + 3];
<a name="line370"></a>};
<a name="line371"></a>
<a name="line372"></a>
<a name="line373"></a>/**
<a name="line374"></a> * Sets the columns of the matrix from the given vectors.
<a name="line375"></a> *
<a name="line376"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line377"></a> * @param {goog.vec.Vec4.Vec4Like} vec0 The values for column 0.
<a name="line378"></a> * @param {goog.vec.Vec4.Vec4Like} vec1 The values for column 1.
<a name="line379"></a> * @param {goog.vec.Vec4.Vec4Like} vec2 The values for column 2.
<a name="line380"></a> * @param {goog.vec.Vec4.Vec4Like} vec3 The values for column 3.
<a name="line381"></a> */
<a name="line382"></a>goog.vec.Mat4.setColumns = function(mat, vec0, vec1, vec2, vec3) {
<a name="line383"></a>  goog.vec.Mat4.setColumn(mat, 0, vec0);
<a name="line384"></a>  goog.vec.Mat4.setColumn(mat, 1, vec1);
<a name="line385"></a>  goog.vec.Mat4.setColumn(mat, 2, vec2);
<a name="line386"></a>  goog.vec.Mat4.setColumn(mat, 3, vec3);
<a name="line387"></a>};
<a name="line388"></a>
<a name="line389"></a>
<a name="line390"></a>/**
<a name="line391"></a> * Retrieves the column values from the given matrix into the given vectors.
<a name="line392"></a> *
<a name="line393"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the columns.
<a name="line394"></a> * @param {goog.vec.Vec4.Vec4Like} vec0 The vector to receive column 0.
<a name="line395"></a> * @param {goog.vec.Vec4.Vec4Like} vec1 The vector to receive column 1.
<a name="line396"></a> * @param {goog.vec.Vec4.Vec4Like} vec2 The vector to receive column 2.
<a name="line397"></a> * @param {goog.vec.Vec4.Vec4Like} vec3 The vector to receive column 3.
<a name="line398"></a> */
<a name="line399"></a>goog.vec.Mat4.getColumns = function(mat, vec0, vec1, vec2, vec3) {
<a name="line400"></a>  goog.vec.Mat4.getColumn(mat, 0, vec0);
<a name="line401"></a>  goog.vec.Mat4.getColumn(mat, 1, vec1);
<a name="line402"></a>  goog.vec.Mat4.getColumn(mat, 2, vec2);
<a name="line403"></a>  goog.vec.Mat4.getColumn(mat, 3, vec3);
<a name="line404"></a>};
<a name="line405"></a>
<a name="line406"></a>
<a name="line407"></a>/**
<a name="line408"></a> * Sets the row values from the supplied values.
<a name="line409"></a> *
<a name="line410"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line411"></a> * @param {number} row The index of the row to receive the values.
<a name="line412"></a> * @param {number} v0 The value for column 0.
<a name="line413"></a> * @param {number} v1 The value for column 1.
<a name="line414"></a> * @param {number} v2 The value for column 2.
<a name="line415"></a> * @param {number} v3 The value for column 3.
<a name="line416"></a> */
<a name="line417"></a>goog.vec.Mat4.setRowValues = function(mat, row, v0, v1, v2, v3) {
<a name="line418"></a>  mat[row] = v0;
<a name="line419"></a>  mat[row + 4] = v1;
<a name="line420"></a>  mat[row + 8] = v2;
<a name="line421"></a>  mat[row + 12] = v3;
<a name="line422"></a>};
<a name="line423"></a>
<a name="line424"></a>
<a name="line425"></a>/**
<a name="line426"></a> * Sets the row values from the supplied vector.
<a name="line427"></a> *
<a name="line428"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the row values.
<a name="line429"></a> * @param {number} row The index of the row.
<a name="line430"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector containing the values.
<a name="line431"></a> */
<a name="line432"></a>goog.vec.Mat4.setRow = function(mat, row, vec) {
<a name="line433"></a>  mat[row] = vec[0];
<a name="line434"></a>  mat[row + 4] = vec[1];
<a name="line435"></a>  mat[row + 8] = vec[2];
<a name="line436"></a>  mat[row + 12] = vec[3];
<a name="line437"></a>};
<a name="line438"></a>
<a name="line439"></a>
<a name="line440"></a>/**
<a name="line441"></a> * Retrieves the row values into the given vector.
<a name="line442"></a> *
<a name="line443"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the values.
<a name="line444"></a> * @param {number} row The index of the row supplying the values.
<a name="line445"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector to receive the row.
<a name="line446"></a> */
<a name="line447"></a>goog.vec.Mat4.getRow = function(mat, row, vec) {
<a name="line448"></a>  vec[0] = mat[row];
<a name="line449"></a>  vec[1] = mat[row + 4];
<a name="line450"></a>  vec[2] = mat[row + 8];
<a name="line451"></a>  vec[3] = mat[row + 12];
<a name="line452"></a>};
<a name="line453"></a>
<a name="line454"></a>
<a name="line455"></a>/**
<a name="line456"></a> * Sets the rows of the matrix from the supplied vectors.
<a name="line457"></a> *
<a name="line458"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to receive the values.
<a name="line459"></a> * @param {goog.vec.Vec4.Vec4Like} vec0 The values for row 0.
<a name="line460"></a> * @param {goog.vec.Vec4.Vec4Like} vec1 The values for row 1.
<a name="line461"></a> * @param {goog.vec.Vec4.Vec4Like} vec2 The values for row 2.
<a name="line462"></a> * @param {goog.vec.Vec4.Vec4Like} vec3 The values for row 3.
<a name="line463"></a> */
<a name="line464"></a>goog.vec.Mat4.setRows = function(mat, vec0, vec1, vec2, vec3) {
<a name="line465"></a>  goog.vec.Mat4.setRow(mat, 0, vec0);
<a name="line466"></a>  goog.vec.Mat4.setRow(mat, 1, vec1);
<a name="line467"></a>  goog.vec.Mat4.setRow(mat, 2, vec2);
<a name="line468"></a>  goog.vec.Mat4.setRow(mat, 3, vec3);
<a name="line469"></a>};
<a name="line470"></a>
<a name="line471"></a>
<a name="line472"></a>/**
<a name="line473"></a> * Retrieves the rows of the matrix into the supplied vectors.
<a name="line474"></a> *
<a name="line475"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to supply the values.
<a name="line476"></a> * @param {goog.vec.Vec4.Vec4Like} vec0 The vector to receive row 0.
<a name="line477"></a> * @param {goog.vec.Vec4.Vec4Like} vec1 The vector to receive row 1.
<a name="line478"></a> * @param {goog.vec.Vec4.Vec4Like} vec2 The vector to receive row 2.
<a name="line479"></a> * @param {goog.vec.Vec4.Vec4Like} vec3 The vector to receive row 3.
<a name="line480"></a> */
<a name="line481"></a>goog.vec.Mat4.getRows = function(mat, vec0, vec1, vec2, vec3) {
<a name="line482"></a>  goog.vec.Mat4.getRow(mat, 0, vec0);
<a name="line483"></a>  goog.vec.Mat4.getRow(mat, 1, vec1);
<a name="line484"></a>  goog.vec.Mat4.getRow(mat, 2, vec2);
<a name="line485"></a>  goog.vec.Mat4.getRow(mat, 3, vec3);
<a name="line486"></a>};
<a name="line487"></a>
<a name="line488"></a>
<a name="line489"></a>/**
<a name="line490"></a> * Makes the given 4x4 matrix the zero matrix.
<a name="line491"></a> *
<a name="line492"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line493"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so operations can be chained.
<a name="line494"></a> */
<a name="line495"></a>goog.vec.Mat4.makeZero = function(mat) {
<a name="line496"></a>  mat[0] = 0;
<a name="line497"></a>  mat[1] = 0;
<a name="line498"></a>  mat[2] = 0;
<a name="line499"></a>  mat[3] = 0;
<a name="line500"></a>  mat[4] = 0;
<a name="line501"></a>  mat[5] = 0;
<a name="line502"></a>  mat[6] = 0;
<a name="line503"></a>  mat[7] = 0;
<a name="line504"></a>  mat[8] = 0;
<a name="line505"></a>  mat[9] = 0;
<a name="line506"></a>  mat[10] = 0;
<a name="line507"></a>  mat[11] = 0;
<a name="line508"></a>  mat[12] = 0;
<a name="line509"></a>  mat[13] = 0;
<a name="line510"></a>  mat[14] = 0;
<a name="line511"></a>  mat[15] = 0;
<a name="line512"></a>  return mat;
<a name="line513"></a>};
<a name="line514"></a>
<a name="line515"></a>
<a name="line516"></a>/**
<a name="line517"></a> * Makes the given 4x4 matrix the identity matrix.
<a name="line518"></a> *
<a name="line519"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line520"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so operations can be chained.
<a name="line521"></a> */
<a name="line522"></a>goog.vec.Mat4.makeIdentity = function(mat) {
<a name="line523"></a>  mat[0] = 1;
<a name="line524"></a>  mat[1] = 0;
<a name="line525"></a>  mat[2] = 0;
<a name="line526"></a>  mat[3] = 0;
<a name="line527"></a>  mat[4] = 0;
<a name="line528"></a>  mat[5] = 1;
<a name="line529"></a>  mat[6] = 0;
<a name="line530"></a>  mat[7] = 0;
<a name="line531"></a>  mat[8] = 0;
<a name="line532"></a>  mat[9] = 0;
<a name="line533"></a>  mat[10] = 1;
<a name="line534"></a>  mat[11] = 0;
<a name="line535"></a>  mat[12] = 0;
<a name="line536"></a>  mat[13] = 0;
<a name="line537"></a>  mat[14] = 0;
<a name="line538"></a>  mat[15] = 1;
<a name="line539"></a>  return mat;
<a name="line540"></a>};
<a name="line541"></a>
<a name="line542"></a>
<a name="line543"></a>/**
<a name="line544"></a> * Performs a per-component addition of the matrix mat0 and mat1, storing
<a name="line545"></a> * the result into resultMat.
<a name="line546"></a> *
<a name="line547"></a> * @param {goog.vec.Mat4.Mat4Like} mat0 The first addend.
<a name="line548"></a> * @param {goog.vec.Mat4.Mat4Like} mat1 The second addend.
<a name="line549"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to
<a name="line550"></a> *     receive the results (may be either mat0 or mat1).
<a name="line551"></a> * @return {!goog.vec.Mat4.Mat4Like} return resultMat so that operations can be
<a name="line552"></a> *     chained together.
<a name="line553"></a> */
<a name="line554"></a>goog.vec.Mat4.addMat = function(mat0, mat1, resultMat) {
<a name="line555"></a>  resultMat[0] = mat0[0] + mat1[0];
<a name="line556"></a>  resultMat[1] = mat0[1] + mat1[1];
<a name="line557"></a>  resultMat[2] = mat0[2] + mat1[2];
<a name="line558"></a>  resultMat[3] = mat0[3] + mat1[3];
<a name="line559"></a>  resultMat[4] = mat0[4] + mat1[4];
<a name="line560"></a>  resultMat[5] = mat0[5] + mat1[5];
<a name="line561"></a>  resultMat[6] = mat0[6] + mat1[6];
<a name="line562"></a>  resultMat[7] = mat0[7] + mat1[7];
<a name="line563"></a>  resultMat[8] = mat0[8] + mat1[8];
<a name="line564"></a>  resultMat[9] = mat0[9] + mat1[9];
<a name="line565"></a>  resultMat[10] = mat0[10] + mat1[10];
<a name="line566"></a>  resultMat[11] = mat0[11] + mat1[11];
<a name="line567"></a>  resultMat[12] = mat0[12] + mat1[12];
<a name="line568"></a>  resultMat[13] = mat0[13] + mat1[13];
<a name="line569"></a>  resultMat[14] = mat0[14] + mat1[14];
<a name="line570"></a>  resultMat[15] = mat0[15] + mat1[15];
<a name="line571"></a>  return resultMat;
<a name="line572"></a>};
<a name="line573"></a>
<a name="line574"></a>
<a name="line575"></a>/**
<a name="line576"></a> * Performs a per-component subtraction of the matrix mat0 and mat1,
<a name="line577"></a> * storing the result into resultMat.
<a name="line578"></a> *
<a name="line579"></a> * @param {goog.vec.Mat4.Mat4Like} mat0 The minuend.
<a name="line580"></a> * @param {goog.vec.Mat4.Mat4Like} mat1 The subtrahend.
<a name="line581"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to receive
<a name="line582"></a> *     the results (may be either mat0 or mat1).
<a name="line583"></a> * @return {!goog.vec.Mat4.Mat4Like} return resultMat so that operations can be
<a name="line584"></a> *     chained together.
<a name="line585"></a> */
<a name="line586"></a>goog.vec.Mat4.subMat = function(mat0, mat1, resultMat) {
<a name="line587"></a>  resultMat[0] = mat0[0] - mat1[0];
<a name="line588"></a>  resultMat[1] = mat0[1] - mat1[1];
<a name="line589"></a>  resultMat[2] = mat0[2] - mat1[2];
<a name="line590"></a>  resultMat[3] = mat0[3] - mat1[3];
<a name="line591"></a>  resultMat[4] = mat0[4] - mat1[4];
<a name="line592"></a>  resultMat[5] = mat0[5] - mat1[5];
<a name="line593"></a>  resultMat[6] = mat0[6] - mat1[6];
<a name="line594"></a>  resultMat[7] = mat0[7] - mat1[7];
<a name="line595"></a>  resultMat[8] = mat0[8] - mat1[8];
<a name="line596"></a>  resultMat[9] = mat0[9] - mat1[9];
<a name="line597"></a>  resultMat[10] = mat0[10] - mat1[10];
<a name="line598"></a>  resultMat[11] = mat0[11] - mat1[11];
<a name="line599"></a>  resultMat[12] = mat0[12] - mat1[12];
<a name="line600"></a>  resultMat[13] = mat0[13] - mat1[13];
<a name="line601"></a>  resultMat[14] = mat0[14] - mat1[14];
<a name="line602"></a>  resultMat[15] = mat0[15] - mat1[15];
<a name="line603"></a>  return resultMat;
<a name="line604"></a>};
<a name="line605"></a>
<a name="line606"></a>
<a name="line607"></a>/**
<a name="line608"></a> * Multiplies matrix mat with the given scalar, storing the result
<a name="line609"></a> * into resultMat.
<a name="line610"></a> *
<a name="line611"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line612"></a> * @param {number} scalar The scalar value to multiply to each element of mat.
<a name="line613"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to receive
<a name="line614"></a> *     the results (may be mat).
<a name="line615"></a> * @return {!goog.vec.Mat4.Mat4Like} return resultMat so that operations can be
<a name="line616"></a> *     chained together.
<a name="line617"></a> */
<a name="line618"></a>goog.vec.Mat4.multScalar = function(mat, scalar, resultMat) {
<a name="line619"></a>  resultMat[0] = mat[0] * scalar;
<a name="line620"></a>  resultMat[1] = mat[1] * scalar;
<a name="line621"></a>  resultMat[2] = mat[2] * scalar;
<a name="line622"></a>  resultMat[3] = mat[3] * scalar;
<a name="line623"></a>  resultMat[4] = mat[4] * scalar;
<a name="line624"></a>  resultMat[5] = mat[5] * scalar;
<a name="line625"></a>  resultMat[6] = mat[6] * scalar;
<a name="line626"></a>  resultMat[7] = mat[7] * scalar;
<a name="line627"></a>  resultMat[8] = mat[8] * scalar;
<a name="line628"></a>  resultMat[9] = mat[9] * scalar;
<a name="line629"></a>  resultMat[10] = mat[10] * scalar;
<a name="line630"></a>  resultMat[11] = mat[11] * scalar;
<a name="line631"></a>  resultMat[12] = mat[12] * scalar;
<a name="line632"></a>  resultMat[13] = mat[13] * scalar;
<a name="line633"></a>  resultMat[14] = mat[14] * scalar;
<a name="line634"></a>  resultMat[15] = mat[15] * scalar;
<a name="line635"></a>  return resultMat;
<a name="line636"></a>};
<a name="line637"></a>
<a name="line638"></a>
<a name="line639"></a>/**
<a name="line640"></a> * Multiplies the two matrices mat0 and mat1 using matrix multiplication,
<a name="line641"></a> * storing the result into resultMat.
<a name="line642"></a> *
<a name="line643"></a> * @param {goog.vec.Mat4.Mat4Like} mat0 The first (left hand) matrix.
<a name="line644"></a> * @param {goog.vec.Mat4.Mat4Like} mat1 The second (right hand) matrix.
<a name="line645"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to receive
<a name="line646"></a> *     the results (may be either mat0 or mat1).
<a name="line647"></a> * @return {!goog.vec.Mat4.Mat4Like} return resultMat so that operations can be
<a name="line648"></a> *     chained together.
<a name="line649"></a> */
<a name="line650"></a>goog.vec.Mat4.multMat = function(mat0, mat1, resultMat) {
<a name="line651"></a>  var a00 = mat0[0], a10 = mat0[1], a20 = mat0[2], a30 = mat0[3];
<a name="line652"></a>  var a01 = mat0[4], a11 = mat0[5], a21 = mat0[6], a31 = mat0[7];
<a name="line653"></a>  var a02 = mat0[8], a12 = mat0[9], a22 = mat0[10], a32 = mat0[11];
<a name="line654"></a>  var a03 = mat0[12], a13 = mat0[13], a23 = mat0[14], a33 = mat0[15];
<a name="line655"></a>
<a name="line656"></a>  var b00 = mat1[0], b10 = mat1[1], b20 = mat1[2], b30 = mat1[3];
<a name="line657"></a>  var b01 = mat1[4], b11 = mat1[5], b21 = mat1[6], b31 = mat1[7];
<a name="line658"></a>  var b02 = mat1[8], b12 = mat1[9], b22 = mat1[10], b32 = mat1[11];
<a name="line659"></a>  var b03 = mat1[12], b13 = mat1[13], b23 = mat1[14], b33 = mat1[15];
<a name="line660"></a>
<a name="line661"></a>  resultMat[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
<a name="line662"></a>  resultMat[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
<a name="line663"></a>  resultMat[2] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
<a name="line664"></a>  resultMat[3] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
<a name="line665"></a>
<a name="line666"></a>  resultMat[4] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
<a name="line667"></a>  resultMat[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
<a name="line668"></a>  resultMat[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
<a name="line669"></a>  resultMat[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
<a name="line670"></a>
<a name="line671"></a>  resultMat[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
<a name="line672"></a>  resultMat[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
<a name="line673"></a>  resultMat[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
<a name="line674"></a>  resultMat[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
<a name="line675"></a>
<a name="line676"></a>  resultMat[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
<a name="line677"></a>  resultMat[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
<a name="line678"></a>  resultMat[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
<a name="line679"></a>  resultMat[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
<a name="line680"></a>  return resultMat;
<a name="line681"></a>};
<a name="line682"></a>
<a name="line683"></a>
<a name="line684"></a>/**
<a name="line685"></a> * Transposes the given matrix mat storing the result into resultMat.
<a name="line686"></a> *
<a name="line687"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to transpose.
<a name="line688"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to receive
<a name="line689"></a> *     the results (may be mat).
<a name="line690"></a> * @return {!goog.vec.Mat4.Mat4Like} return resultMat so that operations can be
<a name="line691"></a> *     chained together.
<a name="line692"></a> */
<a name="line693"></a>goog.vec.Mat4.transpose = function(mat, resultMat) {
<a name="line694"></a>  if (resultMat == mat) {
<a name="line695"></a>    var a10 = mat[1], a20 = mat[2], a30 = mat[3];
<a name="line696"></a>    var a21 = mat[6], a31 = mat[7];
<a name="line697"></a>    var a32 = mat[11];
<a name="line698"></a>    resultMat[1] = mat[4];
<a name="line699"></a>    resultMat[2] = mat[8];
<a name="line700"></a>    resultMat[3] = mat[12];
<a name="line701"></a>    resultMat[4] = a10;
<a name="line702"></a>    resultMat[6] = mat[9];
<a name="line703"></a>    resultMat[7] = mat[13];
<a name="line704"></a>    resultMat[8] = a20;
<a name="line705"></a>    resultMat[9] = a21;
<a name="line706"></a>    resultMat[11] = mat[14];
<a name="line707"></a>    resultMat[12] = a30;
<a name="line708"></a>    resultMat[13] = a31;
<a name="line709"></a>    resultMat[14] = a32;
<a name="line710"></a>  } else {
<a name="line711"></a>    resultMat[0] = mat[0];
<a name="line712"></a>    resultMat[1] = mat[4];
<a name="line713"></a>    resultMat[2] = mat[8];
<a name="line714"></a>    resultMat[3] = mat[12];
<a name="line715"></a>
<a name="line716"></a>    resultMat[4] = mat[1];
<a name="line717"></a>    resultMat[5] = mat[5];
<a name="line718"></a>    resultMat[6] = mat[9];
<a name="line719"></a>    resultMat[7] = mat[13];
<a name="line720"></a>
<a name="line721"></a>    resultMat[8] = mat[2];
<a name="line722"></a>    resultMat[9] = mat[6];
<a name="line723"></a>    resultMat[10] = mat[10];
<a name="line724"></a>    resultMat[11] = mat[14];
<a name="line725"></a>
<a name="line726"></a>    resultMat[12] = mat[3];
<a name="line727"></a>    resultMat[13] = mat[7];
<a name="line728"></a>    resultMat[14] = mat[11];
<a name="line729"></a>    resultMat[15] = mat[15];
<a name="line730"></a>  }
<a name="line731"></a>  return resultMat;
<a name="line732"></a>};
<a name="line733"></a>
<a name="line734"></a>
<a name="line735"></a>/**
<a name="line736"></a> * Computes the determinant of the matrix.
<a name="line737"></a> *
<a name="line738"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to compute the matrix for.
<a name="line739"></a> * @return {number} The determinant of the matrix.
<a name="line740"></a> */
<a name="line741"></a>goog.vec.Mat4.determinant = function(mat) {
<a name="line742"></a>  var m00 = mat[0], m10 = mat[1], m20 = mat[2], m30 = mat[3];
<a name="line743"></a>  var m01 = mat[4], m11 = mat[5], m21 = mat[6], m31 = mat[7];
<a name="line744"></a>  var m02 = mat[8], m12 = mat[9], m22 = mat[10], m32 = mat[11];
<a name="line745"></a>  var m03 = mat[12], m13 = mat[13], m23 = mat[14], m33 = mat[15];
<a name="line746"></a>
<a name="line747"></a>  var a0 = m00 * m11 - m10 * m01;
<a name="line748"></a>  var a1 = m00 * m21 - m20 * m01;
<a name="line749"></a>  var a2 = m00 * m31 - m30 * m01;
<a name="line750"></a>  var a3 = m10 * m21 - m20 * m11;
<a name="line751"></a>  var a4 = m10 * m31 - m30 * m11;
<a name="line752"></a>  var a5 = m20 * m31 - m30 * m21;
<a name="line753"></a>  var b0 = m02 * m13 - m12 * m03;
<a name="line754"></a>  var b1 = m02 * m23 - m22 * m03;
<a name="line755"></a>  var b2 = m02 * m33 - m32 * m03;
<a name="line756"></a>  var b3 = m12 * m23 - m22 * m13;
<a name="line757"></a>  var b4 = m12 * m33 - m32 * m13;
<a name="line758"></a>  var b5 = m22 * m33 - m32 * m23;
<a name="line759"></a>
<a name="line760"></a>  return a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;
<a name="line761"></a>};
<a name="line762"></a>
<a name="line763"></a>
<a name="line764"></a>/**
<a name="line765"></a> * Computes the inverse of mat storing the result into resultMat. If the
<a name="line766"></a> * inverse is defined, this function returns true, false otherwise.
<a name="line767"></a> *
<a name="line768"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix to invert.
<a name="line769"></a> * @param {goog.vec.Mat4.Mat4Like} resultMat The matrix to receive
<a name="line770"></a> *     the result (may be mat).
<a name="line771"></a> * @return {boolean} True if the inverse is defined. If false is returned,
<a name="line772"></a> *     resultMat is not modified.
<a name="line773"></a> */
<a name="line774"></a>goog.vec.Mat4.invert = function(mat, resultMat) {
<a name="line775"></a>  var m00 = mat[0], m10 = mat[1], m20 = mat[2], m30 = mat[3];
<a name="line776"></a>  var m01 = mat[4], m11 = mat[5], m21 = mat[6], m31 = mat[7];
<a name="line777"></a>  var m02 = mat[8], m12 = mat[9], m22 = mat[10], m32 = mat[11];
<a name="line778"></a>  var m03 = mat[12], m13 = mat[13], m23 = mat[14], m33 = mat[15];
<a name="line779"></a>
<a name="line780"></a>  var a0 = m00 * m11 - m10 * m01;
<a name="line781"></a>  var a1 = m00 * m21 - m20 * m01;
<a name="line782"></a>  var a2 = m00 * m31 - m30 * m01;
<a name="line783"></a>  var a3 = m10 * m21 - m20 * m11;
<a name="line784"></a>  var a4 = m10 * m31 - m30 * m11;
<a name="line785"></a>  var a5 = m20 * m31 - m30 * m21;
<a name="line786"></a>  var b0 = m02 * m13 - m12 * m03;
<a name="line787"></a>  var b1 = m02 * m23 - m22 * m03;
<a name="line788"></a>  var b2 = m02 * m33 - m32 * m03;
<a name="line789"></a>  var b3 = m12 * m23 - m22 * m13;
<a name="line790"></a>  var b4 = m12 * m33 - m32 * m13;
<a name="line791"></a>  var b5 = m22 * m33 - m32 * m23;
<a name="line792"></a>
<a name="line793"></a>  var det = a0 * b5 - a1 * b4 + a2 * b3 + a3 * b2 - a4 * b1 + a5 * b0;
<a name="line794"></a>  if (det == 0) {
<a name="line795"></a>    return false;
<a name="line796"></a>  }
<a name="line797"></a>
<a name="line798"></a>  var idet = 1.0 / det;
<a name="line799"></a>  resultMat[0] = (m11 * b5 - m21 * b4 + m31 * b3) * idet;
<a name="line800"></a>  resultMat[1] = (-m10 * b5 + m20 * b4 - m30 * b3) * idet;
<a name="line801"></a>  resultMat[2] = (m13 * a5 - m23 * a4 + m33 * a3) * idet;
<a name="line802"></a>  resultMat[3] = (-m12 * a5 + m22 * a4 - m32 * a3) * idet;
<a name="line803"></a>  resultMat[4] = (-m01 * b5 + m21 * b2 - m31 * b1) * idet;
<a name="line804"></a>  resultMat[5] = (m00 * b5 - m20 * b2 + m30 * b1) * idet;
<a name="line805"></a>  resultMat[6] = (-m03 * a5 + m23 * a2 - m33 * a1) * idet;
<a name="line806"></a>  resultMat[7] = (m02 * a5 - m22 * a2 + m32 * a1) * idet;
<a name="line807"></a>  resultMat[8] = (m01 * b4 - m11 * b2 + m31 * b0) * idet;
<a name="line808"></a>  resultMat[9] = (-m00 * b4 + m10 * b2 - m30 * b0) * idet;
<a name="line809"></a>  resultMat[10] = (m03 * a4 - m13 * a2 + m33 * a0) * idet;
<a name="line810"></a>  resultMat[11] = (-m02 * a4 + m12 * a2 - m32 * a0) * idet;
<a name="line811"></a>  resultMat[12] = (-m01 * b3 + m11 * b1 - m21 * b0) * idet;
<a name="line812"></a>  resultMat[13] = (m00 * b3 - m10 * b1 + m20 * b0) * idet;
<a name="line813"></a>  resultMat[14] = (-m03 * a3 + m13 * a1 - m23 * a0) * idet;
<a name="line814"></a>  resultMat[15] = (m02 * a3 - m12 * a1 + m22 * a0) * idet;
<a name="line815"></a>  return true;
<a name="line816"></a>};
<a name="line817"></a>
<a name="line818"></a>
<a name="line819"></a>/**
<a name="line820"></a> * Returns true if the components of mat0 are equal to the components of mat1.
<a name="line821"></a> *
<a name="line822"></a> * @param {goog.vec.Mat4.Mat4Like} mat0 The first matrix.
<a name="line823"></a> * @param {goog.vec.Mat4.Mat4Like} mat1 The second matrix.
<a name="line824"></a> * @return {boolean} True if the the two matrices are equivalent.
<a name="line825"></a> */
<a name="line826"></a>goog.vec.Mat4.equals = function(mat0, mat1) {
<a name="line827"></a>  return mat0.length == mat1.length &amp;&amp;
<a name="line828"></a>      mat0[0] == mat1[0] &amp;&amp;
<a name="line829"></a>      mat0[1] == mat1[1] &amp;&amp;
<a name="line830"></a>      mat0[2] == mat1[2] &amp;&amp;
<a name="line831"></a>      mat0[3] == mat1[3] &amp;&amp;
<a name="line832"></a>      mat0[4] == mat1[4] &amp;&amp;
<a name="line833"></a>      mat0[5] == mat1[5] &amp;&amp;
<a name="line834"></a>      mat0[6] == mat1[6] &amp;&amp;
<a name="line835"></a>      mat0[7] == mat1[7] &amp;&amp;
<a name="line836"></a>      mat0[8] == mat1[8] &amp;&amp;
<a name="line837"></a>      mat0[9] == mat1[9] &amp;&amp;
<a name="line838"></a>      mat0[10] == mat1[10] &amp;&amp;
<a name="line839"></a>      mat0[11] == mat1[11] &amp;&amp;
<a name="line840"></a>      mat0[12] == mat1[12] &amp;&amp;
<a name="line841"></a>      mat0[13] == mat1[13] &amp;&amp;
<a name="line842"></a>      mat0[14] == mat1[14] &amp;&amp;
<a name="line843"></a>      mat0[15] == mat1[15];
<a name="line844"></a>};
<a name="line845"></a>
<a name="line846"></a>
<a name="line847"></a>/**
<a name="line848"></a> * Transforms the given vector with the given matrix storing the resulting,
<a name="line849"></a> * transformed vector into resultVec. The input vector is multiplied against the
<a name="line850"></a> * upper 3x4 matrix omitting the projective component.
<a name="line851"></a> *
<a name="line852"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the transformation.
<a name="line853"></a> * @param {goog.vec.Vec3.Vec3Like} vec The 3 element vector to transform.
<a name="line854"></a> * @param {goog.vec.Vec3.Vec3Like} resultVec The 3 element vector to
<a name="line855"></a> *     receive the results (may be vec).
<a name="line856"></a> * @return {!goog.vec.Vec3.Vec3Like} return resultVec so that operations can be
<a name="line857"></a> *     chained together.
<a name="line858"></a> */
<a name="line859"></a>goog.vec.Mat4.multVec3 = function(mat, vec, resultVec) {
<a name="line860"></a>  var x = vec[0], y = vec[1], z = vec[2];
<a name="line861"></a>  resultVec[0] = x * mat[0] + y * mat[4] + z * mat[8] + mat[12];
<a name="line862"></a>  resultVec[1] = x * mat[1] + y * mat[5] + z * mat[9] + mat[13];
<a name="line863"></a>  resultVec[2] = x * mat[2] + y * mat[6] + z * mat[10] + mat[14];
<a name="line864"></a>  return resultVec;
<a name="line865"></a>};
<a name="line866"></a>
<a name="line867"></a>
<a name="line868"></a>/**
<a name="line869"></a> * Transforms the given vector with the given matrix storing the resulting,
<a name="line870"></a> * transformed vector into resultVec. The input vector is multiplied against the
<a name="line871"></a> * upper 3x3 matrix omitting the projective component and translation
<a name="line872"></a> * components.
<a name="line873"></a> *
<a name="line874"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the transformation.
<a name="line875"></a> * @param {goog.vec.Vec3.Vec3Like} vec The 3 element vector to transform.
<a name="line876"></a> * @param {goog.vec.Vec3.Vec3Like} resultVec The 3 element vector to
<a name="line877"></a> *     receive the results (may be vec).
<a name="line878"></a> * @return {!goog.vec.Vec3.Vec3Like} return resultVec so that operations can be
<a name="line879"></a> *     chained together.
<a name="line880"></a> */
<a name="line881"></a>goog.vec.Mat4.multVec3NoTranslate = function(mat, vec, resultVec) {
<a name="line882"></a>  var x = vec[0], y = vec[1], z = vec[2];
<a name="line883"></a>  resultVec[0] = x * mat[0] + y * mat[4] + z * mat[8];
<a name="line884"></a>  resultVec[1] = x * mat[1] + y * mat[5] + z * mat[9];
<a name="line885"></a>  resultVec[2] = x * mat[2] + y * mat[6] + z * mat[10];
<a name="line886"></a>  return resultVec;
<a name="line887"></a>};
<a name="line888"></a>
<a name="line889"></a>
<a name="line890"></a>/**
<a name="line891"></a> * Transforms the given vector with the given matrix storing the resulting,
<a name="line892"></a> * transformed vector into resultVec. The input vector is multiplied against the
<a name="line893"></a> * full 4x4 matrix with the homogeneous divide applied to reduce the 4 element
<a name="line894"></a> * vector to a 3 element vector.
<a name="line895"></a> *
<a name="line896"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the transformation.
<a name="line897"></a> * @param {goog.vec.Vec3.Vec3Like} vec The 3 element vector to transform.
<a name="line898"></a> * @param {goog.vec.Vec3.Vec3Like} resultVec The 3 element vector
<a name="line899"></a> *     to receive the results (may be vec).
<a name="line900"></a> * @return {!goog.vec.Vec3.Vec3Like} return resultVec so that operations can be
<a name="line901"></a> *     chained together.
<a name="line902"></a> */
<a name="line903"></a>goog.vec.Mat4.multVec3Projective = function(mat, vec, resultVec) {
<a name="line904"></a>  var x = vec[0], y = vec[1], z = vec[2];
<a name="line905"></a>  var invw = 1 / (x * mat[3] + y * mat[7] + z * mat[11] + mat[15]);
<a name="line906"></a>  resultVec[0] = (x * mat[0] + y * mat[4] + z * mat[8] + mat[12]) * invw;
<a name="line907"></a>  resultVec[1] = (x * mat[1] + y * mat[5] + z * mat[9] + mat[13]) * invw;
<a name="line908"></a>  resultVec[2] = (x * mat[2] + y * mat[6] + z * mat[10] + mat[14]) * invw;
<a name="line909"></a>  return resultVec;
<a name="line910"></a>};
<a name="line911"></a>
<a name="line912"></a>
<a name="line913"></a>/**
<a name="line914"></a> * Transforms the given vector with the given matrix storing the resulting,
<a name="line915"></a> * transformed vector into resultVec.
<a name="line916"></a> *
<a name="line917"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix supplying the transformation.
<a name="line918"></a> * @param {goog.vec.Vec4.Vec4Like} vec The vector to transform.
<a name="line919"></a> * @param {goog.vec.Vec4.Vec4Like} resultVec The vector to
<a name="line920"></a> *     receive the results (may be vec).
<a name="line921"></a> * @return {!goog.vec.Vec4.Vec4Like} return resultVec so that operations can be
<a name="line922"></a> *     chained together.
<a name="line923"></a> */
<a name="line924"></a>goog.vec.Mat4.multVec4 = function(mat, vec, resultVec) {
<a name="line925"></a>  var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
<a name="line926"></a>  resultVec[0] = x * mat[0] + y * mat[4] + z * mat[8] + w * mat[12];
<a name="line927"></a>  resultVec[1] = x * mat[1] + y * mat[5] + z * mat[9] + w * mat[13];
<a name="line928"></a>  resultVec[2] = x * mat[2] + y * mat[6] + z * mat[10] + w * mat[14];
<a name="line929"></a>  resultVec[3] = x * mat[3] + y * mat[7] + z * mat[11] + w * mat[15];
<a name="line930"></a>  return resultVec;
<a name="line931"></a>};
<a name="line932"></a>
<a name="line933"></a>
<a name="line934"></a>/**
<a name="line935"></a> * Makes the given 4x4 matrix a translation matrix with x, y and z
<a name="line936"></a> * translation factors.
<a name="line937"></a> *
<a name="line938"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line939"></a> * @param {number} x The translation along the x axis.
<a name="line940"></a> * @param {number} y The translation along the y axis.
<a name="line941"></a> * @param {number} z The translation along the z axis.
<a name="line942"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line943"></a> *     chained.
<a name="line944"></a> */
<a name="line945"></a>goog.vec.Mat4.makeTranslate = function(mat, x, y, z) {
<a name="line946"></a>  goog.vec.Mat4.makeIdentity(mat);
<a name="line947"></a>  goog.vec.Mat4.setColumnValues(mat, 3, x, y, z, 1);
<a name="line948"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line949"></a>};
<a name="line950"></a>
<a name="line951"></a>
<a name="line952"></a>/**
<a name="line953"></a> * Makes the given 4x4 matrix as a scale matrix with x, y and z scale factors.
<a name="line954"></a> *
<a name="line955"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line956"></a> * @param {number} x The scale along the x axis.
<a name="line957"></a> * @param {number} y The scale along the y axis.
<a name="line958"></a> * @param {number} z The scale along the z axis.
<a name="line959"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line960"></a> *     chained.
<a name="line961"></a> */
<a name="line962"></a>goog.vec.Mat4.makeScale = function(mat, x, y, z) {
<a name="line963"></a>  goog.vec.Mat4.makeIdentity(mat);
<a name="line964"></a>  goog.vec.Mat4.setDiagonalValues(mat, x, y, z, 1);
<a name="line965"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line966"></a>};
<a name="line967"></a>
<a name="line968"></a>
<a name="line969"></a>/**
<a name="line970"></a> * Makes the given 4x4 matrix a rotation matrix with the given rotation
<a name="line971"></a> * angle about the axis defined by the vector (ax, ay, az).
<a name="line972"></a> *
<a name="line973"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line974"></a> * @param {number} angle The rotation angle in radians.
<a name="line975"></a> * @param {number} ax The x component of the rotation axis.
<a name="line976"></a> * @param {number} ay The y component of the rotation axis.
<a name="line977"></a> * @param {number} az The z component of the rotation axis.
<a name="line978"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line979"></a> *     chained.
<a name="line980"></a> */
<a name="line981"></a>goog.vec.Mat4.makeRotate = function(mat, angle, ax, ay, az) {
<a name="line982"></a>  var c = Math.cos(angle);
<a name="line983"></a>  var d = 1 - c;
<a name="line984"></a>  var s = Math.sin(angle);
<a name="line985"></a>
<a name="line986"></a>  goog.vec.Mat4.setFromValues(mat,
<a name="line987"></a>      ax * ax * d + c,
<a name="line988"></a>      ax * ay * d + az * s,
<a name="line989"></a>      ax * az * d - ay * s,
<a name="line990"></a>      0,
<a name="line991"></a>
<a name="line992"></a>      ax * ay * d - az * s,
<a name="line993"></a>      ay * ay * d + c,
<a name="line994"></a>      ay * az * d + ax * s,
<a name="line995"></a>      0,
<a name="line996"></a>
<a name="line997"></a>      ax * az * d + ay * s,
<a name="line998"></a>      ay * az * d - ax * s,
<a name="line999"></a>      az * az * d + c,
<a name="line1000"></a>      0,
<a name="line1001"></a>
<a name="line1002"></a>      0, 0, 0, 1);
<a name="line1003"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1004"></a>};
<a name="line1005"></a>
<a name="line1006"></a>
<a name="line1007"></a>/**
<a name="line1008"></a> * Makes the given 4x4 matrix a perspective projection matrix.
<a name="line1009"></a> *
<a name="line1010"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1011"></a> * @param {number} left The coordinate of the left clipping plane.
<a name="line1012"></a> * @param {number} right The coordinate of the right clipping plane.
<a name="line1013"></a> * @param {number} bottom The coordinate of the bottom clipping plane.
<a name="line1014"></a> * @param {number} top The coordinate of the top clipping plane.
<a name="line1015"></a> * @param {number} near The distance to the near clipping plane.
<a name="line1016"></a> * @param {number} far The distance to the far clipping plane.
<a name="line1017"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1018"></a> *     chained.
<a name="line1019"></a> */
<a name="line1020"></a>goog.vec.Mat4.makeFrustum = function(mat, left, right, bottom, top, near, far) {
<a name="line1021"></a>  var x = (2 * near) / (right - left);
<a name="line1022"></a>  var y = (2 * near) / (top - bottom);
<a name="line1023"></a>  var a = (right + left) / (right - left);
<a name="line1024"></a>  var b = (top + bottom) / (top - bottom);
<a name="line1025"></a>  var c = -(far + near) / (far - near);
<a name="line1026"></a>  var d = -(2 * far * near) / (far - near);
<a name="line1027"></a>
<a name="line1028"></a>  goog.vec.Mat4.setFromValues(mat,
<a name="line1029"></a>      x, 0, 0, 0,
<a name="line1030"></a>      0, y, 0, 0,
<a name="line1031"></a>      a, b, c, -1,
<a name="line1032"></a>      0, 0, d, 0
<a name="line1033"></a>  );
<a name="line1034"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1035"></a>};
<a name="line1036"></a>
<a name="line1037"></a>
<a name="line1038"></a>/**
<a name="line1039"></a> * Makse the given 4x4 matrix  perspective projection matrix given a
<a name="line1040"></a> * field of view and aspect ratio.
<a name="line1041"></a> *
<a name="line1042"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1043"></a> * @param {number} fovy The field of view along the y (vertical) axis in
<a name="line1044"></a> *     radians.
<a name="line1045"></a> * @param {number} aspect The x (width) to y (height) aspect ratio.
<a name="line1046"></a> * @param {number} near The distance to the near clipping plane.
<a name="line1047"></a> * @param {number} far The distance to the far clipping plane.
<a name="line1048"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1049"></a> *     chained.
<a name="line1050"></a> */
<a name="line1051"></a>goog.vec.Mat4.makePerspective = function(mat, fovy, aspect, near, far) {
<a name="line1052"></a>  var angle = fovy / 2;
<a name="line1053"></a>  var dz = far - near;
<a name="line1054"></a>  var sinAngle = Math.sin(angle);
<a name="line1055"></a>  if (dz == 0 || sinAngle == 0 || aspect == 0) {
<a name="line1056"></a>    return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1057"></a>  }
<a name="line1058"></a>
<a name="line1059"></a>  var cot = Math.cos(angle) / sinAngle;
<a name="line1060"></a>  goog.vec.Mat4.setFromValues(mat,
<a name="line1061"></a>      cot / aspect, 0, 0, 0,
<a name="line1062"></a>      0, cot, 0, 0,
<a name="line1063"></a>      0, 0, -(far + near) / dz, -1,
<a name="line1064"></a>      0, 0, -(2 * near * far) / dz, 0
<a name="line1065"></a>  );
<a name="line1066"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1067"></a>};
<a name="line1068"></a>
<a name="line1069"></a>
<a name="line1070"></a>/**
<a name="line1071"></a> * Makes the given 4x4 matrix an orthographic projection matrix.
<a name="line1072"></a> *
<a name="line1073"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1074"></a> * @param {number} left The coordinate of the left clipping plane.
<a name="line1075"></a> * @param {number} right The coordinate of the right clipping plane.
<a name="line1076"></a> * @param {number} bottom The coordinate of the bottom clipping plane.
<a name="line1077"></a> * @param {number} top The coordinate of the top clipping plane.
<a name="line1078"></a> * @param {number} near The distance to the near clipping plane.
<a name="line1079"></a> * @param {number} far The distance to the far clipping plane.
<a name="line1080"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1081"></a> *     chained.
<a name="line1082"></a> */
<a name="line1083"></a>goog.vec.Mat4.makeOrtho = function(mat, left, right, bottom, top, near, far) {
<a name="line1084"></a>  var x = 2 / (right - left);
<a name="line1085"></a>  var y = 2 / (top - bottom);
<a name="line1086"></a>  var z = -2 / (far - near);
<a name="line1087"></a>  var a = -(right + left) / (right - left);
<a name="line1088"></a>  var b = -(top + bottom) / (top - bottom);
<a name="line1089"></a>  var c = -(far + near) / (far - near);
<a name="line1090"></a>
<a name="line1091"></a>  goog.vec.Mat4.setFromValues(mat,
<a name="line1092"></a>      x, 0, 0, 0,
<a name="line1093"></a>      0, y, 0, 0,
<a name="line1094"></a>      0, 0, z, 0,
<a name="line1095"></a>      a, b, c, 1
<a name="line1096"></a>  );
<a name="line1097"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1098"></a>};
<a name="line1099"></a>
<a name="line1100"></a>
<a name="line1101"></a>/**
<a name="line1102"></a> * Makes the given 4x4 matrix a modelview matrix of a camera so that
<a name="line1103"></a> * the camera is &#39;looking at&#39; the given center point.
<a name="line1104"></a> *
<a name="line1105"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1106"></a> * @param {goog.vec.Vec3.Vec3Like} eyePt The position of the eye point
<a name="line1107"></a> *     (camera origin).
<a name="line1108"></a> * @param {goog.vec.Vec3.Vec3Like} centerPt The point to aim the camera at.
<a name="line1109"></a> * @param {goog.vec.Vec3.Vec3Like} worldUpVec The vector that identifies
<a name="line1110"></a> *     the up direction for the camera.
<a name="line1111"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1112"></a> *     chained.
<a name="line1113"></a> */
<a name="line1114"></a>goog.vec.Mat4.makeLookAt = function(mat, eyePt, centerPt, worldUpVec) {
<a name="line1115"></a>  // Compute the direction vector from the eye point to the center point and
<a name="line1116"></a>  // normalize.
<a name="line1117"></a>  var fwdVec = goog.vec.Mat4.tmpVec4_[0];
<a name="line1118"></a>  goog.vec.Vec3.subtract(centerPt, eyePt, fwdVec);
<a name="line1119"></a>  goog.vec.Vec3.normalize(fwdVec, fwdVec);
<a name="line1120"></a>  fwdVec[3] = 0;
<a name="line1121"></a>
<a name="line1122"></a>  // Compute the side vector from the forward vector and the input up vector.
<a name="line1123"></a>  var sideVec = goog.vec.Mat4.tmpVec4_[1];
<a name="line1124"></a>  goog.vec.Vec3.cross(fwdVec, worldUpVec, sideVec);
<a name="line1125"></a>  goog.vec.Vec3.normalize(sideVec, sideVec);
<a name="line1126"></a>  sideVec[3] = 0;
<a name="line1127"></a>
<a name="line1128"></a>  // Now the up vector to form the orthonormal basis.
<a name="line1129"></a>  var upVec = goog.vec.Mat4.tmpVec4_[2];
<a name="line1130"></a>  goog.vec.Vec3.cross(sideVec, fwdVec, upVec);
<a name="line1131"></a>  goog.vec.Vec3.normalize(upVec, upVec);
<a name="line1132"></a>  upVec[3] = 0;
<a name="line1133"></a>
<a name="line1134"></a>  // Update the view matrix with the new orthonormal basis and position the
<a name="line1135"></a>  // camera at the given eye point.
<a name="line1136"></a>  goog.vec.Vec3.negate(fwdVec, fwdVec);
<a name="line1137"></a>  goog.vec.Mat4.setRow(mat, 0, sideVec);
<a name="line1138"></a>  goog.vec.Mat4.setRow(mat, 1, upVec);
<a name="line1139"></a>  goog.vec.Mat4.setRow(mat, 2, fwdVec);
<a name="line1140"></a>  goog.vec.Mat4.setRowValues(mat, 3, 0, 0, 0, 1);
<a name="line1141"></a>  goog.vec.Mat4.translate(
<a name="line1142"></a>      mat, -eyePt[0], -eyePt[1], -eyePt[2]);
<a name="line1143"></a>
<a name="line1144"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1145"></a>};
<a name="line1146"></a>
<a name="line1147"></a>
<a name="line1148"></a>/**
<a name="line1149"></a> * Decomposes a matrix into the lookAt vectors eyePt, fwdVec and worldUpVec.
<a name="line1150"></a> * The matrix represents the modelview matrix of a camera. It is the inverse
<a name="line1151"></a> * of lookAt except for the output of the fwdVec instead of centerPt.
<a name="line1152"></a> * The centerPt itself cannot be recovered from a modelview matrix.
<a name="line1153"></a> *
<a name="line1154"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1155"></a> * @param {goog.vec.Vec3.Vec3Like} eyePt The position of the eye point
<a name="line1156"></a> *     (camera origin).
<a name="line1157"></a> * @param {goog.vec.Vec3.Vec3Like} fwdVec The vector describing where
<a name="line1158"></a> *     the camera points to.
<a name="line1159"></a> * @param {goog.vec.Vec3.Vec3Like} worldUpVec The vector that
<a name="line1160"></a> *     identifies the up direction for the camera.
<a name="line1161"></a> * @return {boolean} True if the method succeeds, false otherwise.
<a name="line1162"></a> *     The method can only fail if the inverse of viewMatrix is not defined.
<a name="line1163"></a> */
<a name="line1164"></a>goog.vec.Mat4.toLookAt = function(mat, eyePt, fwdVec, worldUpVec) {
<a name="line1165"></a>  // Get eye of the camera.
<a name="line1166"></a>  var matInverse = goog.vec.Mat4.tmpMat4_[0];
<a name="line1167"></a>  if (!goog.vec.Mat4.invert(mat, matInverse)) {
<a name="line1168"></a>    // The input matrix does not have a valid inverse.
<a name="line1169"></a>    return false;
<a name="line1170"></a>  }
<a name="line1171"></a>
<a name="line1172"></a>  if (eyePt) {
<a name="line1173"></a>    eyePt[0] = matInverse[12];
<a name="line1174"></a>    eyePt[1] = matInverse[13];
<a name="line1175"></a>    eyePt[2] = matInverse[14];
<a name="line1176"></a>  }
<a name="line1177"></a>
<a name="line1178"></a>  // Get forward vector from the definition of lookAt.
<a name="line1179"></a>  if (fwdVec || worldUpVec) {
<a name="line1180"></a>    if (!fwdVec) {
<a name="line1181"></a>      fwdVec = goog.vec.Mat4.tmpVec3_[0];
<a name="line1182"></a>    }
<a name="line1183"></a>    fwdVec[0] = -mat[2];
<a name="line1184"></a>    fwdVec[1] = -mat[6];
<a name="line1185"></a>    fwdVec[2] = -mat[10];
<a name="line1186"></a>    // Normalize forward vector.
<a name="line1187"></a>    goog.vec.Vec3.normalize(fwdVec, fwdVec);
<a name="line1188"></a>  }
<a name="line1189"></a>
<a name="line1190"></a>  if (worldUpVec) {
<a name="line1191"></a>    // Get side vector from the definition of gluLookAt.
<a name="line1192"></a>    var side = goog.vec.Mat4.tmpVec3_[1];
<a name="line1193"></a>    side[0] = mat[0];
<a name="line1194"></a>    side[1] = mat[4];
<a name="line1195"></a>    side[2] = mat[8];
<a name="line1196"></a>    // Compute up vector as a up = side x forward.
<a name="line1197"></a>    goog.vec.Vec3.cross(side, fwdVec, worldUpVec);
<a name="line1198"></a>    // Normalize up vector.
<a name="line1199"></a>    goog.vec.Vec3.normalize(worldUpVec, worldUpVec);
<a name="line1200"></a>  }
<a name="line1201"></a>  return true;
<a name="line1202"></a>};
<a name="line1203"></a>
<a name="line1204"></a>
<a name="line1205"></a>/**
<a name="line1206"></a> * Makes the given 4x4 matrix a rotation matrix given Euler angles using
<a name="line1207"></a> * the ZXZ convention.
<a name="line1208"></a> * Given the euler angles [theta1, theta2, theta3], the rotation is defined as
<a name="line1209"></a> * rotation = rotation_z(theta1) * rotation_x(theta2) * rotation_z(theta3),
<a name="line1210"></a> * with theta1 in [0, 2 * pi], theta2 in [0, pi] and theta3 in [0, 2 * pi].
<a name="line1211"></a> * rotation_x(theta) means rotation around the X axis of theta radians,
<a name="line1212"></a> *
<a name="line1213"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1214"></a> * @param {number} theta1 The angle of rotation around the Z axis in radians.
<a name="line1215"></a> * @param {number} theta2 The angle of rotation around the X axis in radians.
<a name="line1216"></a> * @param {number} theta3 The angle of rotation around the Z axis in radians.
<a name="line1217"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1218"></a> *     chained.
<a name="line1219"></a> */
<a name="line1220"></a>goog.vec.Mat4.makeEulerZXZ = function(mat, theta1, theta2, theta3) {
<a name="line1221"></a>  var c1 = Math.cos(theta1);
<a name="line1222"></a>  var s1 = Math.sin(theta1);
<a name="line1223"></a>
<a name="line1224"></a>  var c2 = Math.cos(theta2);
<a name="line1225"></a>  var s2 = Math.sin(theta2);
<a name="line1226"></a>
<a name="line1227"></a>  var c3 = Math.cos(theta3);
<a name="line1228"></a>  var s3 = Math.sin(theta3);
<a name="line1229"></a>
<a name="line1230"></a>  mat[0] = c1 * c3 - c2 * s1 * s3;
<a name="line1231"></a>  mat[1] = c2 * c1 * s3 + c3 * s1;
<a name="line1232"></a>  mat[2] = s3 * s2;
<a name="line1233"></a>  mat[3] = 0;
<a name="line1234"></a>
<a name="line1235"></a>  mat[4] = -c1 * s3 - c3 * c2 * s1;
<a name="line1236"></a>  mat[5] = c1 * c2 * c3 - s1 * s3;
<a name="line1237"></a>  mat[6] = c3 * s2;
<a name="line1238"></a>  mat[7] = 0;
<a name="line1239"></a>
<a name="line1240"></a>  mat[8] = s2 * s1;
<a name="line1241"></a>  mat[9] = -c1 * s2;
<a name="line1242"></a>  mat[10] = c2;
<a name="line1243"></a>  mat[11] = 0;
<a name="line1244"></a>
<a name="line1245"></a>  mat[12] = 0;
<a name="line1246"></a>  mat[13] = 0;
<a name="line1247"></a>  mat[14] = 0;
<a name="line1248"></a>  mat[15] = 1;
<a name="line1249"></a>
<a name="line1250"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1251"></a>};
<a name="line1252"></a>
<a name="line1253"></a>
<a name="line1254"></a>/**
<a name="line1255"></a> * Decomposes a rotation matrix into Euler angles using the ZXZ convention so
<a name="line1256"></a> * that rotation = rotation_z(theta1) * rotation_x(theta2) * rotation_z(theta3),
<a name="line1257"></a> * with theta1 in [0, 2 * pi], theta2 in [0, pi] and theta3 in [0, 2 * pi].
<a name="line1258"></a> * rotation_x(theta) means rotation around the X axis of theta radians.
<a name="line1259"></a> *
<a name="line1260"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1261"></a> * @param {goog.vec.Mat4.Mat4Like} euler The ZXZ Euler angles in
<a name="line1262"></a> *     radians as [theta1, theta2, theta3].
<a name="line1263"></a> * @param {boolean=} opt_theta2IsNegative Whether theta2 is in [-pi, 0] instead
<a name="line1264"></a> *     of the default [0, pi].
<a name="line1265"></a> */
<a name="line1266"></a>goog.vec.Mat4.toEulerZXZ = function(mat, euler, opt_theta2IsNegative) {
<a name="line1267"></a>  // There is an ambiguity in the sign of sinTheta2 because of the sqrt.
<a name="line1268"></a>  var sinTheta2 = Math.sqrt(mat[2] * mat[2] + mat[6] * mat[6]);
<a name="line1269"></a>
<a name="line1270"></a>  // By default we explicitely constrain theta2 to be in [0, pi],
<a name="line1271"></a>  // so sinTheta2 is always positive. We can change the behavior and specify
<a name="line1272"></a>  // theta2 to be negative in [-pi, 0] with opt_Theta2IsNegative.
<a name="line1273"></a>  var signTheta2 = opt_theta2IsNegative ? -1 : 1;
<a name="line1274"></a>
<a name="line1275"></a>  if (sinTheta2 &gt; goog.vec.EPSILON) {
<a name="line1276"></a>    euler[2] = Math.atan2(mat[2] * signTheta2, mat[6] * signTheta2);
<a name="line1277"></a>    euler[1] = Math.atan2(sinTheta2 * signTheta2, mat[10]);
<a name="line1278"></a>    euler[0] = Math.atan2(mat[8] * signTheta2, -mat[9] * signTheta2);
<a name="line1279"></a>  } else {
<a name="line1280"></a>    // There is also an arbitrary choice for roll = 0 or pan = 0 in this case.
<a name="line1281"></a>    // We assume roll = 0 as some applications do not allow the camera to roll.
<a name="line1282"></a>    euler[0] = 0;
<a name="line1283"></a>    euler[1] = Math.atan2(sinTheta2 * signTheta2, mat[10]);
<a name="line1284"></a>    euler[2] = Math.atan2(mat[1], mat[0]);
<a name="line1285"></a>  }
<a name="line1286"></a>
<a name="line1287"></a>  // Atan2 outputs angles in [-pi, pi] so we bring them back to [0, 2 * pi].
<a name="line1288"></a>  euler[0] = (euler[0] + Math.PI * 2) % (Math.PI * 2);
<a name="line1289"></a>  euler[2] = (euler[2] + Math.PI * 2) % (Math.PI * 2);
<a name="line1290"></a>  // For theta2 we want the angle to be in [0, pi] or [-pi, 0] depending on
<a name="line1291"></a>  // signTheta2.
<a name="line1292"></a>  euler[1] = ((euler[1] * signTheta2 + Math.PI * 2) % (Math.PI * 2)) *
<a name="line1293"></a>      signTheta2;
<a name="line1294"></a>};
<a name="line1295"></a>
<a name="line1296"></a>
<a name="line1297"></a>/**
<a name="line1298"></a> * Translates the given matrix by x,y,z.  Equvialent to:
<a name="line1299"></a> * goog.vec.Mat4.multMat(
<a name="line1300"></a> *     mat,
<a name="line1301"></a> *     goog.vec.Mat4.makeTranslate(goog.vec.Mat4.create(), x, y, z),
<a name="line1302"></a> *     mat);
<a name="line1303"></a> *
<a name="line1304"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1305"></a> * @param {number} x The translation along the x axis.
<a name="line1306"></a> * @param {number} y The translation along the y axis.
<a name="line1307"></a> * @param {number} z The translation along the z axis.
<a name="line1308"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1309"></a> *     chained.
<a name="line1310"></a> */
<a name="line1311"></a>goog.vec.Mat4.translate = function(mat, x, y, z) {
<a name="line1312"></a>  goog.vec.Mat4.setColumnValues(
<a name="line1313"></a>      mat, 3,
<a name="line1314"></a>      mat[0] * x + mat[4] * y + mat[8] * z + mat[12],
<a name="line1315"></a>      mat[1] * x + mat[5] * y + mat[9] * z + mat[13],
<a name="line1316"></a>      mat[2] * x + mat[6] * y + mat[10] * z + mat[14],
<a name="line1317"></a>      mat[3] * x + mat[7] * y + mat[11] * z + mat[15]);
<a name="line1318"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1319"></a>};
<a name="line1320"></a>
<a name="line1321"></a>
<a name="line1322"></a>/**
<a name="line1323"></a> * Scales the given matrix by x,y,z.  Equivalent to:
<a name="line1324"></a> * goog.vec.Mat4.multMat(
<a name="line1325"></a> *     mat,
<a name="line1326"></a> *     goog.vec.Mat4.makeScale(goog.vec.Mat4.create(), x, y, z),
<a name="line1327"></a> *     mat);
<a name="line1328"></a> *
<a name="line1329"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1330"></a> * @param {number} x The x scale factor.
<a name="line1331"></a> * @param {number} y The y scale factor.
<a name="line1332"></a> * @param {number} z The z scale factor.
<a name="line1333"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1334"></a> *     chained.
<a name="line1335"></a> */
<a name="line1336"></a>goog.vec.Mat4.scale = function(mat, x, y, z) {
<a name="line1337"></a>  goog.vec.Mat4.setFromValues(
<a name="line1338"></a>      mat,
<a name="line1339"></a>      mat[0] * x, mat[1] * x, mat[2] * x, mat[3] * x,
<a name="line1340"></a>      mat[4] * y, mat[5] * y, mat[6] * y, mat[7] * y,
<a name="line1341"></a>      mat[8] * z, mat[9] * z, mat[10] * z, mat[11] * z,
<a name="line1342"></a>      mat[12], mat[13], mat[14], mat[15]);
<a name="line1343"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1344"></a>};
<a name="line1345"></a>
<a name="line1346"></a>
<a name="line1347"></a>/**
<a name="line1348"></a> * Rotation the given matrix by angle about the x,y,z axis.  Equivalent to:
<a name="line1349"></a> * goog.vec.Mat4.multMat(
<a name="line1350"></a> *     mat,
<a name="line1351"></a> *     goog.vec.Mat4.makeRotate(goog.vec.Mat4.create(), angle, x, y, z),
<a name="line1352"></a> *     mat);
<a name="line1353"></a> *
<a name="line1354"></a> * @param {goog.vec.Mat4.Mat4Like} mat The matrix.
<a name="line1355"></a> * @param {number} angle The angle in radians.
<a name="line1356"></a> * @param {number} x The x component of the rotation axis.
<a name="line1357"></a> * @param {number} y The y component of the rotation axis.
<a name="line1358"></a> * @param {number} z The z component of the rotation axis.
<a name="line1359"></a> * @return {!goog.vec.Mat4.Mat4Like} return mat so that operations can be
<a name="line1360"></a> *     chained.
<a name="line1361"></a> */
<a name="line1362"></a>goog.vec.Mat4.rotate = function(mat, angle, x, y, z) {
<a name="line1363"></a>  var m00 = mat[0], m10 = mat[1], m20 = mat[2], m30 = mat[3];
<a name="line1364"></a>  var m01 = mat[4], m11 = mat[5], m21 = mat[6], m31 = mat[7];
<a name="line1365"></a>  var m02 = mat[8], m12 = mat[9], m22 = mat[10], m32 = mat[11];
<a name="line1366"></a>  var m03 = mat[12], m13 = mat[13], m23 = mat[14], m33 = mat[15];
<a name="line1367"></a>
<a name="line1368"></a>  var cosAngle = Math.cos(angle);
<a name="line1369"></a>  var sinAngle = Math.sin(angle);
<a name="line1370"></a>  var diffCosAngle = 1 - cosAngle;
<a name="line1371"></a>  var r00 = x * x * diffCosAngle + cosAngle;
<a name="line1372"></a>  var r10 = x * y * diffCosAngle + z * sinAngle;
<a name="line1373"></a>  var r20 = x * z * diffCosAngle - y * sinAngle;
<a name="line1374"></a>
<a name="line1375"></a>  var r01 = x * y * diffCosAngle - z * sinAngle;
<a name="line1376"></a>  var r11 = y * y * diffCosAngle + cosAngle;
<a name="line1377"></a>  var r21 = y * z * diffCosAngle + x * sinAngle;
<a name="line1378"></a>
<a name="line1379"></a>  var r02 = x * z * diffCosAngle + y * sinAngle;
<a name="line1380"></a>  var r12 = y * z * diffCosAngle - x * sinAngle;
<a name="line1381"></a>  var r22 = z * z * diffCosAngle + cosAngle;
<a name="line1382"></a>
<a name="line1383"></a>  goog.vec.Mat4.setFromValues(
<a name="line1384"></a>      mat,
<a name="line1385"></a>      m00 * r00 + m01 * r10 + m02 * r20,
<a name="line1386"></a>      m10 * r00 + m11 * r10 + m12 * r20,
<a name="line1387"></a>      m20 * r00 + m21 * r10 + m22 * r20,
<a name="line1388"></a>      m30 * r00 + m31 * r10 + m32 * r20,
<a name="line1389"></a>
<a name="line1390"></a>      m00 * r01 + m01 * r11 + m02 * r21,
<a name="line1391"></a>      m10 * r01 + m11 * r11 + m12 * r21,
<a name="line1392"></a>      m20 * r01 + m21 * r11 + m22 * r21,
<a name="line1393"></a>      m30 * r01 + m31 * r11 + m32 * r21,
<a name="line1394"></a>
<a name="line1395"></a>      m00 * r02 + m01 * r12 + m02 * r22,
<a name="line1396"></a>      m10 * r02 + m11 * r12 + m12 * r22,
<a name="line1397"></a>      m20 * r02 + m21 * r12 + m22 * r22,
<a name="line1398"></a>      m30 * r02 + m31 * r12 + m32 * r22,
<a name="line1399"></a>
<a name="line1400"></a>      m03, m13, m23, m33);
<a name="line1401"></a>
<a name="line1402"></a>  return /** @type {!goog.vec.Mat4.Mat4Like} */ (mat);
<a name="line1403"></a>};
<a name="line1404"></a>
<a name="line1405"></a>
<a name="line1406"></a>/**
<a name="line1407"></a> * @type {Array.&lt;goog.vec.Vec3.Type&gt;}
<a name="line1408"></a> * @private
<a name="line1409"></a> */
<a name="line1410"></a>goog.vec.Mat4.tmpVec3_ = [
<a name="line1411"></a>  goog.vec.Vec3.create(),
<a name="line1412"></a>  goog.vec.Vec3.create()
<a name="line1413"></a>];
<a name="line1414"></a>
<a name="line1415"></a>
<a name="line1416"></a>/**
<a name="line1417"></a> * @type {Array.&lt;goog.vec.Vec4.Type&gt;}
<a name="line1418"></a> * @private
<a name="line1419"></a> */
<a name="line1420"></a>goog.vec.Mat4.tmpVec4_ = [
<a name="line1421"></a>  goog.vec.Vec4.create(),
<a name="line1422"></a>  goog.vec.Vec4.create(),
<a name="line1423"></a>  goog.vec.Vec4.create()
<a name="line1424"></a>];
<a name="line1425"></a>
<a name="line1426"></a>
<a name="line1427"></a>/**
<a name="line1428"></a> * @type {Array.&lt;goog.vec.Mat4.Type&gt;}
<a name="line1429"></a> * @private
<a name="line1430"></a> */
<a name="line1431"></a>goog.vec.Mat4.tmpMat4_ = [
<a name="line1432"></a>  goog.vec.Mat4.create()
<a name="line1433"></a>];
</pre>


</body>
</html>
