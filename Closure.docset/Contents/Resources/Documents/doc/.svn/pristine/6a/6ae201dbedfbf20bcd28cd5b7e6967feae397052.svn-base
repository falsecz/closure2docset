<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>iterablemechanism.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_storage_mechanism_iterablemechanism.js.html">iterablemechanism.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Interface for storing, retieving and scanning data using some
<a name="line17"></a> * persistence mechanism.
<a name="line18"></a> *
<a name="line19"></a> */
<a name="line20"></a>
<a name="line21"></a>goog.provide(&#39;goog.storage.mechanism.IterableMechanism&#39;);
<a name="line22"></a>
<a name="line23"></a>goog.require(&#39;goog.array&#39;);
<a name="line24"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line25"></a>goog.require(&#39;goog.iter&#39;);
<a name="line26"></a>goog.require(&#39;goog.iter.Iterator&#39;);
<a name="line27"></a>goog.require(&#39;goog.storage.mechanism.Mechanism&#39;);
<a name="line28"></a>
<a name="line29"></a>
<a name="line30"></a>
<a name="line31"></a>/**
<a name="line32"></a> * Interface for all iterable storage mechanisms.
<a name="line33"></a> *
<a name="line34"></a> * @constructor
<a name="line35"></a> * @extends {goog.storage.mechanism.Mechanism}
<a name="line36"></a> */
<a name="line37"></a>goog.storage.mechanism.IterableMechanism = function() {
<a name="line38"></a>  goog.base(this);
<a name="line39"></a>};
<a name="line40"></a>goog.inherits(goog.storage.mechanism.IterableMechanism,
<a name="line41"></a>              goog.storage.mechanism.Mechanism);
<a name="line42"></a>
<a name="line43"></a>
<a name="line44"></a>/**
<a name="line45"></a> * Get the number of stored key-value pairs.
<a name="line46"></a> *
<a name="line47"></a> * Could be overridden in a subclass, as the default implementation is not very
<a name="line48"></a> * efficient - it iterates over all keys.
<a name="line49"></a> *
<a name="line50"></a> * @return {number} Number of stored elements.
<a name="line51"></a> */
<a name="line52"></a>goog.storage.mechanism.IterableMechanism.prototype.getCount = function() {
<a name="line53"></a>  var count = 0;
<a name="line54"></a>  goog.iter.forEach(this.__iterator__(true), function(key) {
<a name="line55"></a>    goog.asserts.assertString(key);
<a name="line56"></a>    count++;
<a name="line57"></a>  });
<a name="line58"></a>  return count;
<a name="line59"></a>};
<a name="line60"></a>
<a name="line61"></a>
<a name="line62"></a>/**
<a name="line63"></a> * Returns an iterator that iterates over the elements in the storage. Will
<a name="line64"></a> * throw goog.iter.StopIteration after the last element.
<a name="line65"></a> *
<a name="line66"></a> * @param {boolean=} opt_keys True to iterate over the keys. False to iterate
<a name="line67"></a> *     over the values.  The default value is false.
<a name="line68"></a> * @return {!goog.iter.Iterator} The iterator.
<a name="line69"></a> */
<a name="line70"></a>goog.storage.mechanism.IterableMechanism.prototype.__iterator__ =
<a name="line71"></a>    goog.abstractMethod;
<a name="line72"></a>
<a name="line73"></a>
<a name="line74"></a>/**
<a name="line75"></a> * Remove all key-value pairs.
<a name="line76"></a> *
<a name="line77"></a> * Could be overridden in a subclass, as the default implementation is not very
<a name="line78"></a> * efficient - it iterates over all keys.
<a name="line79"></a> */
<a name="line80"></a>goog.storage.mechanism.IterableMechanism.prototype.clear = function() {
<a name="line81"></a>  var keys = goog.iter.toArray(this.__iterator__(true));
<a name="line82"></a>  var selfObj = this;
<a name="line83"></a>  goog.array.forEach(keys, function(key) {
<a name="line84"></a>    selfObj.remove(key);
<a name="line85"></a>  });
<a name="line86"></a>};
</pre>


</body>
</html>
