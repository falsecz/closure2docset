<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>html5localstorage.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_storage_mechanism_html5localstorage.js.html">html5localstorage.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Provides data persistence using HTML5 local storage mechanism.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>
<a name="line20"></a>goog.provide(&#39;goog.storage.mechanism.HTML5LocalStorage&#39;);
<a name="line21"></a>
<a name="line22"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line23"></a>goog.require(&#39;goog.iter.Iterator&#39;);
<a name="line24"></a>goog.require(&#39;goog.iter.StopIteration&#39;);
<a name="line25"></a>goog.require(&#39;goog.storage.mechanism.ErrorCode&#39;);
<a name="line26"></a>goog.require(&#39;goog.storage.mechanism.IterableMechanism&#39;);
<a name="line27"></a>
<a name="line28"></a>
<a name="line29"></a>
<a name="line30"></a>/**
<a name="line31"></a> * Provides a storage mechanism that uses HTML5 local storage.
<a name="line32"></a> *
<a name="line33"></a> * @constructor
<a name="line34"></a> * @extends {goog.storage.mechanism.IterableMechanism}
<a name="line35"></a> */
<a name="line36"></a>goog.storage.mechanism.HTML5LocalStorage = function() {
<a name="line37"></a>  goog.base(this);
<a name="line38"></a>};
<a name="line39"></a>goog.inherits(goog.storage.mechanism.HTML5LocalStorage,
<a name="line40"></a>              goog.storage.mechanism.IterableMechanism);
<a name="line41"></a>
<a name="line42"></a>
<a name="line43"></a>/**
<a name="line44"></a> * Determines whether or not the mechanism is available.
<a name="line45"></a> * It works only if localStorage is in the window scope.
<a name="line46"></a> *
<a name="line47"></a> * @return {boolean} True if the mechanism is available.
<a name="line48"></a> */
<a name="line49"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.isAvailable = function() {
<a name="line50"></a>  /** @preserveTry */
<a name="line51"></a>  try {
<a name="line52"></a>    // May throw a security exception if localStorage is disabled.
<a name="line53"></a>    return !!window.localStorage.getItem;
<a name="line54"></a>  } catch (e) {}
<a name="line55"></a>  return false;
<a name="line56"></a>};
<a name="line57"></a>
<a name="line58"></a>
<a name="line59"></a>/** @override */
<a name="line60"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.set = function(key, value) {
<a name="line61"></a>  /** @preserveTry */
<a name="line62"></a>  try {
<a name="line63"></a>    // May throw an exception if storage quota is exceeded.
<a name="line64"></a>    window.localStorage.setItem(key, value);
<a name="line65"></a>  } catch (e) {
<a name="line66"></a>    throw goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED;
<a name="line67"></a>  }
<a name="line68"></a>};
<a name="line69"></a>
<a name="line70"></a>
<a name="line71"></a>/** @override */
<a name="line72"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.get = function(key) {
<a name="line73"></a>  // According to W3C specs, values can be of any type. Since we only save
<a name="line74"></a>  // strings, any other type is a storage error. If we returned nulls for
<a name="line75"></a>  // such keys, i.e., treated them as non-existent, this would lead to a
<a name="line76"></a>  // paradox where a key exists, but it does not when it is retrieved.
<a name="line77"></a>  // http://www.w3.org/TR/2009/WD-webstorage-20091029/#the-storage-interface
<a name="line78"></a>  var value = window.localStorage.getItem(key);
<a name="line79"></a>  if (goog.isString(value) || goog.isNull(value)) {
<a name="line80"></a>    return value;
<a name="line81"></a>  }
<a name="line82"></a>  throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
<a name="line83"></a>};
<a name="line84"></a>
<a name="line85"></a>
<a name="line86"></a>/** @override */
<a name="line87"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.remove = function(key) {
<a name="line88"></a>  window.localStorage.removeItem(key);
<a name="line89"></a>};
<a name="line90"></a>
<a name="line91"></a>
<a name="line92"></a>/** @override */
<a name="line93"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.getCount = function() {
<a name="line94"></a>  return window.localStorage.length;
<a name="line95"></a>};
<a name="line96"></a>
<a name="line97"></a>
<a name="line98"></a>/** @override */
<a name="line99"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.__iterator__ = function(
<a name="line100"></a>    opt_keys) {
<a name="line101"></a>  var i = 0;
<a name="line102"></a>  var newIter = new goog.iter.Iterator;
<a name="line103"></a>  newIter.next = function() {
<a name="line104"></a>    if (i &gt;= window.localStorage.length) {
<a name="line105"></a>      throw goog.iter.StopIteration;
<a name="line106"></a>    }
<a name="line107"></a>    var key = goog.asserts.assertString(window.localStorage.key(i++));
<a name="line108"></a>    if (opt_keys) {
<a name="line109"></a>      return key;
<a name="line110"></a>    }
<a name="line111"></a>    var value = window.localStorage.getItem(key);
<a name="line112"></a>    // The value must exist and be a string, otherwise it is a storage error.
<a name="line113"></a>    if (goog.isString(value)) {
<a name="line114"></a>      return value;
<a name="line115"></a>    }
<a name="line116"></a>    throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
<a name="line117"></a>  };
<a name="line118"></a>  return newIter;
<a name="line119"></a>};
<a name="line120"></a>
<a name="line121"></a>
<a name="line122"></a>/** @override */
<a name="line123"></a>goog.storage.mechanism.HTML5LocalStorage.prototype.clear = function() {
<a name="line124"></a>  window.localStorage.clear();
<a name="line125"></a>};
</pre>


</body>
</html>
