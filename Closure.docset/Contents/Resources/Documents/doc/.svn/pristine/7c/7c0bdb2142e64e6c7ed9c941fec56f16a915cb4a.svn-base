<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>expr.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_datasource_expr.js.html">expr.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2006 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview
<a name="line17"></a> * Expression evaluation utilities. Expression format is very similar to XPath.
<a name="line18"></a> *
<a name="line19"></a> * Expression details:
<a name="line20"></a> * - Of format A/B/C, which will evaluate getChildNode(&#39;A&#39;).getChildNode(&#39;B&#39;).
<a name="line21"></a> *    getChildNodes(&#39;C&#39;)|getChildNodeValue(&#39;C&#39;)|getChildNode(&#39;C&#39;) depending on
<a name="line22"></a> *    call
<a name="line23"></a> * - If expression ends with &#39;/name()&#39;, will get the name() of the node
<a name="line24"></a> *    referenced by the preceding path.
<a name="line25"></a> * - If expression ends with &#39;/count()&#39;, will get the count() of the nodes that
<a name="line26"></a> *    match the expression referenced by the preceding path.
<a name="line27"></a> * - If expression ends with &#39;?&#39;, the value is OK to evaluate to null. This is
<a name="line28"></a> *    not enforced by the expression evaluation functions, instead it is
<a name="line29"></a> *    provided as a flag for client code which may ignore depending on usage
<a name="line30"></a> * - If expression has [INDEX], will use getChildNodes().getByIndex(INDEX)
<a name="line31"></a> *
<a name="line32"></a> */
<a name="line33"></a>
<a name="line34"></a>
<a name="line35"></a>goog.provide(&#39;goog.ds.Expr&#39;);
<a name="line36"></a>
<a name="line37"></a>goog.require(&#39;goog.ds.BasicNodeList&#39;);
<a name="line38"></a>goog.require(&#39;goog.ds.EmptyNodeList&#39;);
<a name="line39"></a>goog.require(&#39;goog.string&#39;);
<a name="line40"></a>
<a name="line41"></a>
<a name="line42"></a>
<a name="line43"></a>/**
<a name="line44"></a> * Create a new expression. An expression uses a string expression language, and
<a name="line45"></a> * from this string and a passed in DataNode can evaluate to a value, DataNode,
<a name="line46"></a> * or a DataNodeList.
<a name="line47"></a> *
<a name="line48"></a> * @param {string=} opt_expr The string expression.
<a name="line49"></a> * @constructor
<a name="line50"></a> */
<a name="line51"></a>goog.ds.Expr = function(opt_expr) {
<a name="line52"></a>  if (opt_expr) {
<a name="line53"></a>    this.setSource_(opt_expr);
<a name="line54"></a>  }
<a name="line55"></a>};
<a name="line56"></a>
<a name="line57"></a>
<a name="line58"></a>/**
<a name="line59"></a> * Set the source expression text &amp; parse
<a name="line60"></a> *
<a name="line61"></a> * @param {string} expr The string expression source.
<a name="line62"></a> * @param {Array=} opt_parts Array of the parts of an expression.
<a name="line63"></a> * @param {goog.ds.Expr=} opt_childExpr Optional child of this expression,
<a name="line64"></a> *   passed in as a hint for processing.
<a name="line65"></a> * @param {goog.ds.Expr=} opt_prevExpr Optional preceding expression
<a name="line66"></a> *   (i.e. $A/B/C is previous expression to B/C) passed in as a hint for
<a name="line67"></a> *   processing.
<a name="line68"></a> * @private
<a name="line69"></a> */
<a name="line70"></a>goog.ds.Expr.prototype.setSource_ = function(expr, opt_parts,
<a name="line71"></a>    opt_childExpr, opt_prevExpr) {
<a name="line72"></a>  this.src_ = expr;
<a name="line73"></a>
<a name="line74"></a>  if (!opt_childExpr &amp;&amp; !opt_prevExpr) {
<a name="line75"></a>    // Check whether it can be empty
<a name="line76"></a>    if (goog.string.endsWith(expr, goog.ds.Expr.String_.CAN_BE_EMPTY)) {
<a name="line77"></a>      this.canBeEmpty_ = true;
<a name="line78"></a>      expr = expr.substring(0, expr.length - 1);
<a name="line79"></a>    }
<a name="line80"></a>
<a name="line81"></a>    // Check whether this is an node function
<a name="line82"></a>    if (goog.string.endsWith(expr, &#39;()&#39;)) {
<a name="line83"></a>      if (goog.string.endsWith(expr, goog.ds.Expr.String_.NAME_EXPR) ||
<a name="line84"></a>          goog.string.endsWith(expr, goog.ds.Expr.String_.COUNT_EXPR) ||
<a name="line85"></a>          goog.string.endsWith(expr, goog.ds.Expr.String_.POSITION_EXPR)) {
<a name="line86"></a>        var lastPos = expr.lastIndexOf(goog.ds.Expr.String_.SEPARATOR);
<a name="line87"></a>        if (lastPos != -1) {
<a name="line88"></a>          this.exprFn_ = expr.substring(lastPos + 1);
<a name="line89"></a>          expr = expr.substring(0, lastPos);
<a name="line90"></a>        } else {
<a name="line91"></a>          this.exprFn_ = expr;
<a name="line92"></a>          expr = goog.ds.Expr.String_.CURRENT_NODE_EXPR;
<a name="line93"></a>        }
<a name="line94"></a>        if (this.exprFn_ == goog.ds.Expr.String_.COUNT_EXPR) {
<a name="line95"></a>          this.isCount_ = true;
<a name="line96"></a>        }
<a name="line97"></a>      }
<a name="line98"></a>    }
<a name="line99"></a>  }
<a name="line100"></a>
<a name="line101"></a>  // Split into component parts
<a name="line102"></a>  this.parts_ = opt_parts || expr.split(&#39;/&#39;);
<a name="line103"></a>  this.size_ = this.parts_.length;
<a name="line104"></a>  this.last_ = this.parts_[this.size_ - 1];
<a name="line105"></a>  this.root_ = this.parts_[0];
<a name="line106"></a>
<a name="line107"></a>  if (this.size_ == 1) {
<a name="line108"></a>    this.rootExpr_ = this;
<a name="line109"></a>    this.isAbsolute_ = goog.string.startsWith(expr, &#39;$&#39;);
<a name="line110"></a>  } else {
<a name="line111"></a>    this.rootExpr_ = goog.ds.Expr.createInternal_(this.root_, null,
<a name="line112"></a>        this, null);
<a name="line113"></a>    this.isAbsolute_ = this.rootExpr_.isAbsolute_;
<a name="line114"></a>    this.root_ = this.rootExpr_.root_;
<a name="line115"></a>  }
<a name="line116"></a>
<a name="line117"></a>  if (this.size_ == 1 &amp;&amp; !this.isAbsolute_) {
<a name="line118"></a>    // Check whether expression maps to current node, for convenience
<a name="line119"></a>    this.isCurrent_ = (expr == goog.ds.Expr.String_.CURRENT_NODE_EXPR ||
<a name="line120"></a>        expr == goog.ds.Expr.String_.EMPTY_EXPR);
<a name="line121"></a>
<a name="line122"></a>    // Whether this expression is just an attribute (i.e. &#39;@foo&#39;)
<a name="line123"></a>    this.isJustAttribute_ =
<a name="line124"></a>        goog.string.startsWith(expr, goog.ds.Expr.String_.ATTRIBUTE_START);
<a name="line125"></a>
<a name="line126"></a>    // Check whether this is a common node expression
<a name="line127"></a>    this.isAllChildNodes_ = expr == goog.ds.Expr.String_.ALL_CHILD_NODES_EXPR;
<a name="line128"></a>    this.isAllAttributes_ = expr == goog.ds.Expr.String_.ALL_ATTRIBUTES_EXPR;
<a name="line129"></a>    this.isAllElements_ = expr == goog.ds.Expr.String_.ALL_ELEMENTS_EXPR;
<a name="line130"></a>  }
<a name="line131"></a>};
<a name="line132"></a>
<a name="line133"></a>
<a name="line134"></a>/**
<a name="line135"></a> * Get the source data path for the expression
<a name="line136"></a> * @return {string} The path.
<a name="line137"></a> */
<a name="line138"></a>goog.ds.Expr.prototype.getSource = function() {
<a name="line139"></a>  return this.src_;
<a name="line140"></a>};
<a name="line141"></a>
<a name="line142"></a>
<a name="line143"></a>/**
<a name="line144"></a> * Gets the last part of the expression.
<a name="line145"></a> * @return {?string} Last part of the expression.
<a name="line146"></a> */
<a name="line147"></a>goog.ds.Expr.prototype.getLast = function() {
<a name="line148"></a>  return this.last_;
<a name="line149"></a>};
<a name="line150"></a>
<a name="line151"></a>
<a name="line152"></a>/**
<a name="line153"></a> * Gets the parent expression of this expression, or null if this is top level
<a name="line154"></a> * @return {goog.ds.Expr} The parent.
<a name="line155"></a> */
<a name="line156"></a>goog.ds.Expr.prototype.getParent = function() {
<a name="line157"></a>  if (!this.parentExprSet_) {
<a name="line158"></a>    if (this.size_ &gt; 1) {
<a name="line159"></a>      this.parentExpr_ = goog.ds.Expr.createInternal_(null,
<a name="line160"></a>          this.parts_.slice(0, this.parts_.length - 1), this, null);
<a name="line161"></a>    }
<a name="line162"></a>    this.parentExprSet_ = true;
<a name="line163"></a>  }
<a name="line164"></a>  return this.parentExpr_;
<a name="line165"></a>};
<a name="line166"></a>
<a name="line167"></a>
<a name="line168"></a>/**
<a name="line169"></a> * Gets the parent expression of this expression, or null if this is top level
<a name="line170"></a> * @return {goog.ds.Expr} The parent.
<a name="line171"></a> */
<a name="line172"></a>goog.ds.Expr.prototype.getNext = function() {
<a name="line173"></a>  if (!this.nextExprSet_) {
<a name="line174"></a>    if (this.size_ &gt; 1) {
<a name="line175"></a>      this.nextExpr_ = goog.ds.Expr.createInternal_(null, this.parts_.slice(1),
<a name="line176"></a>          null, this);
<a name="line177"></a>    }
<a name="line178"></a>    this.nextExprSet_ = true;
<a name="line179"></a>  }
<a name="line180"></a>  return this.nextExpr_;
<a name="line181"></a>};
<a name="line182"></a>
<a name="line183"></a>
<a name="line184"></a>/**
<a name="line185"></a> * Evaluate an expression on a data node, and return a value
<a name="line186"></a> * Recursively walks through child nodes to evaluate
<a name="line187"></a> * TODO(user) Support other expression functions
<a name="line188"></a> *
<a name="line189"></a> * @param {goog.ds.DataNode=} opt_ds Optional datasource to evaluate against.
<a name="line190"></a> *     If not provided, evaluates against DataManager global root.
<a name="line191"></a> * @return {*} Value of the node, or null if doesn&#39;t exist.
<a name="line192"></a> */
<a name="line193"></a>goog.ds.Expr.prototype.getValue = function(opt_ds) {
<a name="line194"></a>  if (opt_ds == null) {
<a name="line195"></a>    opt_ds = goog.ds.DataManager.getInstance();
<a name="line196"></a>  } else if (this.isAbsolute_) {
<a name="line197"></a>    opt_ds = opt_ds.getDataRoot ? opt_ds.getDataRoot() :
<a name="line198"></a>        goog.ds.DataManager.getInstance();
<a name="line199"></a>  }
<a name="line200"></a>
<a name="line201"></a>  if (this.isCount_) {
<a name="line202"></a>    var nodes = this.getNodes(opt_ds);
<a name="line203"></a>    return nodes.getCount();
<a name="line204"></a>  }
<a name="line205"></a>
<a name="line206"></a>  if (this.size_ == 1) {
<a name="line207"></a>    return opt_ds.getChildNodeValue(this.root_);
<a name="line208"></a>  } else if (this.size_ == 0) {
<a name="line209"></a>    return opt_ds.get();
<a name="line210"></a>  }
<a name="line211"></a>
<a name="line212"></a>  var nextDs = opt_ds.getChildNode(this.root_);
<a name="line213"></a>
<a name="line214"></a>  if (nextDs == null) {
<a name="line215"></a>    return null;
<a name="line216"></a>  } else {
<a name="line217"></a>    return this.getNext().getValue(nextDs);
<a name="line218"></a>  }
<a name="line219"></a>};
<a name="line220"></a>
<a name="line221"></a>
<a name="line222"></a>/**
<a name="line223"></a> * Evaluate an expression on a data node, and return matching nodes
<a name="line224"></a> * Recursively walks through child nodes to evaluate
<a name="line225"></a> *
<a name="line226"></a> * @param {goog.ds.DataNode=} opt_ds Optional datasource to evaluate against.
<a name="line227"></a> *     If not provided, evaluates against data root.
<a name="line228"></a> * @param {boolean=} opt_canCreate If true, will try to create new nodes.
<a name="line229"></a> * @return {goog.ds.DataNodeList} Matching nodes.
<a name="line230"></a> */
<a name="line231"></a>goog.ds.Expr.prototype.getNodes = function(opt_ds, opt_canCreate) {
<a name="line232"></a>  return /** @type {goog.ds.DataNodeList} */(this.getNodes_(opt_ds,
<a name="line233"></a>      false, opt_canCreate));
<a name="line234"></a>};
<a name="line235"></a>
<a name="line236"></a>
<a name="line237"></a>/**
<a name="line238"></a> * Evaluate an expression on a data node, and return the first matching node
<a name="line239"></a> * Recursively walks through child nodes to evaluate
<a name="line240"></a> *
<a name="line241"></a> * @param {goog.ds.DataNode=} opt_ds Optional datasource to evaluate against.
<a name="line242"></a> *     If not provided, evaluates against DataManager global root.
<a name="line243"></a> * @param {boolean=} opt_canCreate If true, will try to create new nodes.
<a name="line244"></a> * @return {goog.ds.DataNode} Matching nodes, or null if doesn&#39;t exist.
<a name="line245"></a> */
<a name="line246"></a>goog.ds.Expr.prototype.getNode = function(opt_ds, opt_canCreate) {
<a name="line247"></a>  return /** @type {goog.ds.DataNode} */(this.getNodes_(opt_ds,
<a name="line248"></a>      true, opt_canCreate));
<a name="line249"></a>};
<a name="line250"></a>
<a name="line251"></a>
<a name="line252"></a>/**
<a name="line253"></a> * Evaluate an expression on a data node, and return the first matching node
<a name="line254"></a> * Recursively walks through child nodes to evaluate
<a name="line255"></a> *
<a name="line256"></a> * @param {goog.ds.DataNode=} opt_ds Optional datasource to evaluate against.
<a name="line257"></a> *     If not provided, evaluates against DataManager global root.
<a name="line258"></a> * @param {boolean=} opt_selectOne Whether to return single matching DataNode
<a name="line259"></a> *     or matching nodes in DataNodeList.
<a name="line260"></a> * @param {boolean=} opt_canCreate If true, will try to create new nodes.
<a name="line261"></a> * @return {goog.ds.DataNode|goog.ds.DataNodeList} Matching node or nodes,
<a name="line262"></a> *     depending on value of opt_selectOne.
<a name="line263"></a> * @private
<a name="line264"></a> */
<a name="line265"></a>goog.ds.Expr.prototype.getNodes_ = function(opt_ds, opt_selectOne,
<a name="line266"></a>    opt_canCreate) {
<a name="line267"></a>  if (opt_ds == null) {
<a name="line268"></a>    opt_ds = goog.ds.DataManager.getInstance();
<a name="line269"></a>  } else if (this.isAbsolute_) {
<a name="line270"></a>    opt_ds = opt_ds.getDataRoot ? opt_ds.getDataRoot() :
<a name="line271"></a>        goog.ds.DataManager.getInstance();
<a name="line272"></a>  }
<a name="line273"></a>
<a name="line274"></a>  if (this.size_ == 0 &amp;&amp; opt_selectOne) {
<a name="line275"></a>      return opt_ds;
<a name="line276"></a>  } else if (this.size_ == 0 &amp;&amp; !opt_selectOne) {
<a name="line277"></a>    return new goog.ds.BasicNodeList([opt_ds]);
<a name="line278"></a>  } else if (this.size_ == 1) {
<a name="line279"></a>    if (opt_selectOne) {
<a name="line280"></a>      return opt_ds.getChildNode(this.root_, opt_canCreate);
<a name="line281"></a>    }
<a name="line282"></a>    else {
<a name="line283"></a>      var possibleListChild = opt_ds.getChildNode(this.root_);
<a name="line284"></a>      if (possibleListChild &amp;&amp; possibleListChild.isList()) {
<a name="line285"></a>        return possibleListChild.getChildNodes();
<a name="line286"></a>      } else {
<a name="line287"></a>        return opt_ds.getChildNodes(this.root_);
<a name="line288"></a>      }
<a name="line289"></a>    }
<a name="line290"></a>  } else {
<a name="line291"></a>    var nextDs = opt_ds.getChildNode(this.root_, opt_canCreate);
<a name="line292"></a>    if (nextDs == null &amp;&amp; opt_selectOne) {
<a name="line293"></a>      return null;
<a name="line294"></a>    } else if (nextDs == null &amp;&amp; !opt_selectOne) {
<a name="line295"></a>      return new goog.ds.EmptyNodeList();
<a name="line296"></a>    }
<a name="line297"></a>    return this.getNext().getNodes_(nextDs, opt_selectOne, opt_canCreate);
<a name="line298"></a>  }
<a name="line299"></a>};
<a name="line300"></a>
<a name="line301"></a>
<a name="line302"></a>/**
<a name="line303"></a> * Whether the expression can be null.
<a name="line304"></a> *
<a name="line305"></a> * @type {boolean}
<a name="line306"></a> * @private
<a name="line307"></a> */
<a name="line308"></a>goog.ds.Expr.prototype.canBeEmpty_ = false;
<a name="line309"></a>
<a name="line310"></a>
<a name="line311"></a>/**
<a name="line312"></a> * The parsed paths in the expression
<a name="line313"></a> *
<a name="line314"></a> * @type {Array.&lt;string&gt;}
<a name="line315"></a> * @private
<a name="line316"></a> */
<a name="line317"></a>goog.ds.Expr.prototype.parts_ = [];
<a name="line318"></a>
<a name="line319"></a>
<a name="line320"></a>/**
<a name="line321"></a> * Number of paths in the expression
<a name="line322"></a> *
<a name="line323"></a> * @type {?number}
<a name="line324"></a> * @private
<a name="line325"></a> */
<a name="line326"></a>goog.ds.Expr.prototype.size_ = null;
<a name="line327"></a>
<a name="line328"></a>
<a name="line329"></a>/**
<a name="line330"></a> * The root node path in the expression
<a name="line331"></a> *
<a name="line332"></a> * @type {string}
<a name="line333"></a> * @private
<a name="line334"></a> */
<a name="line335"></a>goog.ds.Expr.prototype.root_;
<a name="line336"></a>
<a name="line337"></a>
<a name="line338"></a>/**
<a name="line339"></a> * The last path in the expression
<a name="line340"></a> *
<a name="line341"></a> * @type {?string}
<a name="line342"></a> * @private
<a name="line343"></a> */
<a name="line344"></a>goog.ds.Expr.prototype.last_ = null;
<a name="line345"></a>
<a name="line346"></a>
<a name="line347"></a>/**
<a name="line348"></a> * Whether the expression evaluates to current node
<a name="line349"></a> *
<a name="line350"></a> * @type {boolean}
<a name="line351"></a> * @private
<a name="line352"></a> */
<a name="line353"></a>goog.ds.Expr.prototype.isCurrent_ = false;
<a name="line354"></a>
<a name="line355"></a>
<a name="line356"></a>/**
<a name="line357"></a> * Whether the expression is just an attribute
<a name="line358"></a> *
<a name="line359"></a> * @type {boolean}
<a name="line360"></a> * @private
<a name="line361"></a> */
<a name="line362"></a>goog.ds.Expr.prototype.isJustAttribute_ = false;
<a name="line363"></a>
<a name="line364"></a>
<a name="line365"></a>/**
<a name="line366"></a> * Does this expression select all DOM-style child nodes (element and text)
<a name="line367"></a> *
<a name="line368"></a> * @type {boolean}
<a name="line369"></a> * @private
<a name="line370"></a> */
<a name="line371"></a>goog.ds.Expr.prototype.isAllChildNodes_ = false;
<a name="line372"></a>
<a name="line373"></a>
<a name="line374"></a>/**
<a name="line375"></a> * Does this expression select all DOM-style attribute nodes (starts with &#39;@&#39;)
<a name="line376"></a> *
<a name="line377"></a> * @type {boolean}
<a name="line378"></a> * @private
<a name="line379"></a> */
<a name="line380"></a>goog.ds.Expr.prototype.isAllAttributes_ = false;
<a name="line381"></a>
<a name="line382"></a>
<a name="line383"></a>/**
<a name="line384"></a> * Does this expression select all DOM-style element child nodes
<a name="line385"></a> *
<a name="line386"></a> * @type {boolean}
<a name="line387"></a> * @private
<a name="line388"></a> */
<a name="line389"></a>goog.ds.Expr.prototype.isAllElements_ = false;
<a name="line390"></a>
<a name="line391"></a>
<a name="line392"></a>/**
<a name="line393"></a> * The function used by this expression
<a name="line394"></a> *
<a name="line395"></a> * @type {?string}
<a name="line396"></a> * @private
<a name="line397"></a> */
<a name="line398"></a>goog.ds.Expr.prototype.exprFn_ = null;
<a name="line399"></a>
<a name="line400"></a>
<a name="line401"></a>/**
<a name="line402"></a> * Cached value for the parent expression.
<a name="line403"></a> * @type {goog.ds.Expr?}
<a name="line404"></a> * @private
<a name="line405"></a> */
<a name="line406"></a>goog.ds.Expr.prototype.parentExpr_ = null;
<a name="line407"></a>
<a name="line408"></a>
<a name="line409"></a>/**
<a name="line410"></a> * Cached value for the next expression.
<a name="line411"></a> * @type {goog.ds.Expr?}
<a name="line412"></a> * @private
<a name="line413"></a> */
<a name="line414"></a>goog.ds.Expr.prototype.nextExpr_ = null;
<a name="line415"></a>
<a name="line416"></a>
<a name="line417"></a>/**
<a name="line418"></a> * Create an expression from a string, can use cached values
<a name="line419"></a> *
<a name="line420"></a> * @param {string} expr The expression string.
<a name="line421"></a> * @return {goog.ds.Expr} The expression object.
<a name="line422"></a> */
<a name="line423"></a>goog.ds.Expr.create = function(expr) {
<a name="line424"></a>  var result = goog.ds.Expr.cache_[expr];
<a name="line425"></a>
<a name="line426"></a>  if (result == null) {
<a name="line427"></a>    result = new goog.ds.Expr(expr);
<a name="line428"></a>    goog.ds.Expr.cache_[expr] = result;
<a name="line429"></a>  }
<a name="line430"></a>  return result;
<a name="line431"></a>};
<a name="line432"></a>
<a name="line433"></a>
<a name="line434"></a>/**
<a name="line435"></a> * Create an expression from a string, can use cached values
<a name="line436"></a> * Uses hints from related expressions to help in creation
<a name="line437"></a> *
<a name="line438"></a> * @param {?string=} opt_expr The string expression source.
<a name="line439"></a> * @param {Array=} opt_parts Array of the parts of an expression.
<a name="line440"></a> * @param {goog.ds.Expr=} opt_childExpr Optional child of this expression,
<a name="line441"></a> *   passed in as a hint for processing.
<a name="line442"></a> * @param {goog.ds.Expr=} opt_prevExpr Optional preceding expression
<a name="line443"></a> *   (i.e. $A/B/C is previous expression to B/C) passed in as a hint for
<a name="line444"></a> *   processing.
<a name="line445"></a> * @return {goog.ds.Expr} The expression object.
<a name="line446"></a> * @private
<a name="line447"></a> */
<a name="line448"></a>goog.ds.Expr.createInternal_ = function(opt_expr, opt_parts, opt_childExpr,
<a name="line449"></a>    opt_prevExpr) {
<a name="line450"></a>  var expr = opt_expr || opt_parts.join(&#39;/&#39;);
<a name="line451"></a>  var result = goog.ds.Expr.cache_[expr];
<a name="line452"></a>
<a name="line453"></a>  if (result == null) {
<a name="line454"></a>    result = new goog.ds.Expr();
<a name="line455"></a>    result.setSource_(expr, opt_parts, opt_childExpr, opt_prevExpr);
<a name="line456"></a>    goog.ds.Expr.cache_[expr] = result;
<a name="line457"></a>  }
<a name="line458"></a>  return result;
<a name="line459"></a>};
<a name="line460"></a>
<a name="line461"></a>
<a name="line462"></a>/**
<a name="line463"></a> * Cache of pre-parsed expressions
<a name="line464"></a> * @private
<a name="line465"></a> */
<a name="line466"></a>goog.ds.Expr.cache_ = {};
<a name="line467"></a>
<a name="line468"></a>
<a name="line469"></a>/**
<a name="line470"></a> * Commonly used strings in expressions.
<a name="line471"></a> * @enum {string}
<a name="line472"></a> * @private
<a name="line473"></a> */
<a name="line474"></a>goog.ds.Expr.String_ = {
<a name="line475"></a>  SEPARATOR: &#39;/&#39;,
<a name="line476"></a>  CURRENT_NODE_EXPR: &#39;.&#39;,
<a name="line477"></a>  EMPTY_EXPR: &#39;&#39;,
<a name="line478"></a>  ATTRIBUTE_START: &#39;@&#39;,
<a name="line479"></a>  ALL_CHILD_NODES_EXPR: &#39;*|text()&#39;,
<a name="line480"></a>  ALL_ATTRIBUTES_EXPR: &#39;@*&#39;,
<a name="line481"></a>  ALL_ELEMENTS_EXPR: &#39;*&#39;,
<a name="line482"></a>  NAME_EXPR: &#39;name()&#39;,
<a name="line483"></a>  COUNT_EXPR: &#39;count()&#39;,
<a name="line484"></a>  POSITION_EXPR: &#39;position()&#39;,
<a name="line485"></a>  INDEX_START: &#39;[&#39;,
<a name="line486"></a>  INDEX_END: &#39;]&#39;,
<a name="line487"></a>  CAN_BE_EMPTY: &#39;?&#39;
<a name="line488"></a>};
<a name="line489"></a>
<a name="line490"></a>
<a name="line491"></a>/**
<a name="line492"></a> * Standard expressions
<a name="line493"></a> */
<a name="line494"></a>
<a name="line495"></a>
<a name="line496"></a>/**
<a name="line497"></a> * The current node
<a name="line498"></a> */
<a name="line499"></a>goog.ds.Expr.CURRENT = goog.ds.Expr.create(
<a name="line500"></a>    goog.ds.Expr.String_.CURRENT_NODE_EXPR);
<a name="line501"></a>
<a name="line502"></a>
<a name="line503"></a>/**
<a name="line504"></a> * For DOM interop - all DOM child nodes (text + element).
<a name="line505"></a> * Text nodes have dataName #text
<a name="line506"></a> */
<a name="line507"></a>goog.ds.Expr.ALL_CHILD_NODES =
<a name="line508"></a>    goog.ds.Expr.create(goog.ds.Expr.String_.ALL_CHILD_NODES_EXPR);
<a name="line509"></a>
<a name="line510"></a>
<a name="line511"></a>/**
<a name="line512"></a> * For DOM interop - all DOM element child nodes
<a name="line513"></a> */
<a name="line514"></a>goog.ds.Expr.ALL_ELEMENTS =
<a name="line515"></a>    goog.ds.Expr.create(goog.ds.Expr.String_.ALL_ELEMENTS_EXPR);
<a name="line516"></a>
<a name="line517"></a>
<a name="line518"></a>/**
<a name="line519"></a> * For DOM interop - all DOM attribute nodes
<a name="line520"></a> * Attribute nodes have dataName starting with &quot;@&quot;
<a name="line521"></a> */
<a name="line522"></a>goog.ds.Expr.ALL_ATTRIBUTES =
<a name="line523"></a>    goog.ds.Expr.create(goog.ds.Expr.String_.ALL_ATTRIBUTES_EXPR);
<a name="line524"></a>
<a name="line525"></a>
<a name="line526"></a>/**
<a name="line527"></a> * Get the dataName of a node
<a name="line528"></a> */
<a name="line529"></a>goog.ds.Expr.NAME = goog.ds.Expr.create(goog.ds.Expr.String_.NAME_EXPR);
<a name="line530"></a>
<a name="line531"></a>
<a name="line532"></a>/**
<a name="line533"></a> * Get the count of nodes matching an expression
<a name="line534"></a> */
<a name="line535"></a>goog.ds.Expr.COUNT = goog.ds.Expr.create(goog.ds.Expr.String_.COUNT_EXPR);
<a name="line536"></a>
<a name="line537"></a>
<a name="line538"></a>/**
<a name="line539"></a> * Get the position of the &quot;current&quot; node in the current node list
<a name="line540"></a> * This will only apply for datasources that support the concept of a current
<a name="line541"></a> * node (none exist yet). This is similar to XPath position() and concept of
<a name="line542"></a> * current node
<a name="line543"></a> */
<a name="line544"></a>goog.ds.Expr.POSITION = goog.ds.Expr.create(goog.ds.Expr.String_.POSITION_EXPR);
</pre>


</body>
</html>
