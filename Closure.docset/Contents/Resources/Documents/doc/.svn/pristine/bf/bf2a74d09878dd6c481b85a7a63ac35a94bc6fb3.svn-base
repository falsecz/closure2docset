<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>utils.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_uri_utils.js.html">utils.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2008 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Simple utilities for dealing with URI strings.
<a name="line17"></a> *
<a name="line18"></a> * This is intended to be a lightweight alternative to constructing goog.Uri
<a name="line19"></a> * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless
<a name="line20"></a> * of how much of its functionality you use, this is designed to be a set of
<a name="line21"></a> * mostly-independent utilities so that the compiler includes only what is
<a name="line22"></a> * necessary for the task.  Estimated savings of porting is 5k pre-gzip and
<a name="line23"></a> * 1.5k post-gzip.  To ensure the savings remain, future developers should
<a name="line24"></a> * avoid adding new functionality to existing functions, but instead create
<a name="line25"></a> * new ones and factor out shared code.
<a name="line26"></a> *
<a name="line27"></a> * Many of these utilities have limited functionality, tailored to common
<a name="line28"></a> * cases.  The query parameter utilities assume that the parameter keys are
<a name="line29"></a> * already encoded, since most keys are compile-time alphanumeric strings.  The
<a name="line30"></a> * query parameter mutation utilities also do not tolerate fragment identifiers.
<a name="line31"></a> *
<a name="line32"></a> * By design, these functions can be slower than goog.Uri equivalents.
<a name="line33"></a> * Repeated calls to some of functions may be quadratic in behavior for IE,
<a name="line34"></a> * although the effect is somewhat limited given the 2kb limit.
<a name="line35"></a> *
<a name="line36"></a> * One advantage of the limited functionality here is that this approach is
<a name="line37"></a> * less sensitive to differences in URI encodings than goog.Uri, since these
<a name="line38"></a> * functions modify the strings in place, rather than decoding and
<a name="line39"></a> * re-encoding.
<a name="line40"></a> *
<a name="line41"></a> * Uses features of RFC 3986 for parsing/formatting URIs:
<a name="line42"></a> *   http://gbiv.com/protocols/uri/rfc/rfc3986.html
<a name="line43"></a> *
<a name="line44"></a> */
<a name="line45"></a>
<a name="line46"></a>goog.provide(&#39;goog.uri.utils&#39;);
<a name="line47"></a>goog.provide(&#39;goog.uri.utils.ComponentIndex&#39;);
<a name="line48"></a>goog.provide(&#39;goog.uri.utils.QueryArray&#39;);
<a name="line49"></a>goog.provide(&#39;goog.uri.utils.QueryValue&#39;);
<a name="line50"></a>goog.provide(&#39;goog.uri.utils.StandardQueryParam&#39;);
<a name="line51"></a>
<a name="line52"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line53"></a>goog.require(&#39;goog.string&#39;);
<a name="line54"></a>
<a name="line55"></a>
<a name="line56"></a>/**
<a name="line57"></a> * Character codes inlined to avoid object allocations due to charCode.
<a name="line58"></a> * @enum {number}
<a name="line59"></a> * @private
<a name="line60"></a> */
<a name="line61"></a>goog.uri.utils.CharCode_ = {
<a name="line62"></a>  AMPERSAND: 38,
<a name="line63"></a>  EQUAL: 61,
<a name="line64"></a>  HASH: 35,
<a name="line65"></a>  QUESTION: 63
<a name="line66"></a>};
<a name="line67"></a>
<a name="line68"></a>
<a name="line69"></a>/**
<a name="line70"></a> * Builds a URI string from already-encoded parts.
<a name="line71"></a> *
<a name="line72"></a> * No encoding is performed.  Any component may be omitted as either null or
<a name="line73"></a> * undefined.
<a name="line74"></a> *
<a name="line75"></a> * @param {?string=} opt_scheme The scheme such as &#39;http&#39;.
<a name="line76"></a> * @param {?string=} opt_userInfo The user name before the &#39;@&#39;.
<a name="line77"></a> * @param {?string=} opt_domain The domain such as &#39;www.google.com&#39;, already
<a name="line78"></a> *     URI-encoded.
<a name="line79"></a> * @param {(string|number|null)=} opt_port The port number.
<a name="line80"></a> * @param {?string=} opt_path The path, already URI-encoded.  If it is not
<a name="line81"></a> *     empty, it must begin with a slash.
<a name="line82"></a> * @param {?string=} opt_queryData The URI-encoded query data.
<a name="line83"></a> * @param {?string=} opt_fragment The URI-encoded fragment identifier.
<a name="line84"></a> * @return {string} The fully combined URI.
<a name="line85"></a> */
<a name="line86"></a>goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo,
<a name="line87"></a>    opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
<a name="line88"></a>  var out = [];
<a name="line89"></a>
<a name="line90"></a>  if (opt_scheme) {
<a name="line91"></a>    out.push(opt_scheme, &#39;:&#39;);
<a name="line92"></a>  }
<a name="line93"></a>
<a name="line94"></a>  if (opt_domain) {
<a name="line95"></a>    out.push(&#39;//&#39;);
<a name="line96"></a>
<a name="line97"></a>    if (opt_userInfo) {
<a name="line98"></a>      out.push(opt_userInfo, &#39;@&#39;);
<a name="line99"></a>    }
<a name="line100"></a>
<a name="line101"></a>    out.push(opt_domain);
<a name="line102"></a>
<a name="line103"></a>    if (opt_port) {
<a name="line104"></a>      out.push(&#39;:&#39;, opt_port);
<a name="line105"></a>    }
<a name="line106"></a>  }
<a name="line107"></a>
<a name="line108"></a>  if (opt_path) {
<a name="line109"></a>    out.push(opt_path);
<a name="line110"></a>  }
<a name="line111"></a>
<a name="line112"></a>  if (opt_queryData) {
<a name="line113"></a>    out.push(&#39;?&#39;, opt_queryData);
<a name="line114"></a>  }
<a name="line115"></a>
<a name="line116"></a>  if (opt_fragment) {
<a name="line117"></a>    out.push(&#39;#&#39;, opt_fragment);
<a name="line118"></a>  }
<a name="line119"></a>
<a name="line120"></a>  return out.join(&#39;&#39;);
<a name="line121"></a>};
<a name="line122"></a>
<a name="line123"></a>
<a name="line124"></a>/**
<a name="line125"></a> * A regular expression for breaking a URI into its component parts.
<a name="line126"></a> *
<a name="line127"></a> * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
<a name="line128"></a> * As the &quot;first-match-wins&quot; algorithm is identical to the &quot;greedy&quot;
<a name="line129"></a> * disambiguation method used by POSIX regular expressions, it is natural and
<a name="line130"></a> * commonplace to use a regular expression for parsing the potential five
<a name="line131"></a> * components of a URI reference.
<a name="line132"></a> *
<a name="line133"></a> * The following line is the regular expression for breaking-down a
<a name="line134"></a> * well-formed URI reference into its components.
<a name="line135"></a> *
<a name="line136"></a> * &lt;pre&gt;
<a name="line137"></a> * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
<a name="line138"></a> *  12            3  4          5       6  7        8 9
<a name="line139"></a> * &lt;/pre&gt;
<a name="line140"></a> *
<a name="line141"></a> * The numbers in the second line above are only to assist readability; they
<a name="line142"></a> * indicate the reference points for each subexpression (i.e., each paired
<a name="line143"></a> * parenthesis). We refer to the value matched for subexpression &lt;n&gt; as $&lt;n&gt;.
<a name="line144"></a> * For example, matching the above expression to
<a name="line145"></a> * &lt;pre&gt;
<a name="line146"></a> *     http://www.ics.uci.edu/pub/ietf/uri/#Related
<a name="line147"></a> * &lt;/pre&gt;
<a name="line148"></a> * results in the following subexpression matches:
<a name="line149"></a> * &lt;pre&gt;
<a name="line150"></a> *    $1 = http:
<a name="line151"></a> *    $2 = http
<a name="line152"></a> *    $3 = //www.ics.uci.edu
<a name="line153"></a> *    $4 = www.ics.uci.edu
<a name="line154"></a> *    $5 = /pub/ietf/uri/
<a name="line155"></a> *    $6 = &lt;undefined&gt;
<a name="line156"></a> *    $7 = &lt;undefined&gt;
<a name="line157"></a> *    $8 = #Related
<a name="line158"></a> *    $9 = Related
<a name="line159"></a> * &lt;/pre&gt;
<a name="line160"></a> * where &lt;undefined&gt; indicates that the component is not present, as is the
<a name="line161"></a> * case for the query component in the above example. Therefore, we can
<a name="line162"></a> * determine the value of the five components as
<a name="line163"></a> * &lt;pre&gt;
<a name="line164"></a> *    scheme    = $2
<a name="line165"></a> *    authority = $4
<a name="line166"></a> *    path      = $5
<a name="line167"></a> *    query     = $7
<a name="line168"></a> *    fragment  = $9
<a name="line169"></a> * &lt;/pre&gt;
<a name="line170"></a> *
<a name="line171"></a> * The regular expression has been modified slightly to expose the
<a name="line172"></a> * userInfo, domain, and port separately from the authority.
<a name="line173"></a> * The modified version yields
<a name="line174"></a> * &lt;pre&gt;
<a name="line175"></a> *    $1 = http              scheme
<a name="line176"></a> *    $2 = &lt;undefined&gt;       userInfo -\
<a name="line177"></a> *    $3 = www.ics.uci.edu   domain     | authority
<a name="line178"></a> *    $4 = &lt;undefined&gt;       port     -/
<a name="line179"></a> *    $5 = /pub/ietf/uri/    path
<a name="line180"></a> *    $6 = &lt;undefined&gt;       query without ?
<a name="line181"></a> *    $7 = Related           fragment without #
<a name="line182"></a> * &lt;/pre&gt;
<a name="line183"></a> * @type {!RegExp}
<a name="line184"></a> * @private
<a name="line185"></a> */
<a name="line186"></a>goog.uri.utils.splitRe_ = new RegExp(
<a name="line187"></a>    &#39;^&#39; +
<a name="line188"></a>    &#39;(?:&#39; +
<a name="line189"></a>      &#39;([^:/?#.]+)&#39; +                     // scheme - ignore special characters
<a name="line190"></a>                                          // used by other URL parts such as :,
<a name="line191"></a>                                          // ?, /, #, and .
<a name="line192"></a>    &#39;:)?&#39; +
<a name="line193"></a>    &#39;(?://&#39; +
<a name="line194"></a>      &#39;(?:([^/?#]*)@)?&#39; +                 // userInfo
<a name="line195"></a>      &#39;([\\w\\d\\-\\u0100-\\uffff.%]*)&#39; + // domain - restrict to letters,
<a name="line196"></a>                                          // digits, dashes, dots, percent
<a name="line197"></a>                                          // escapes, and unicode characters.
<a name="line198"></a>      &#39;(?::([0-9]+))?&#39; +                  // port
<a name="line199"></a>    &#39;)?&#39; +
<a name="line200"></a>    &#39;([^?#]+)?&#39; +                         // path
<a name="line201"></a>    &#39;(?:\\?([^#]*))?&#39; +                   // query
<a name="line202"></a>    &#39;(?:#(.*))?&#39; +                        // fragment
<a name="line203"></a>    &#39;$&#39;);
<a name="line204"></a>
<a name="line205"></a>
<a name="line206"></a>/**
<a name="line207"></a> * The index of each URI component in the return value of goog.uri.utils.split.
<a name="line208"></a> * @enum {number}
<a name="line209"></a> */
<a name="line210"></a>goog.uri.utils.ComponentIndex = {
<a name="line211"></a>  SCHEME: 1,
<a name="line212"></a>  USER_INFO: 2,
<a name="line213"></a>  DOMAIN: 3,
<a name="line214"></a>  PORT: 4,
<a name="line215"></a>  PATH: 5,
<a name="line216"></a>  QUERY_DATA: 6,
<a name="line217"></a>  FRAGMENT: 7
<a name="line218"></a>};
<a name="line219"></a>
<a name="line220"></a>
<a name="line221"></a>/**
<a name="line222"></a> * Splits a URI into its component parts.
<a name="line223"></a> *
<a name="line224"></a> * Each component can be accessed via the component indices; for example:
<a name="line225"></a> * &lt;pre&gt;
<a name="line226"></a> * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
<a name="line227"></a> * &lt;/pre&gt;
<a name="line228"></a> *
<a name="line229"></a> * @param {string} uri The URI string to examine.
<a name="line230"></a> * @return {!Array.&lt;string|undefined&gt;} Each component still URI-encoded.
<a name="line231"></a> *     Each component that is present will contain the encoded value, whereas
<a name="line232"></a> *     components that are not present will be undefined or empty, depending
<a name="line233"></a> *     on the browser&#39;s regular expression implementation.  Never null, since
<a name="line234"></a> *     arbitrary strings may still look like path names.
<a name="line235"></a> */
<a name="line236"></a>goog.uri.utils.split = function(uri) {
<a name="line237"></a>  // See @return comment -- never null.
<a name="line238"></a>  return /** @type {!Array.&lt;string|undefined&gt;} */ (
<a name="line239"></a>      uri.match(goog.uri.utils.splitRe_));
<a name="line240"></a>};
<a name="line241"></a>
<a name="line242"></a>
<a name="line243"></a>/**
<a name="line244"></a> * @param {?string} uri A possibly null string.
<a name="line245"></a> * @return {?string} The string URI-decoded, or null if uri is null.
<a name="line246"></a> * @private
<a name="line247"></a> */
<a name="line248"></a>goog.uri.utils.decodeIfPossible_ = function(uri) {
<a name="line249"></a>  return uri &amp;&amp; decodeURIComponent(uri);
<a name="line250"></a>};
<a name="line251"></a>
<a name="line252"></a>
<a name="line253"></a>/**
<a name="line254"></a> * Gets a URI component by index.
<a name="line255"></a> *
<a name="line256"></a> * It is preferred to use the getPathEncoded() variety of functions ahead,
<a name="line257"></a> * since they are more readable.
<a name="line258"></a> *
<a name="line259"></a> * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.
<a name="line260"></a> * @param {string} uri The URI to examine.
<a name="line261"></a> * @return {?string} The still-encoded component, or null if the component
<a name="line262"></a> *     is not present.
<a name="line263"></a> * @private
<a name="line264"></a> */
<a name="line265"></a>goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
<a name="line266"></a>  // Convert undefined, null, and empty string into null.
<a name="line267"></a>  return goog.uri.utils.split(uri)[componentIndex] || null;
<a name="line268"></a>};
<a name="line269"></a>
<a name="line270"></a>
<a name="line271"></a>/**
<a name="line272"></a> * @param {string} uri The URI to examine.
<a name="line273"></a> * @return {?string} The protocol or scheme, or null if none.  Does not
<a name="line274"></a> *     include trailing colons or slashes.
<a name="line275"></a> */
<a name="line276"></a>goog.uri.utils.getScheme = function(uri) {
<a name="line277"></a>  return goog.uri.utils.getComponentByIndex_(
<a name="line278"></a>      goog.uri.utils.ComponentIndex.SCHEME, uri);
<a name="line279"></a>};
<a name="line280"></a>
<a name="line281"></a>
<a name="line282"></a>/**
<a name="line283"></a> * @param {string} uri The URI to examine.
<a name="line284"></a> * @return {?string} The user name still encoded, or null if none.
<a name="line285"></a> */
<a name="line286"></a>goog.uri.utils.getUserInfoEncoded = function(uri) {
<a name="line287"></a>  return goog.uri.utils.getComponentByIndex_(
<a name="line288"></a>      goog.uri.utils.ComponentIndex.USER_INFO, uri);
<a name="line289"></a>};
<a name="line290"></a>
<a name="line291"></a>
<a name="line292"></a>/**
<a name="line293"></a> * @param {string} uri The URI to examine.
<a name="line294"></a> * @return {?string} The decoded user info, or null if none.
<a name="line295"></a> */
<a name="line296"></a>goog.uri.utils.getUserInfo = function(uri) {
<a name="line297"></a>  return goog.uri.utils.decodeIfPossible_(
<a name="line298"></a>      goog.uri.utils.getUserInfoEncoded(uri));
<a name="line299"></a>};
<a name="line300"></a>
<a name="line301"></a>
<a name="line302"></a>/**
<a name="line303"></a> * @param {string} uri The URI to examine.
<a name="line304"></a> * @return {?string} The domain name still encoded, or null if none.
<a name="line305"></a> */
<a name="line306"></a>goog.uri.utils.getDomainEncoded = function(uri) {
<a name="line307"></a>  return goog.uri.utils.getComponentByIndex_(
<a name="line308"></a>      goog.uri.utils.ComponentIndex.DOMAIN, uri);
<a name="line309"></a>};
<a name="line310"></a>
<a name="line311"></a>
<a name="line312"></a>/**
<a name="line313"></a> * @param {string} uri The URI to examine.
<a name="line314"></a> * @return {?string} The decoded domain, or null if none.
<a name="line315"></a> */
<a name="line316"></a>goog.uri.utils.getDomain = function(uri) {
<a name="line317"></a>  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
<a name="line318"></a>};
<a name="line319"></a>
<a name="line320"></a>
<a name="line321"></a>/**
<a name="line322"></a> * @param {string} uri The URI to examine.
<a name="line323"></a> * @return {?number} The port number, or null if none.
<a name="line324"></a> */
<a name="line325"></a>goog.uri.utils.getPort = function(uri) {
<a name="line326"></a>  // Coerce to a number.  If the result of getComponentByIndex_ is null or
<a name="line327"></a>  // non-numeric, the number coersion yields NaN.  This will then return
<a name="line328"></a>  // null for all non-numeric cases (though also zero, which isn&#39;t a relevant
<a name="line329"></a>  // port number).
<a name="line330"></a>  return Number(goog.uri.utils.getComponentByIndex_(
<a name="line331"></a>      goog.uri.utils.ComponentIndex.PORT, uri)) || null;
<a name="line332"></a>};
<a name="line333"></a>
<a name="line334"></a>
<a name="line335"></a>/**
<a name="line336"></a> * @param {string} uri The URI to examine.
<a name="line337"></a> * @return {?string} The path still encoded, or null if none. Includes the
<a name="line338"></a> *     leading slash, if any.
<a name="line339"></a> */
<a name="line340"></a>goog.uri.utils.getPathEncoded = function(uri) {
<a name="line341"></a>  return goog.uri.utils.getComponentByIndex_(
<a name="line342"></a>      goog.uri.utils.ComponentIndex.PATH, uri);
<a name="line343"></a>};
<a name="line344"></a>
<a name="line345"></a>
<a name="line346"></a>/**
<a name="line347"></a> * @param {string} uri The URI to examine.
<a name="line348"></a> * @return {?string} The decoded path, or null if none.  Includes the leading
<a name="line349"></a> *     slash, if any.
<a name="line350"></a> */
<a name="line351"></a>goog.uri.utils.getPath = function(uri) {
<a name="line352"></a>  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
<a name="line353"></a>};
<a name="line354"></a>
<a name="line355"></a>
<a name="line356"></a>/**
<a name="line357"></a> * @param {string} uri The URI to examine.
<a name="line358"></a> * @return {?string} The query data still encoded, or null if none.  Does not
<a name="line359"></a> *     include the question mark itself.
<a name="line360"></a> */
<a name="line361"></a>goog.uri.utils.getQueryData = function(uri) {
<a name="line362"></a>  return goog.uri.utils.getComponentByIndex_(
<a name="line363"></a>      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
<a name="line364"></a>};
<a name="line365"></a>
<a name="line366"></a>
<a name="line367"></a>/**
<a name="line368"></a> * @param {string} uri The URI to examine.
<a name="line369"></a> * @return {?string} The fragment identifier, or null if none.  Does not
<a name="line370"></a> *     include the hash mark itself.
<a name="line371"></a> */
<a name="line372"></a>goog.uri.utils.getFragmentEncoded = function(uri) {
<a name="line373"></a>  // The hash mark may not appear in any other part of the URL.
<a name="line374"></a>  var hashIndex = uri.indexOf(&#39;#&#39;);
<a name="line375"></a>  return hashIndex &lt; 0 ? null : uri.substr(hashIndex + 1);
<a name="line376"></a>};
<a name="line377"></a>
<a name="line378"></a>
<a name="line379"></a>/**
<a name="line380"></a> * @param {string} uri The URI to examine.
<a name="line381"></a> * @param {?string} fragment The encoded fragment identifier, or null if none.
<a name="line382"></a> *     Does not include the hash mark itself.
<a name="line383"></a> * @return {string} The URI with the fragment set.
<a name="line384"></a> */
<a name="line385"></a>goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
<a name="line386"></a>  return goog.uri.utils.removeFragment(uri) + (fragment ? &#39;#&#39; + fragment : &#39;&#39;);
<a name="line387"></a>};
<a name="line388"></a>
<a name="line389"></a>
<a name="line390"></a>/**
<a name="line391"></a> * @param {string} uri The URI to examine.
<a name="line392"></a> * @return {?string} The decoded fragment identifier, or null if none.  Does
<a name="line393"></a> *     not include the hash mark.
<a name="line394"></a> */
<a name="line395"></a>goog.uri.utils.getFragment = function(uri) {
<a name="line396"></a>  return goog.uri.utils.decodeIfPossible_(
<a name="line397"></a>      goog.uri.utils.getFragmentEncoded(uri));
<a name="line398"></a>};
<a name="line399"></a>
<a name="line400"></a>
<a name="line401"></a>/**
<a name="line402"></a> * Extracts everything up to the port of the URI.
<a name="line403"></a> * @param {string} uri The URI string.
<a name="line404"></a> * @return {string} Everything up to and including the port.
<a name="line405"></a> */
<a name="line406"></a>goog.uri.utils.getHost = function(uri) {
<a name="line407"></a>  var pieces = goog.uri.utils.split(uri);
<a name="line408"></a>  return goog.uri.utils.buildFromEncodedParts(
<a name="line409"></a>      pieces[goog.uri.utils.ComponentIndex.SCHEME],
<a name="line410"></a>      pieces[goog.uri.utils.ComponentIndex.USER_INFO],
<a name="line411"></a>      pieces[goog.uri.utils.ComponentIndex.DOMAIN],
<a name="line412"></a>      pieces[goog.uri.utils.ComponentIndex.PORT]);
<a name="line413"></a>};
<a name="line414"></a>
<a name="line415"></a>
<a name="line416"></a>/**
<a name="line417"></a> * Extracts the path of the URL and everything after.
<a name="line418"></a> * @param {string} uri The URI string.
<a name="line419"></a> * @return {string} The URI, starting at the path and including the query
<a name="line420"></a> *     parameters and fragment identifier.
<a name="line421"></a> */
<a name="line422"></a>goog.uri.utils.getPathAndAfter = function(uri) {
<a name="line423"></a>  var pieces = goog.uri.utils.split(uri);
<a name="line424"></a>  return goog.uri.utils.buildFromEncodedParts(null, null, null, null,
<a name="line425"></a>      pieces[goog.uri.utils.ComponentIndex.PATH],
<a name="line426"></a>      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],
<a name="line427"></a>      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
<a name="line428"></a>};
<a name="line429"></a>
<a name="line430"></a>
<a name="line431"></a>/**
<a name="line432"></a> * Gets the URI with the fragment identifier removed.
<a name="line433"></a> * @param {string} uri The URI to examine.
<a name="line434"></a> * @return {string} Everything preceding the hash mark.
<a name="line435"></a> */
<a name="line436"></a>goog.uri.utils.removeFragment = function(uri) {
<a name="line437"></a>  // The hash mark may not appear in any other part of the URL.
<a name="line438"></a>  var hashIndex = uri.indexOf(&#39;#&#39;);
<a name="line439"></a>  return hashIndex &lt; 0 ? uri : uri.substr(0, hashIndex);
<a name="line440"></a>};
<a name="line441"></a>
<a name="line442"></a>
<a name="line443"></a>/**
<a name="line444"></a> * Ensures that two URI&#39;s have the exact same domain, scheme, and port.
<a name="line445"></a> *
<a name="line446"></a> * Unlike the version in goog.Uri, this checks protocol, and therefore is
<a name="line447"></a> * suitable for checking against the browser&#39;s same-origin policy.
<a name="line448"></a> *
<a name="line449"></a> * @param {string} uri1 The first URI.
<a name="line450"></a> * @param {string} uri2 The second URI.
<a name="line451"></a> * @return {boolean} Whether they have the same domain and port.
<a name="line452"></a> */
<a name="line453"></a>goog.uri.utils.haveSameDomain = function(uri1, uri2) {
<a name="line454"></a>  var pieces1 = goog.uri.utils.split(uri1);
<a name="line455"></a>  var pieces2 = goog.uri.utils.split(uri2);
<a name="line456"></a>  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==
<a name="line457"></a>             pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &amp;&amp;
<a name="line458"></a>         pieces1[goog.uri.utils.ComponentIndex.SCHEME] ==
<a name="line459"></a>             pieces2[goog.uri.utils.ComponentIndex.SCHEME] &amp;&amp;
<a name="line460"></a>         pieces1[goog.uri.utils.ComponentIndex.PORT] ==
<a name="line461"></a>             pieces2[goog.uri.utils.ComponentIndex.PORT];
<a name="line462"></a>};
<a name="line463"></a>
<a name="line464"></a>
<a name="line465"></a>/**
<a name="line466"></a> * Asserts that there are no fragment or query identifiers, only in uncompiled
<a name="line467"></a> * mode.
<a name="line468"></a> * @param {string} uri The URI to examine.
<a name="line469"></a> * @private
<a name="line470"></a> */
<a name="line471"></a>goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
<a name="line472"></a>  // NOTE: would use goog.asserts here, but jscompiler doesn&#39;t know that
<a name="line473"></a>  // indexOf has no side effects.
<a name="line474"></a>  if (goog.DEBUG &amp;&amp; (uri.indexOf(&#39;#&#39;) &gt;= 0 || uri.indexOf(&#39;?&#39;) &gt;= 0)) {
<a name="line475"></a>    throw Error(&#39;goog.uri.utils: Fragment or query identifiers are not &#39; +
<a name="line476"></a>        &#39;supported: [&#39; + uri + &#39;]&#39;);
<a name="line477"></a>  }
<a name="line478"></a>};
<a name="line479"></a>
<a name="line480"></a>
<a name="line481"></a>/**
<a name="line482"></a> * Supported query parameter values by the parameter serializing utilities.
<a name="line483"></a> *
<a name="line484"></a> * If a value is null or undefined, the key-value pair is skipped, as an easy
<a name="line485"></a> * way to omit parameters conditionally.  Non-array parameters are converted
<a name="line486"></a> * to a string and URI encoded.  Array values are expanded into multiple
<a name="line487"></a> * &amp;key=value pairs, with each element stringized and URI-encoded.
<a name="line488"></a> *
<a name="line489"></a> * @typedef {*}
<a name="line490"></a> */
<a name="line491"></a>goog.uri.utils.QueryValue;
<a name="line492"></a>
<a name="line493"></a>
<a name="line494"></a>/**
<a name="line495"></a> * An array representing a set of query parameters with alternating keys
<a name="line496"></a> * and values.
<a name="line497"></a> *
<a name="line498"></a> * Keys are assumed to be URI encoded already and live at even indices.  See
<a name="line499"></a> * goog.uri.utils.QueryValue for details on how parameter values are encoded.
<a name="line500"></a> *
<a name="line501"></a> * Example:
<a name="line502"></a> * &lt;pre&gt;
<a name="line503"></a> * var data = [
<a name="line504"></a> *   // Simple param: ?name=BobBarker
<a name="line505"></a> *   &#39;name&#39;, &#39;BobBarker&#39;,
<a name="line506"></a> *   // Conditional param -- may be omitted entirely.
<a name="line507"></a> *   &#39;specialDietaryNeeds&#39;, hasDietaryNeeds() ? getDietaryNeeds() : null,
<a name="line508"></a> *   // Multi-valued param: &amp;house=LosAngeles&amp;house=NewYork&amp;house=null
<a name="line509"></a> *   &#39;house&#39;, [&#39;LosAngeles&#39;, &#39;NewYork&#39;, null]
<a name="line510"></a> * ];
<a name="line511"></a> * &lt;/pre&gt;
<a name="line512"></a> *
<a name="line513"></a> * @typedef {!Array.&lt;string|goog.uri.utils.QueryValue&gt;}
<a name="line514"></a> */
<a name="line515"></a>goog.uri.utils.QueryArray;
<a name="line516"></a>
<a name="line517"></a>
<a name="line518"></a>/**
<a name="line519"></a> * Appends a URI and query data in a string buffer with special preconditions.
<a name="line520"></a> *
<a name="line521"></a> * Internal implementation utility, performing very few object allocations.
<a name="line522"></a> *
<a name="line523"></a> * @param {!Array.&lt;string|undefined&gt;} buffer A string buffer.  The first element
<a name="line524"></a> *     must be the base URI, and may have a fragment identifier.  If the array
<a name="line525"></a> *     contains more than one element, the second element must be an ampersand,
<a name="line526"></a> *     and may be overwritten, depending on the base URI.  Undefined elements
<a name="line527"></a> *     are treated as empty-string.
<a name="line528"></a> * @return {string} The concatenated URI and query data.
<a name="line529"></a> * @private
<a name="line530"></a> */
<a name="line531"></a>goog.uri.utils.appendQueryData_ = function(buffer) {
<a name="line532"></a>  if (buffer[1]) {
<a name="line533"></a>    // At least one query parameter was added.  We need to check the
<a name="line534"></a>    // punctuation mark, which is currently an ampersand, and also make sure
<a name="line535"></a>    // there aren&#39;t any interfering fragment identifiers.
<a name="line536"></a>    var baseUri = /** @type {string} */ (buffer[0]);
<a name="line537"></a>    var hashIndex = baseUri.indexOf(&#39;#&#39;);
<a name="line538"></a>    if (hashIndex &gt;= 0) {
<a name="line539"></a>      // Move the fragment off the base part of the URI into the end.
<a name="line540"></a>      buffer.push(baseUri.substr(hashIndex));
<a name="line541"></a>      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
<a name="line542"></a>    }
<a name="line543"></a>    var questionIndex = baseUri.indexOf(&#39;?&#39;);
<a name="line544"></a>    if (questionIndex &lt; 0) {
<a name="line545"></a>      // No question mark, so we need a question mark instead of an ampersand.
<a name="line546"></a>      buffer[1] = &#39;?&#39;;
<a name="line547"></a>    } else if (questionIndex == baseUri.length - 1) {
<a name="line548"></a>      // Question mark is the very last character of the existing URI, so don&#39;t
<a name="line549"></a>      // append an additional delimiter.
<a name="line550"></a>      buffer[1] = undefined;
<a name="line551"></a>    }
<a name="line552"></a>  }
<a name="line553"></a>
<a name="line554"></a>  return buffer.join(&#39;&#39;);
<a name="line555"></a>};
<a name="line556"></a>
<a name="line557"></a>
<a name="line558"></a>/**
<a name="line559"></a> * Appends key=value pairs to an array, supporting multi-valued objects.
<a name="line560"></a> * @param {string} key The key prefix.
<a name="line561"></a> * @param {goog.uri.utils.QueryValue} value The value to serialize.
<a name="line562"></a> * @param {!Array.&lt;string&gt;} pairs The array to which the &#39;key=value&#39; strings
<a name="line563"></a> *     should be appended.
<a name="line564"></a> * @private
<a name="line565"></a> */
<a name="line566"></a>goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
<a name="line567"></a>  if (goog.isArray(value)) {
<a name="line568"></a>    // It&#39;s an array, so append all elements.  Here, we must convince
<a name="line569"></a>    // jscompiler that it is, indeed, an array.
<a name="line570"></a>    value = /** @type {Array} */ (value);
<a name="line571"></a>    for (var j = 0; j &lt; value.length; j++) {
<a name="line572"></a>      pairs.push(&#39;&amp;&#39;, key);
<a name="line573"></a>      // Check for empty string, null and undefined get encoded
<a name="line574"></a>      // into the url as literal strings
<a name="line575"></a>      if (value[j] !== &#39;&#39;) {
<a name="line576"></a>        pairs.push(&#39;=&#39;, goog.string.urlEncode(value[j]));
<a name="line577"></a>      }
<a name="line578"></a>    }
<a name="line579"></a>  } else if (value != null) {
<a name="line580"></a>    // Not null or undefined, so safe to append.
<a name="line581"></a>    pairs.push(&#39;&amp;&#39;, key);
<a name="line582"></a>    // Check for empty string, null and undefined get encoded
<a name="line583"></a>    // into the url as literal strings
<a name="line584"></a>    if (value !== &#39;&#39;) {
<a name="line585"></a>      pairs.push(&#39;=&#39;, goog.string.urlEncode(value));
<a name="line586"></a>    }
<a name="line587"></a>  }
<a name="line588"></a>};
<a name="line589"></a>
<a name="line590"></a>
<a name="line591"></a>/**
<a name="line592"></a> * Builds a buffer of query data from a sequence of alternating keys and values.
<a name="line593"></a> *
<a name="line594"></a> * @param {!Array.&lt;string|undefined&gt;} buffer A string buffer to append to.  The
<a name="line595"></a> *     first element appended will be an &#39;&amp;&#39;, and may be replaced by the caller.
<a name="line596"></a> * @param {goog.uri.utils.QueryArray|Arguments} keysAndValues An array with
<a name="line597"></a> *     alternating keys and values -- see the typedef.
<a name="line598"></a> * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.
<a name="line599"></a> * @return {!Array.&lt;string|undefined&gt;} The buffer argument.
<a name="line600"></a> * @private
<a name="line601"></a> */
<a name="line602"></a>goog.uri.utils.buildQueryDataBuffer_ = function(
<a name="line603"></a>    buffer, keysAndValues, opt_startIndex) {
<a name="line604"></a>  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0),
<a name="line605"></a>      0) % 2 == 0, &#39;goog.uri.utils: Key/value lists must be even in length.&#39;);
<a name="line606"></a>
<a name="line607"></a>  for (var i = opt_startIndex || 0; i &lt; keysAndValues.length; i += 2) {
<a name="line608"></a>    goog.uri.utils.appendKeyValuePairs_(
<a name="line609"></a>        keysAndValues[i], keysAndValues[i + 1], buffer);
<a name="line610"></a>  }
<a name="line611"></a>
<a name="line612"></a>  return buffer;
<a name="line613"></a>};
<a name="line614"></a>
<a name="line615"></a>
<a name="line616"></a>/**
<a name="line617"></a> * Builds a query data string from a sequence of alternating keys and values.
<a name="line618"></a> * Currently generates &quot;&amp;key&amp;&quot; for empty args.
<a name="line619"></a> *
<a name="line620"></a> * @param {goog.uri.utils.QueryArray} keysAndValues Alternating keys and
<a name="line621"></a> *     values.  See the typedef.
<a name="line622"></a> * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.
<a name="line623"></a> * @return {string} The encoded query string, in the for &#39;a=1&amp;b=2&#39;.
<a name="line624"></a> */
<a name="line625"></a>goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
<a name="line626"></a>  var buffer = goog.uri.utils.buildQueryDataBuffer_(
<a name="line627"></a>      [], keysAndValues, opt_startIndex);
<a name="line628"></a>  buffer[0] = &#39;&#39;; // Remove the leading ampersand.
<a name="line629"></a>  return buffer.join(&#39;&#39;);
<a name="line630"></a>};
<a name="line631"></a>
<a name="line632"></a>
<a name="line633"></a>/**
<a name="line634"></a> * Builds a buffer of query data from a map.
<a name="line635"></a> *
<a name="line636"></a> * @param {!Array.&lt;string|undefined&gt;} buffer A string buffer to append to.  The
<a name="line637"></a> *     first element appended will be an &#39;&amp;&#39;, and may be replaced by the caller.
<a name="line638"></a> * @param {Object.&lt;goog.uri.utils.QueryValue&gt;} map An object where keys are
<a name="line639"></a> *     URI-encoded parameter keys, and the values conform to the contract
<a name="line640"></a> *     specified in the goog.uri.utils.QueryValue typedef.
<a name="line641"></a> * @return {!Array.&lt;string|undefined&gt;} The buffer argument.
<a name="line642"></a> * @private
<a name="line643"></a> */
<a name="line644"></a>goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
<a name="line645"></a>  for (var key in map) {
<a name="line646"></a>    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
<a name="line647"></a>  }
<a name="line648"></a>
<a name="line649"></a>  return buffer;
<a name="line650"></a>};
<a name="line651"></a>
<a name="line652"></a>
<a name="line653"></a>/**
<a name="line654"></a> * Builds a query data string from a map.
<a name="line655"></a> * Currently generates &quot;&amp;key&amp;&quot; for empty args.
<a name="line656"></a> *
<a name="line657"></a> * @param {Object} map An object where keys are URI-encoded parameter keys,
<a name="line658"></a> *     and the values are arbitrary types or arrays.  Keys with a null value
<a name="line659"></a> *     are dropped.
<a name="line660"></a> * @return {string} The encoded query string, in the for &#39;a=1&amp;b=2&#39;.
<a name="line661"></a> */
<a name="line662"></a>goog.uri.utils.buildQueryDataFromMap = function(map) {
<a name="line663"></a>  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
<a name="line664"></a>  buffer[0] = &#39;&#39;;
<a name="line665"></a>  return buffer.join(&#39;&#39;);
<a name="line666"></a>};
<a name="line667"></a>
<a name="line668"></a>
<a name="line669"></a>/**
<a name="line670"></a> * Appends URI parameters to an existing URI.
<a name="line671"></a> *
<a name="line672"></a> * The variable arguments may contain alternating keys and values.  Keys are
<a name="line673"></a> * assumed to be already URI encoded.  The values should not be URI-encoded,
<a name="line674"></a> * and will instead be encoded by this function.
<a name="line675"></a> * &lt;pre&gt;
<a name="line676"></a> * appendParams(&#39;http://www.foo.com?existing=true&#39;,
<a name="line677"></a> *     &#39;key1&#39;, &#39;value1&#39;,
<a name="line678"></a> *     &#39;key2&#39;, &#39;value?willBeEncoded&#39;,
<a name="line679"></a> *     &#39;key3&#39;, [&#39;valueA&#39;, &#39;valueB&#39;, &#39;valueC&#39;],
<a name="line680"></a> *     &#39;key4&#39;, null);
<a name="line681"></a> * result: &#39;http://www.foo.com?existing=true&amp;&#39; +
<a name="line682"></a> *     &#39;key1=value1&amp;&#39; +
<a name="line683"></a> *     &#39;key2=value%3FwillBeEncoded&amp;&#39; +
<a name="line684"></a> *     &#39;key3=valueA&amp;key3=valueB&amp;key3=valueC&#39;
<a name="line685"></a> * &lt;/pre&gt;
<a name="line686"></a> *
<a name="line687"></a> * A single call to this function will not exhibit quadratic behavior in IE,
<a name="line688"></a> * whereas multiple repeated calls may, although the effect is limited by
<a name="line689"></a> * fact that URL&#39;s generally can&#39;t exceed 2kb.
<a name="line690"></a> *
<a name="line691"></a> * @param {string} uri The original URI, which may already have query data.
<a name="line692"></a> * @param {...(goog.uri.utils.QueryArray|string|goog.uri.utils.QueryValue)} var_args
<a name="line693"></a> *     An array or argument list conforming to goog.uri.utils.QueryArray.
<a name="line694"></a> * @return {string} The URI with all query parameters added.
<a name="line695"></a> */
<a name="line696"></a>goog.uri.utils.appendParams = function(uri, var_args) {
<a name="line697"></a>  return goog.uri.utils.appendQueryData_(
<a name="line698"></a>      arguments.length == 2 ?
<a name="line699"></a>      goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) :
<a name="line700"></a>      goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
<a name="line701"></a>};
<a name="line702"></a>
<a name="line703"></a>
<a name="line704"></a>/**
<a name="line705"></a> * Appends query parameters from a map.
<a name="line706"></a> *
<a name="line707"></a> * @param {string} uri The original URI, which may already have query data.
<a name="line708"></a> * @param {Object} map An object where keys are URI-encoded parameter keys,
<a name="line709"></a> *     and the values are arbitrary types or arrays.  Keys with a null value
<a name="line710"></a> *     are dropped.
<a name="line711"></a> * @return {string} The new parameters.
<a name="line712"></a> */
<a name="line713"></a>goog.uri.utils.appendParamsFromMap = function(uri, map) {
<a name="line714"></a>  return goog.uri.utils.appendQueryData_(
<a name="line715"></a>      goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
<a name="line716"></a>};
<a name="line717"></a>
<a name="line718"></a>
<a name="line719"></a>/**
<a name="line720"></a> * Appends a single URI parameter.
<a name="line721"></a> *
<a name="line722"></a> * Repeated calls to this can exhibit quadratic behavior in IE6 due to the
<a name="line723"></a> * way string append works, though it should be limited given the 2kb limit.
<a name="line724"></a> *
<a name="line725"></a> * @param {string} uri The original URI, which may already have query data.
<a name="line726"></a> * @param {string} key The key, which must already be URI encoded.
<a name="line727"></a> * @param {*} value The value, which will be stringized and encoded (assumed
<a name="line728"></a> *     not already to be encoded).
<a name="line729"></a> * @return {string} The URI with the query parameter added.
<a name="line730"></a> */
<a name="line731"></a>goog.uri.utils.appendParam = function(uri, key, value) {
<a name="line732"></a>  return goog.uri.utils.appendQueryData_(
<a name="line733"></a>      [uri, &#39;&amp;&#39;, key, &#39;=&#39;, goog.string.urlEncode(value)]);
<a name="line734"></a>};
<a name="line735"></a>
<a name="line736"></a>
<a name="line737"></a>/**
<a name="line738"></a> * Finds the next instance of a query parameter with the specified name.
<a name="line739"></a> *
<a name="line740"></a> * Does not instantiate any objects.
<a name="line741"></a> *
<a name="line742"></a> * @param {string} uri The URI to search.  May contain a fragment identifier
<a name="line743"></a> *     if opt_hashIndex is specified.
<a name="line744"></a> * @param {number} startIndex The index to begin searching for the key at.  A
<a name="line745"></a> *     match may be found even if this is one character after the ampersand.
<a name="line746"></a> * @param {string} keyEncoded The URI-encoded key.
<a name="line747"></a> * @param {number} hashOrEndIndex Index to stop looking at.  If a hash
<a name="line748"></a> *     mark is present, it should be its index, otherwise it should be the
<a name="line749"></a> *     length of the string.
<a name="line750"></a> * @return {number} The position of the first character in the key&#39;s name,
<a name="line751"></a> *     immediately after either a question mark or a dot.
<a name="line752"></a> * @private
<a name="line753"></a> */
<a name="line754"></a>goog.uri.utils.findParam_ = function(
<a name="line755"></a>    uri, startIndex, keyEncoded, hashOrEndIndex) {
<a name="line756"></a>  var index = startIndex;
<a name="line757"></a>  var keyLength = keyEncoded.length;
<a name="line758"></a>
<a name="line759"></a>  // Search for the key itself and post-filter for surronuding punctuation,
<a name="line760"></a>  // rather than expensively building a regexp.
<a name="line761"></a>  while ((index = uri.indexOf(keyEncoded, index)) &gt;= 0 &amp;&amp;
<a name="line762"></a>      index &lt; hashOrEndIndex) {
<a name="line763"></a>    var precedingChar = uri.charCodeAt(index - 1);
<a name="line764"></a>    // Ensure that the preceding character is &#39;&amp;&#39; or &#39;?&#39;.
<a name="line765"></a>    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND ||
<a name="line766"></a>        precedingChar == goog.uri.utils.CharCode_.QUESTION) {
<a name="line767"></a>      // Ensure the following character is &#39;&amp;&#39;, &#39;=&#39;, &#39;#&#39;, or NaN
<a name="line768"></a>      // (end of string).
<a name="line769"></a>      var followingChar = uri.charCodeAt(index + keyLength);
<a name="line770"></a>      if (!followingChar ||
<a name="line771"></a>          followingChar == goog.uri.utils.CharCode_.EQUAL ||
<a name="line772"></a>          followingChar == goog.uri.utils.CharCode_.AMPERSAND ||
<a name="line773"></a>          followingChar == goog.uri.utils.CharCode_.HASH) {
<a name="line774"></a>        return index;
<a name="line775"></a>      }
<a name="line776"></a>    }
<a name="line777"></a>    index += keyLength + 1;
<a name="line778"></a>  }
<a name="line779"></a>
<a name="line780"></a>  return -1;
<a name="line781"></a>};
<a name="line782"></a>
<a name="line783"></a>
<a name="line784"></a>/**
<a name="line785"></a> * Regular expression for finding a hash mark or end of string.
<a name="line786"></a> * @type {RegExp}
<a name="line787"></a> * @private
<a name="line788"></a> */
<a name="line789"></a>goog.uri.utils.hashOrEndRe_ = /#|$/;
<a name="line790"></a>
<a name="line791"></a>
<a name="line792"></a>/**
<a name="line793"></a> * Determines if the URI contains a specific key.
<a name="line794"></a> *
<a name="line795"></a> * Performs no object instantiations.
<a name="line796"></a> *
<a name="line797"></a> * @param {string} uri The URI to process.  May contain a fragment
<a name="line798"></a> *     identifier.
<a name="line799"></a> * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.
<a name="line800"></a> * @return {boolean} Whether the key is present.
<a name="line801"></a> */
<a name="line802"></a>goog.uri.utils.hasParam = function(uri, keyEncoded) {
<a name="line803"></a>  return goog.uri.utils.findParam_(uri, 0, keyEncoded,
<a name="line804"></a>      uri.search(goog.uri.utils.hashOrEndRe_)) &gt;= 0;
<a name="line805"></a>};
<a name="line806"></a>
<a name="line807"></a>
<a name="line808"></a>/**
<a name="line809"></a> * Gets the first value of a query parameter.
<a name="line810"></a> * @param {string} uri The URI to process.  May contain a fragment.
<a name="line811"></a> * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.
<a name="line812"></a> * @return {?string} The first value of the parameter (URI-decoded), or null
<a name="line813"></a> *     if the parameter is not found.
<a name="line814"></a> */
<a name="line815"></a>goog.uri.utils.getParamValue = function(uri, keyEncoded) {
<a name="line816"></a>  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
<a name="line817"></a>  var foundIndex = goog.uri.utils.findParam_(
<a name="line818"></a>      uri, 0, keyEncoded, hashOrEndIndex);
<a name="line819"></a>
<a name="line820"></a>  if (foundIndex &lt; 0) {
<a name="line821"></a>    return null;
<a name="line822"></a>  } else {
<a name="line823"></a>    var endPosition = uri.indexOf(&#39;&amp;&#39;, foundIndex);
<a name="line824"></a>    if (endPosition &lt; 0 || endPosition &gt; hashOrEndIndex) {
<a name="line825"></a>      endPosition = hashOrEndIndex;
<a name="line826"></a>    }
<a name="line827"></a>    // Progress forth to the end of the &quot;key=&quot; or &quot;key&amp;&quot; substring.
<a name="line828"></a>    foundIndex += keyEncoded.length + 1;
<a name="line829"></a>    // Use substr, because it (unlike substring) will return empty string
<a name="line830"></a>    // if foundIndex &gt; endPosition.
<a name="line831"></a>    return goog.string.urlDecode(
<a name="line832"></a>        uri.substr(foundIndex, endPosition - foundIndex));
<a name="line833"></a>  }
<a name="line834"></a>};
<a name="line835"></a>
<a name="line836"></a>
<a name="line837"></a>/**
<a name="line838"></a> * Gets all values of a query parameter.
<a name="line839"></a> * @param {string} uri The URI to process.  May contain a framgnet.
<a name="line840"></a> * @param {string} keyEncoded The URI-encoded key.  Case-snsitive.
<a name="line841"></a> * @return {!Array.&lt;string&gt;} All URI-decoded values with the given key.
<a name="line842"></a> *     If the key is not found, this will have length 0, but never be null.
<a name="line843"></a> */
<a name="line844"></a>goog.uri.utils.getParamValues = function(uri, keyEncoded) {
<a name="line845"></a>  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
<a name="line846"></a>  var position = 0;
<a name="line847"></a>  var foundIndex;
<a name="line848"></a>  var result = [];
<a name="line849"></a>
<a name="line850"></a>  while ((foundIndex = goog.uri.utils.findParam_(
<a name="line851"></a>      uri, position, keyEncoded, hashOrEndIndex)) &gt;= 0) {
<a name="line852"></a>    // Find where this parameter ends, either the &#39;&amp;&#39; or the end of the
<a name="line853"></a>    // query parameters.
<a name="line854"></a>    position = uri.indexOf(&#39;&amp;&#39;, foundIndex);
<a name="line855"></a>    if (position &lt; 0 || position &gt; hashOrEndIndex) {
<a name="line856"></a>      position = hashOrEndIndex;
<a name="line857"></a>    }
<a name="line858"></a>
<a name="line859"></a>    // Progress forth to the end of the &quot;key=&quot; or &quot;key&amp;&quot; substring.
<a name="line860"></a>    foundIndex += keyEncoded.length + 1;
<a name="line861"></a>    // Use substr, because it (unlike substring) will return empty string
<a name="line862"></a>    // if foundIndex &gt; position.
<a name="line863"></a>    result.push(goog.string.urlDecode(uri.substr(
<a name="line864"></a>        foundIndex, position - foundIndex)));
<a name="line865"></a>  }
<a name="line866"></a>
<a name="line867"></a>  return result;
<a name="line868"></a>};
<a name="line869"></a>
<a name="line870"></a>
<a name="line871"></a>/**
<a name="line872"></a> * Regexp to find trailing question marks and ampersands.
<a name="line873"></a> * @type {RegExp}
<a name="line874"></a> * @private
<a name="line875"></a> */
<a name="line876"></a>goog.uri.utils.trailingQueryPunctuationRe_ = /[?&amp;]($|#)/;
<a name="line877"></a>
<a name="line878"></a>
<a name="line879"></a>/**
<a name="line880"></a> * Removes all instances of a query parameter.
<a name="line881"></a> * @param {string} uri The URI to process.  Must not contain a fragment.
<a name="line882"></a> * @param {string} keyEncoded The URI-encoded key.
<a name="line883"></a> * @return {string} The URI with all instances of the parameter removed.
<a name="line884"></a> */
<a name="line885"></a>goog.uri.utils.removeParam = function(uri, keyEncoded) {
<a name="line886"></a>  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
<a name="line887"></a>  var position = 0;
<a name="line888"></a>  var foundIndex;
<a name="line889"></a>  var buffer = [];
<a name="line890"></a>
<a name="line891"></a>  // Look for a query parameter.
<a name="line892"></a>  while ((foundIndex = goog.uri.utils.findParam_(
<a name="line893"></a>      uri, position, keyEncoded, hashOrEndIndex)) &gt;= 0) {
<a name="line894"></a>    // Get the portion of the query string up to, but not including, the ?
<a name="line895"></a>    // or &amp; starting the parameter.
<a name="line896"></a>    buffer.push(uri.substring(position, foundIndex));
<a name="line897"></a>    // Progress to immediately after the &#39;&amp;&#39;.  If not found, go to the end.
<a name="line898"></a>    // Avoid including the hash mark.
<a name="line899"></a>    position = Math.min((uri.indexOf(&#39;&amp;&#39;, foundIndex) + 1) || hashOrEndIndex,
<a name="line900"></a>        hashOrEndIndex);
<a name="line901"></a>  }
<a name="line902"></a>
<a name="line903"></a>  // Append everything that is remaining.
<a name="line904"></a>  buffer.push(uri.substr(position));
<a name="line905"></a>
<a name="line906"></a>  // Join the buffer, and remove trailing punctuation that remains.
<a name="line907"></a>  return buffer.join(&#39;&#39;).replace(
<a name="line908"></a>      goog.uri.utils.trailingQueryPunctuationRe_, &#39;$1&#39;);
<a name="line909"></a>};
<a name="line910"></a>
<a name="line911"></a>
<a name="line912"></a>/**
<a name="line913"></a> * Replaces all existing definitions of a parameter with a single definition.
<a name="line914"></a> *
<a name="line915"></a> * Repeated calls to this can exhibit quadratic behavior in IE6 due to the
<a name="line916"></a> * way string append works, though it should be limited given the 2kb limit.
<a name="line917"></a> *
<a name="line918"></a> * @param {string} uri The original URI, which may already have query data.
<a name="line919"></a> * @param {string} keyEncoded The key, which must already be URI encoded.
<a name="line920"></a> * @param {*} value The value, which will be stringized and encoded (assumed
<a name="line921"></a> *     not already to be encoded).
<a name="line922"></a> * @return {string} The URI with the query parameter added.
<a name="line923"></a> */
<a name="line924"></a>goog.uri.utils.setParam = function(uri, keyEncoded, value) {
<a name="line925"></a>  return goog.uri.utils.appendParam(
<a name="line926"></a>      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
<a name="line927"></a>};
<a name="line928"></a>
<a name="line929"></a>
<a name="line930"></a>/**
<a name="line931"></a> * Generates a URI path using a given URI and a path with checks to
<a name="line932"></a> * prevent consecutive &quot;//&quot;. The baseUri passed in must not contain
<a name="line933"></a> * query or fragment identifiers. The path to append may not contain query or
<a name="line934"></a> * fragment identifiers.
<a name="line935"></a> *
<a name="line936"></a> * @param {string} baseUri URI to use as the base.
<a name="line937"></a> * @param {string} path Path to append.
<a name="line938"></a> * @return {string} Updated URI.
<a name="line939"></a> */
<a name="line940"></a>goog.uri.utils.appendPath = function(baseUri, path) {
<a name="line941"></a>  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
<a name="line942"></a>
<a name="line943"></a>  // Remove any trailing &#39;/&#39;
<a name="line944"></a>  if (goog.string.endsWith(baseUri, &#39;/&#39;)) {
<a name="line945"></a>    baseUri = baseUri.substr(0, baseUri.length - 1);
<a name="line946"></a>  }
<a name="line947"></a>  // Remove any leading &#39;/&#39;
<a name="line948"></a>  if (goog.string.startsWith(path, &#39;/&#39;)) {
<a name="line949"></a>    path = path.substr(1);
<a name="line950"></a>  }
<a name="line951"></a>  return goog.string.buildString(baseUri, &#39;/&#39;, path);
<a name="line952"></a>};
<a name="line953"></a>
<a name="line954"></a>
<a name="line955"></a>/**
<a name="line956"></a> * Standard supported query parameters.
<a name="line957"></a> * @enum {string}
<a name="line958"></a> */
<a name="line959"></a>goog.uri.utils.StandardQueryParam = {
<a name="line960"></a>
<a name="line961"></a>  /** Unused parameter for unique-ifying. */
<a name="line962"></a>  RANDOM: &#39;zx&#39;
<a name="line963"></a>};
<a name="line964"></a>
<a name="line965"></a>
<a name="line966"></a>/**
<a name="line967"></a> * Sets the zx parameter of a URI to a random value.
<a name="line968"></a> * @param {string} uri Any URI.
<a name="line969"></a> * @return {string} That URI with the &quot;zx&quot; parameter added or replaced to
<a name="line970"></a> *     contain a random string.
<a name="line971"></a> */
<a name="line972"></a>goog.uri.utils.makeUnique = function(uri) {
<a name="line973"></a>  return goog.uri.utils.setParam(uri,
<a name="line974"></a>      goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
<a name="line975"></a>};
</pre>


</body>
</html>
