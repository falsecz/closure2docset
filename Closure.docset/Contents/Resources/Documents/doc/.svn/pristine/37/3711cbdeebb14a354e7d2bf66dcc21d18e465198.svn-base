<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>richtextspellchecker.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_ui_richtextspellchecker.js.html">richtextspellchecker.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2007 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Rich text spell checker implementation.
<a name="line17"></a> *
<a name="line18"></a> * @see ../demos/richtextspellchecker.html
<a name="line19"></a> */
<a name="line20"></a>
<a name="line21"></a>goog.provide(&#39;goog.ui.RichTextSpellChecker&#39;);
<a name="line22"></a>
<a name="line23"></a>goog.require(&#39;goog.Timer&#39;);
<a name="line24"></a>goog.require(&#39;goog.dom&#39;);
<a name="line25"></a>goog.require(&#39;goog.dom.NodeType&#39;);
<a name="line26"></a>goog.require(&#39;goog.events&#39;);
<a name="line27"></a>goog.require(&#39;goog.events.EventType&#39;);
<a name="line28"></a>goog.require(&#39;goog.string.StringBuffer&#39;);
<a name="line29"></a>goog.require(&#39;goog.ui.AbstractSpellChecker&#39;);
<a name="line30"></a>goog.require(&#39;goog.ui.AbstractSpellChecker.AsyncResult&#39;);
<a name="line31"></a>
<a name="line32"></a>
<a name="line33"></a>
<a name="line34"></a>/**
<a name="line35"></a> * Rich text spell checker implementation.
<a name="line36"></a> *
<a name="line37"></a> * @param {goog.spell.SpellCheck} handler Instance of the SpellCheckHandler
<a name="line38"></a> *     support object to use. A single instance can be shared by multiple editor
<a name="line39"></a> *     components.
<a name="line40"></a> * @param {goog.dom.DomHelper=} opt_domHelper Optional DOM helper.
<a name="line41"></a> * @constructor
<a name="line42"></a> * @extends {goog.ui.AbstractSpellChecker}
<a name="line43"></a> */
<a name="line44"></a>goog.ui.RichTextSpellChecker = function(handler, opt_domHelper) {
<a name="line45"></a>  goog.ui.AbstractSpellChecker.call(this, handler, opt_domHelper);
<a name="line46"></a>
<a name="line47"></a>  /**
<a name="line48"></a>   * String buffer for use in reassembly of the original text.
<a name="line49"></a>   * @type {goog.string.StringBuffer}
<a name="line50"></a>   * @private
<a name="line51"></a>   */
<a name="line52"></a>  this.workBuffer_ = new goog.string.StringBuffer();
<a name="line53"></a>
<a name="line54"></a>  /**
<a name="line55"></a>   * Bound async function (to avoid rebinding it on every call).
<a name="line56"></a>   * @type {Function}
<a name="line57"></a>   * @private
<a name="line58"></a>   */
<a name="line59"></a>  this.boundContinueAsyncFn_ = goog.bind(this.continueAsync_, this);
<a name="line60"></a>};
<a name="line61"></a>goog.inherits(goog.ui.RichTextSpellChecker, goog.ui.AbstractSpellChecker);
<a name="line62"></a>
<a name="line63"></a>
<a name="line64"></a>/**
<a name="line65"></a> * Root node for rich editor.
<a name="line66"></a> * @type {Node}
<a name="line67"></a> * @private
<a name="line68"></a> */
<a name="line69"></a>goog.ui.RichTextSpellChecker.prototype.rootNode_;
<a name="line70"></a>
<a name="line71"></a>
<a name="line72"></a>/**
<a name="line73"></a> * Current node where spell checker has interrupted to go to the next stack
<a name="line74"></a> * frame.
<a name="line75"></a> * @type {Node}
<a name="line76"></a> * @private
<a name="line77"></a> */
<a name="line78"></a>goog.ui.RichTextSpellChecker.prototype.currentNode_;
<a name="line79"></a>
<a name="line80"></a>
<a name="line81"></a>/**
<a name="line82"></a> * Counter of inserted elements. Used in processing loop to attempt to preserve
<a name="line83"></a> * existing nodes if they contain no misspellings.
<a name="line84"></a> * @type {number}
<a name="line85"></a> * @private
<a name="line86"></a> */
<a name="line87"></a>goog.ui.RichTextSpellChecker.prototype.elementsInserted_ = 0;
<a name="line88"></a>
<a name="line89"></a>
<a name="line90"></a>/**
<a name="line91"></a> * Number of words to scan to precharge the dictionary.
<a name="line92"></a> * @type {number}
<a name="line93"></a> * @private
<a name="line94"></a> */
<a name="line95"></a>goog.ui.RichTextSpellChecker.prototype.dictionaryPreScanSize_ = 1000;
<a name="line96"></a>
<a name="line97"></a>
<a name="line98"></a>/**
<a name="line99"></a> * Class name for word spans.
<a name="line100"></a> * @type {string}
<a name="line101"></a> */
<a name="line102"></a>goog.ui.RichTextSpellChecker.prototype.wordClassName =
<a name="line103"></a>    goog.getCssName(&#39;goog-spellcheck-word&#39;);
<a name="line104"></a>
<a name="line105"></a>
<a name="line106"></a>/**
<a name="line107"></a> * DomHelper to be used for interacting with the editable document/element.
<a name="line108"></a> *
<a name="line109"></a> * @type {goog.dom.DomHelper|undefined}
<a name="line110"></a> * @private
<a name="line111"></a> */
<a name="line112"></a>goog.ui.RichTextSpellChecker.prototype.editorDom_;
<a name="line113"></a>
<a name="line114"></a>
<a name="line115"></a>/**
<a name="line116"></a> * Tag name porition of the marker for the text that does not need to be checked
<a name="line117"></a> * for spelling.
<a name="line118"></a> *
<a name="line119"></a> * @type {string|undefined}
<a name="line120"></a> */
<a name="line121"></a>goog.ui.RichTextSpellChecker.prototype.excludeTag;
<a name="line122"></a>
<a name="line123"></a>
<a name="line124"></a>/**
<a name="line125"></a> * CSS Style text for invalid words. As it&#39;s set inside the rich edit iframe
<a name="line126"></a> * classes defined in the parent document are not availble, thus the style is
<a name="line127"></a> * set inline.
<a name="line128"></a> * @type {string}
<a name="line129"></a> */
<a name="line130"></a>goog.ui.RichTextSpellChecker.prototype.invalidWordCssText =
<a name="line131"></a>    &#39;background: yellow;&#39;;
<a name="line132"></a>
<a name="line133"></a>
<a name="line134"></a>/**
<a name="line135"></a> * Creates the initial DOM representation for the component.
<a name="line136"></a> *
<a name="line137"></a> * @throws {Error} Not supported. Use decorate.
<a name="line138"></a> * @see #decorate
<a name="line139"></a> */
<a name="line140"></a>goog.ui.RichTextSpellChecker.prototype.createDom = function() {
<a name="line141"></a>  throw Error(&#39;Render not supported for goog.ui.RichTextSpellChecker.&#39;);
<a name="line142"></a>};
<a name="line143"></a>
<a name="line144"></a>
<a name="line145"></a>/**
<a name="line146"></a> * Decorates the element for the UI component.
<a name="line147"></a> *
<a name="line148"></a> * @param {Element} element Element to decorate.
<a name="line149"></a> */
<a name="line150"></a>goog.ui.RichTextSpellChecker.prototype.decorateInternal = function(element) {
<a name="line151"></a>  this.setElementInternal(element);
<a name="line152"></a>  if (element.contentDocument || element.contentWindow) {
<a name="line153"></a>    var doc = element.contentDocument || element.contentWindow.document;
<a name="line154"></a>    this.rootNode_ = doc.body;
<a name="line155"></a>    this.editorDom_ = goog.dom.getDomHelper(doc);
<a name="line156"></a>  } else {
<a name="line157"></a>    this.rootNode_ = element;
<a name="line158"></a>    this.editorDom_ = goog.dom.getDomHelper(element);
<a name="line159"></a>  }
<a name="line160"></a>};
<a name="line161"></a>
<a name="line162"></a>
<a name="line163"></a>/**
<a name="line164"></a> * Called when the component&#39;s element is known to be in the document.
<a name="line165"></a> */
<a name="line166"></a>goog.ui.RichTextSpellChecker.prototype.enterDocument = function() {
<a name="line167"></a>  goog.ui.RichTextSpellChecker.superClass_.enterDocument.call(this);
<a name="line168"></a>  this.initSuggestionsMenu();
<a name="line169"></a>};
<a name="line170"></a>
<a name="line171"></a>
<a name="line172"></a>/**
<a name="line173"></a> * Checks spelling for all text and displays correction UI.
<a name="line174"></a> */
<a name="line175"></a>goog.ui.RichTextSpellChecker.prototype.check = function() {
<a name="line176"></a>  this.blockReadyEvents();
<a name="line177"></a>  this.preChargeDictionary_(this.rootNode_, this.dictionaryPreScanSize_);
<a name="line178"></a>  this.unblockReadyEvents();
<a name="line179"></a>
<a name="line180"></a>  goog.events.listen(this.handler_, goog.spell.SpellCheck.EventType.READY,
<a name="line181"></a>                     this.onDictionaryCharged_, true, this);
<a name="line182"></a>  this.handler_.processPending();
<a name="line183"></a>};
<a name="line184"></a>
<a name="line185"></a>
<a name="line186"></a>/**
<a name="line187"></a> * Processes nodes recursively.
<a name="line188"></a> *
<a name="line189"></a> * @param {Node} node Node to start with.
<a name="line190"></a> * @param {number} words Max number of words to process.
<a name="line191"></a> * @private
<a name="line192"></a> */
<a name="line193"></a>goog.ui.RichTextSpellChecker.prototype.preChargeDictionary_ = function(node,
<a name="line194"></a>                                                                       words) {
<a name="line195"></a>  while (node) {
<a name="line196"></a>    var next = this.nextNode_(node);
<a name="line197"></a>    if (this.isExcluded_(node)) {
<a name="line198"></a>      node = next;
<a name="line199"></a>      continue;
<a name="line200"></a>    }
<a name="line201"></a>    if (node.nodeType == goog.dom.NodeType.TEXT) {
<a name="line202"></a>      if (node.nodeValue) {
<a name="line203"></a>        words -= this.populateDictionary(node.nodeValue, words);
<a name="line204"></a>        if (words &lt;= 0) {
<a name="line205"></a>          return;
<a name="line206"></a>        }
<a name="line207"></a>      }
<a name="line208"></a>    } else if (node.nodeType == goog.dom.NodeType.ELEMENT) {
<a name="line209"></a>      if (node.firstChild) {
<a name="line210"></a>        next = node.firstChild;
<a name="line211"></a>      }
<a name="line212"></a>    }
<a name="line213"></a>    node = next;
<a name="line214"></a>  }
<a name="line215"></a>};
<a name="line216"></a>
<a name="line217"></a>
<a name="line218"></a>/**
<a name="line219"></a> * Starts actual processing after the dictionary is charged.
<a name="line220"></a> * @param {goog.events.Event} e goog.spell.SpellCheck.EventType.READY event.
<a name="line221"></a> * @private
<a name="line222"></a> */
<a name="line223"></a>goog.ui.RichTextSpellChecker.prototype.onDictionaryCharged_ = function(e) {
<a name="line224"></a>  e.stopPropagation();
<a name="line225"></a>  goog.events.unlisten(this.handler_, goog.spell.SpellCheck.EventType.READY,
<a name="line226"></a>                       this.onDictionaryCharged_, true, this);
<a name="line227"></a>
<a name="line228"></a>  // Now actually do the spell checking.
<a name="line229"></a>  this.wordElements_ = {};
<a name="line230"></a>  this.initializeAsyncMode();
<a name="line231"></a>  this.elementsInserted_ = 0;
<a name="line232"></a>  var result = this.processNode_(this.rootNode_);
<a name="line233"></a>  if (result == goog.ui.AbstractSpellChecker.AsyncResult.PENDING) {
<a name="line234"></a>    goog.Timer.callOnce(this.boundContinueAsyncFn_);
<a name="line235"></a>    return;
<a name="line236"></a>  }
<a name="line237"></a>  this.finishAsyncProcessing();
<a name="line238"></a>  this.finishCheck_();
<a name="line239"></a>};
<a name="line240"></a>
<a name="line241"></a>
<a name="line242"></a>/**
<a name="line243"></a> * Continues asynchrnonous spell checking.
<a name="line244"></a> * @private
<a name="line245"></a> */
<a name="line246"></a>goog.ui.RichTextSpellChecker.prototype.continueAsync_ = function() {
<a name="line247"></a>  var result = this.continueAsyncProcessing();
<a name="line248"></a>  if (result == goog.ui.AbstractSpellChecker.AsyncResult.PENDING) {
<a name="line249"></a>    goog.Timer.callOnce(this.boundContinueAsyncFn_);
<a name="line250"></a>    return;
<a name="line251"></a>  }
<a name="line252"></a>  result = this.processNode_(this.currentNode_);
<a name="line253"></a>  if (result == goog.ui.AbstractSpellChecker.AsyncResult.PENDING) {
<a name="line254"></a>    goog.Timer.callOnce(this.boundContinueAsyncFn_);
<a name="line255"></a>    return;
<a name="line256"></a>  }
<a name="line257"></a>  this.finishAsyncProcessing();
<a name="line258"></a>  this.finishCheck_();
<a name="line259"></a>};
<a name="line260"></a>
<a name="line261"></a>
<a name="line262"></a>/**
<a name="line263"></a> * Finalizes spelling check.
<a name="line264"></a> * @private
<a name="line265"></a> */
<a name="line266"></a>goog.ui.RichTextSpellChecker.prototype.finishCheck_ = function() {
<a name="line267"></a>  delete this.currentNode_;
<a name="line268"></a>  this.handler_.processPending();
<a name="line269"></a>
<a name="line270"></a>  if (!this.isVisible_) {
<a name="line271"></a>    goog.events.listen(this.rootNode_, goog.events.EventType.CLICK,
<a name="line272"></a>                       this.onWordClick_, false, this);
<a name="line273"></a>  }
<a name="line274"></a>  goog.ui.RichTextSpellChecker.superClass_.check.call(this);
<a name="line275"></a>};
<a name="line276"></a>
<a name="line277"></a>
<a name="line278"></a>/**
<a name="line279"></a> * Finds next node in our enumeration of the tree.
<a name="line280"></a> *
<a name="line281"></a> * @param {Node} node The node to which we&#39;re computing the next node for.
<a name="line282"></a> * @return {Node} The next node or null if none was found.
<a name="line283"></a> * @private
<a name="line284"></a> */
<a name="line285"></a>goog.ui.RichTextSpellChecker.prototype.nextNode_ = function(node) {
<a name="line286"></a>  while (node != this.rootNode_) {
<a name="line287"></a>    if (node.nextSibling) {
<a name="line288"></a>      return node.nextSibling;
<a name="line289"></a>    }
<a name="line290"></a>    node = node.parentNode;
<a name="line291"></a>  }
<a name="line292"></a>  return null;
<a name="line293"></a>};
<a name="line294"></a>
<a name="line295"></a>
<a name="line296"></a>/**
<a name="line297"></a> * Determines if the node is text node without any children.
<a name="line298"></a> *
<a name="line299"></a> * @param {Node} node The node to check.
<a name="line300"></a> * @return {boolean} Whether the node is a text leaf node.
<a name="line301"></a> * @private
<a name="line302"></a> */
<a name="line303"></a>goog.ui.RichTextSpellChecker.prototype.isTextLeaf_ = function(node) {
<a name="line304"></a>  return node != null &amp;&amp;
<a name="line305"></a>         node.nodeType == goog.dom.NodeType.TEXT &amp;&amp;
<a name="line306"></a>         !node.firstChild;
<a name="line307"></a>};
<a name="line308"></a>
<a name="line309"></a>
<a name="line310"></a>/** @override */
<a name="line311"></a>goog.ui.RichTextSpellChecker.prototype.setExcludeMarker = function(marker) {
<a name="line312"></a>  var parts = marker.split(&#39;.&#39;);
<a name="line313"></a>  this.excludeTag = parts[0] || undefined;
<a name="line314"></a>  this.excludeMarker = parts[1] || undefined;
<a name="line315"></a>};
<a name="line316"></a>
<a name="line317"></a>
<a name="line318"></a>/**
<a name="line319"></a> * Determines if the node is excluded from checking.
<a name="line320"></a> *
<a name="line321"></a> * @param {Node} node The node to check.
<a name="line322"></a> * @return {boolean} Whether the node is excluded.
<a name="line323"></a> * @private
<a name="line324"></a> */
<a name="line325"></a>goog.ui.RichTextSpellChecker.prototype.isExcluded_ = function(node) {
<a name="line326"></a>  return !!(this.excludeMarker &amp;&amp; node.className &amp;&amp;
<a name="line327"></a>      node.className.indexOf(this.excludeMarker) != -1 &amp;&amp;
<a name="line328"></a>      (!this.excludeTag || node.tagName == this.excludeTag));
<a name="line329"></a>};
<a name="line330"></a>
<a name="line331"></a>
<a name="line332"></a>/**
<a name="line333"></a> * Processes nodes recursively.
<a name="line334"></a> *
<a name="line335"></a> * @param {Node} node Node where to start.
<a name="line336"></a> * @return {goog.ui.AbstractSpellChecker.AsyncResult|undefined} Result code.
<a name="line337"></a> * @private
<a name="line338"></a> */
<a name="line339"></a>goog.ui.RichTextSpellChecker.prototype.processNode_ = function(node) {
<a name="line340"></a>  delete this.currentNode_;
<a name="line341"></a>  while (node) {
<a name="line342"></a>    var next = this.nextNode_(node);
<a name="line343"></a>    if (this.isExcluded_(node)) {
<a name="line344"></a>      node = next;
<a name="line345"></a>      continue;
<a name="line346"></a>    }
<a name="line347"></a>    if (node.nodeType == goog.dom.NodeType.TEXT) {
<a name="line348"></a>      var deleteNode = true;
<a name="line349"></a>      if (node.nodeValue) {
<a name="line350"></a>        var currentElements = this.elementsInserted_;
<a name="line351"></a>        var result = this.processTextAsync(node, node.nodeValue);
<a name="line352"></a>        if (result == goog.ui.AbstractSpellChecker.AsyncResult.PENDING) {
<a name="line353"></a>          // This markes node for deletion (empty nodes get deleted couple
<a name="line354"></a>          // of lines down this function). This is so our algorithm terminates.
<a name="line355"></a>          // In this case the node may be needlessly recreated, but it
<a name="line356"></a>          // happens rather infrequently and saves a lot of code.
<a name="line357"></a>          node.nodeValue = &#39;&#39;;
<a name="line358"></a>          this.currentNode_ = node;
<a name="line359"></a>          return result;
<a name="line360"></a>        }
<a name="line361"></a>        // If we did not add nodes in processing, the current element is still
<a name="line362"></a>        // valid. Let&#39;s preserve it!
<a name="line363"></a>        if (currentElements == this.elementsInserted_) {
<a name="line364"></a>          deleteNode = false;
<a name="line365"></a>        }
<a name="line366"></a>      }
<a name="line367"></a>      if (deleteNode) {
<a name="line368"></a>        goog.dom.removeNode(node);
<a name="line369"></a>      }
<a name="line370"></a>    } else if (node.nodeType == goog.dom.NodeType.ELEMENT) {
<a name="line371"></a>      // If this is a spell checker element...
<a name="line372"></a>      if (node.className == this.wordClassName) {
<a name="line373"></a>        // First, reconsolidate the text nodes inside the element - editing
<a name="line374"></a>        // in IE splits them up.
<a name="line375"></a>        var runner = node.firstChild;
<a name="line376"></a>        while (runner) {
<a name="line377"></a>          if (this.isTextLeaf_(runner)) {
<a name="line378"></a>            while (this.isTextLeaf_(runner.nextSibling)) {
<a name="line379"></a>              // Yes, this is not super efficient in IE, but it will almost
<a name="line380"></a>              // never happen.
<a name="line381"></a>              runner.nodeValue += runner.nextSibling.nodeValue;
<a name="line382"></a>              goog.dom.removeNode(runner.nextSibling);
<a name="line383"></a>            }
<a name="line384"></a>          }
<a name="line385"></a>          runner = runner.nextSibling;
<a name="line386"></a>        }
<a name="line387"></a>        // Move its contents out and reprocess it on the next iteration.
<a name="line388"></a>        if (node.firstChild) {
<a name="line389"></a>          next = node.firstChild;
<a name="line390"></a>          while (node.firstChild) {
<a name="line391"></a>            node.parentNode.insertBefore(node.firstChild, node);
<a name="line392"></a>          }
<a name="line393"></a>        }
<a name="line394"></a>        // get rid of the empty shell.
<a name="line395"></a>        goog.dom.removeNode(node);
<a name="line396"></a>      } else {
<a name="line397"></a>        if (node.firstChild) {
<a name="line398"></a>          next = node.firstChild;
<a name="line399"></a>        }
<a name="line400"></a>      }
<a name="line401"></a>    }
<a name="line402"></a>    node = next;
<a name="line403"></a>  }
<a name="line404"></a>};
<a name="line405"></a>
<a name="line406"></a>
<a name="line407"></a>/**
<a name="line408"></a> * Processes word.
<a name="line409"></a> *
<a name="line410"></a> * @param {Node} node Node containing word.
<a name="line411"></a> * @param {string} word Word to process.
<a name="line412"></a> * @param {goog.spell.SpellCheck.WordStatus} status Status of the word.
<a name="line413"></a> * @protected
<a name="line414"></a> */
<a name="line415"></a>goog.ui.RichTextSpellChecker.prototype.processWord = function(node, word,
<a name="line416"></a>                                                              status) {
<a name="line417"></a>  node.parentNode.insertBefore(this.createWordElement_(word, status), node);
<a name="line418"></a>  this.elementsInserted_++;
<a name="line419"></a>};
<a name="line420"></a>
<a name="line421"></a>
<a name="line422"></a>/**
<a name="line423"></a> * Processes recognized text and separators.
<a name="line424"></a> *
<a name="line425"></a> * @param {Node} node Node containing separator.
<a name="line426"></a> * @param {string} text Text to process.
<a name="line427"></a> * @protected
<a name="line428"></a> */
<a name="line429"></a>goog.ui.RichTextSpellChecker.prototype.processRange = function(node, text) {
<a name="line430"></a>  // The text does not change, it only gets split, so if the lengths are the
<a name="line431"></a>  // same, the text is the same, so keep the existing node.
<a name="line432"></a>  if (node.nodeType == goog.dom.NodeType.TEXT &amp;&amp; node.nodeValue.length ==
<a name="line433"></a>      text.length) {
<a name="line434"></a>    return;
<a name="line435"></a>  }
<a name="line436"></a>
<a name="line437"></a>  node.parentNode.insertBefore(this.editorDom_.createTextNode(text), node);
<a name="line438"></a>  this.elementsInserted_++;
<a name="line439"></a>};
<a name="line440"></a>
<a name="line441"></a>
<a name="line442"></a>/**
<a name="line443"></a> * Creates an element for a specified word and stores a reference to it.
<a name="line444"></a> *
<a name="line445"></a> * @param {string} word Word to create element for.
<a name="line446"></a> * @param {goog.spell.SpellCheck.WordStatus} status Status of the word.
<a name="line447"></a> * @return {HTMLSpanElement} The created element.
<a name="line448"></a> * @private
<a name="line449"></a> */
<a name="line450"></a>goog.ui.RichTextSpellChecker.prototype.createWordElement_ = function(word,
<a name="line451"></a>                                                                     status) {
<a name="line452"></a>  var parameters = this.getElementProperties(status);
<a name="line453"></a>  var el = /** @type {HTMLSpanElement} */ (this.editorDom_.createDom(&#39;span&#39;,
<a name="line454"></a>      parameters, word));
<a name="line455"></a>  this.registerWordElement_(word, el);
<a name="line456"></a>  return el;
<a name="line457"></a>};
<a name="line458"></a>
<a name="line459"></a>
<a name="line460"></a>/**
<a name="line461"></a> * Updates or replaces element based on word status.
<a name="line462"></a> * @see goog.ui.AbstractSpellChecker.prototype.updateElement_
<a name="line463"></a> *
<a name="line464"></a> * Overridden from AbstractSpellChecker because we need to be mindful of
<a name="line465"></a> * deleting the currentNode_ - this can break our pending processing.
<a name="line466"></a> *
<a name="line467"></a> * @param {Element} el Word element.
<a name="line468"></a> * @param {string} word Word to update status for.
<a name="line469"></a> * @param {goog.spell.SpellCheck.WordStatus} status Status of word.
<a name="line470"></a> * @protected
<a name="line471"></a> */
<a name="line472"></a>goog.ui.RichTextSpellChecker.prototype.updateElement = function(el, word,
<a name="line473"></a>    status) {
<a name="line474"></a>  if (status == goog.spell.SpellCheck.WordStatus.VALID &amp;&amp; el !=
<a name="line475"></a>      this.currentNode_ &amp;&amp; el.nextSibling != this.currentNode_) {
<a name="line476"></a>    this.removeMarkup(el);
<a name="line477"></a>  } else {
<a name="line478"></a>    goog.dom.setProperties(el, this.getElementProperties(status));
<a name="line479"></a>  }
<a name="line480"></a>};
<a name="line481"></a>
<a name="line482"></a>
<a name="line483"></a>/**
<a name="line484"></a> * Hides correction UI.
<a name="line485"></a> */
<a name="line486"></a>goog.ui.RichTextSpellChecker.prototype.resume = function() {
<a name="line487"></a>  goog.ui.RichTextSpellChecker.superClass_.resume.call(this);
<a name="line488"></a>
<a name="line489"></a>  this.restoreNode_(this.rootNode_);
<a name="line490"></a>
<a name="line491"></a>  goog.events.unlisten(this.rootNode_, goog.events.EventType.CLICK,
<a name="line492"></a>                     this.onWordClick_, false, this);
<a name="line493"></a>};
<a name="line494"></a>
<a name="line495"></a>
<a name="line496"></a>/**
<a name="line497"></a> * Processes nodes recursively, removes all spell checker markup, and
<a name="line498"></a> * consolidates text nodes.
<a name="line499"></a> *
<a name="line500"></a> * @param {Node} node node on which to recurse.
<a name="line501"></a> * @private
<a name="line502"></a> */
<a name="line503"></a>goog.ui.RichTextSpellChecker.prototype.restoreNode_ = function(node) {
<a name="line504"></a>  while (node) {
<a name="line505"></a>    if (this.isExcluded_(node)) {
<a name="line506"></a>      node = node.nextSibling;
<a name="line507"></a>      continue;
<a name="line508"></a>    }
<a name="line509"></a>    // Contents of the child of the element is usually 1 text element, but the
<a name="line510"></a>    // user can actually add multiple nodes in it during editing. So we move
<a name="line511"></a>    // all the children out, prepend, and reprocess (pointer is set back to
<a name="line512"></a>    // the first node that&#39;s been moved out, and the loop repeats).
<a name="line513"></a>    if (node.nodeType == goog.dom.NodeType.ELEMENT &amp;&amp; node.className ==
<a name="line514"></a>        this.wordClassName) {
<a name="line515"></a>      var firstElement = node.firstChild;
<a name="line516"></a>      var next;
<a name="line517"></a>      for (var child = firstElement; child; child = next) {
<a name="line518"></a>        next = child.nextSibling;
<a name="line519"></a>        node.parentNode.insertBefore(child, node);
<a name="line520"></a>      }
<a name="line521"></a>      next = firstElement || node.nextSibling;
<a name="line522"></a>      goog.dom.removeNode(node);
<a name="line523"></a>      node = next;
<a name="line524"></a>      continue;
<a name="line525"></a>    }
<a name="line526"></a>    // If this is a chain of text elements, we&#39;re trying to consolidate it.
<a name="line527"></a>    var textLeaf = this.isTextLeaf_(node);
<a name="line528"></a>    if (textLeaf) {
<a name="line529"></a>      var textNodes = 1;
<a name="line530"></a>      var next = node.nextSibling;
<a name="line531"></a>      while (this.isTextLeaf_(node.previousSibling)) {
<a name="line532"></a>        node = node.previousSibling;
<a name="line533"></a>        ++textNodes;
<a name="line534"></a>      }
<a name="line535"></a>      while (this.isTextLeaf_(next)) {
<a name="line536"></a>        next = next.nextSibling;
<a name="line537"></a>        ++textNodes;
<a name="line538"></a>      }
<a name="line539"></a>      if (textNodes &gt; 1) {
<a name="line540"></a>        this.workBuffer_.append(node.nodeValue);
<a name="line541"></a>        while (this.isTextLeaf_(node.nextSibling)) {
<a name="line542"></a>          this.workBuffer_.append(node.nextSibling.nodeValue);
<a name="line543"></a>          goog.dom.removeNode(node.nextSibling);
<a name="line544"></a>        }
<a name="line545"></a>        node.nodeValue = this.workBuffer_.toString();
<a name="line546"></a>        this.workBuffer_.clear();
<a name="line547"></a>      }
<a name="line548"></a>    }
<a name="line549"></a>    // Process child nodes, if any.
<a name="line550"></a>    if (node.firstChild) {
<a name="line551"></a>      this.restoreNode_(node.firstChild);
<a name="line552"></a>    }
<a name="line553"></a>    node = node.nextSibling;
<a name="line554"></a>  }
<a name="line555"></a>};
<a name="line556"></a>
<a name="line557"></a>
<a name="line558"></a>/**
<a name="line559"></a> * Returns desired element properties for the specified status.
<a name="line560"></a> *
<a name="line561"></a> * @param {goog.spell.SpellCheck.WordStatus} status Status of the word.
<a name="line562"></a> * @return {Object} Properties to apply to word element.
<a name="line563"></a> * @protected
<a name="line564"></a> */
<a name="line565"></a>goog.ui.RichTextSpellChecker.prototype.getElementProperties =
<a name="line566"></a>    function(status) {
<a name="line567"></a>  return {
<a name="line568"></a>    &#39;class&#39;: this.wordClassName,
<a name="line569"></a>    &#39;style&#39;: (status == goog.spell.SpellCheck.WordStatus.INVALID) ?
<a name="line570"></a>        this.invalidWordCssText : &#39;&#39;
<a name="line571"></a>  };
<a name="line572"></a>};
<a name="line573"></a>
<a name="line574"></a>
<a name="line575"></a>/**
<a name="line576"></a> * Handler for click events.
<a name="line577"></a> *
<a name="line578"></a> * @param {goog.events.BrowserEvent} event Event object.
<a name="line579"></a> * @private
<a name="line580"></a> */
<a name="line581"></a>goog.ui.RichTextSpellChecker.prototype.onWordClick_ = function(event) {
<a name="line582"></a>  var target = /** @type {Element} */ (event.target);
<a name="line583"></a>  if (event.target.className == this.wordClassName &amp;&amp;
<a name="line584"></a>      this.handler_.checkWord(goog.dom.getTextContent(target)) ==
<a name="line585"></a>      goog.spell.SpellCheck.WordStatus.INVALID) {
<a name="line586"></a>
<a name="line587"></a>    this.showSuggestionsMenu(target, event);
<a name="line588"></a>
<a name="line589"></a>    // Prevent document click handler from closing the menu.
<a name="line590"></a>    event.stopPropagation();
<a name="line591"></a>  }
<a name="line592"></a>};
<a name="line593"></a>
<a name="line594"></a>
<a name="line595"></a>/** @override */
<a name="line596"></a>goog.ui.RichTextSpellChecker.prototype.disposeInternal = function() {
<a name="line597"></a>  goog.ui.RichTextSpellChecker.superClass_.disposeInternal.call(this);
<a name="line598"></a>  this.rootNode_ = null;
<a name="line599"></a>  this.editorDom_ = null;
<a name="line600"></a>};
</pre>


</body>
</html>
