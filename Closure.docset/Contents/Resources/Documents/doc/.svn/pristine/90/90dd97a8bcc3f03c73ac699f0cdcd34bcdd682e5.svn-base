<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>select.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_ui_select.js.html">select.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2007 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview A class that supports single selection from a dropdown menu,
<a name="line17"></a> * with semantics similar to the native HTML &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;
<a name="line18"></a> * element.
<a name="line19"></a> *
<a name="line20"></a> * @see ../demos/select.html
<a name="line21"></a> */
<a name="line22"></a>
<a name="line23"></a>goog.provide(&#39;goog.ui.Select&#39;);
<a name="line24"></a>
<a name="line25"></a>goog.require(&#39;goog.dom.a11y&#39;);
<a name="line26"></a>goog.require(&#39;goog.dom.a11y.Role&#39;);
<a name="line27"></a>goog.require(&#39;goog.dom.a11y.State&#39;);
<a name="line28"></a>goog.require(&#39;goog.events.EventType&#39;);
<a name="line29"></a>goog.require(&#39;goog.ui.Component.EventType&#39;);
<a name="line30"></a>goog.require(&#39;goog.ui.ControlContent&#39;);
<a name="line31"></a>goog.require(&#39;goog.ui.MenuButton&#39;);
<a name="line32"></a>goog.require(&#39;goog.ui.SelectionModel&#39;);
<a name="line33"></a>goog.require(&#39;goog.ui.registry&#39;);
<a name="line34"></a>
<a name="line35"></a>
<a name="line36"></a>
<a name="line37"></a>/**
<a name="line38"></a> * A selection control.  Extends {@link goog.ui.MenuButton} by composing a
<a name="line39"></a> * menu with a selection model, and automatically updating the button&#39;s caption
<a name="line40"></a> * based on the current selection.
<a name="line41"></a> *
<a name="line42"></a> * @param {goog.ui.ControlContent} caption Default caption or existing DOM
<a name="line43"></a> *     structure to display as the button&#39;s caption when nothing is selected.
<a name="line44"></a> * @param {goog.ui.Menu=} opt_menu Menu containing selection options.
<a name="line45"></a> * @param {goog.ui.ButtonRenderer=} opt_renderer Renderer used to render or
<a name="line46"></a> *     decorate the control; defaults to {@link goog.ui.MenuButtonRenderer}.
<a name="line47"></a> * @param {goog.dom.DomHelper=} opt_domHelper Optional DOM hepler, used for
<a name="line48"></a> *     document interaction.
<a name="line49"></a> * @constructor
<a name="line50"></a> * @extends {goog.ui.MenuButton}
<a name="line51"></a> */
<a name="line52"></a>goog.ui.Select = function(caption, opt_menu, opt_renderer, opt_domHelper) {
<a name="line53"></a>  goog.ui.MenuButton.call(this, caption, opt_menu, opt_renderer, opt_domHelper);
<a name="line54"></a>  this.setDefaultCaption(caption);
<a name="line55"></a>  this.setPreferredAriaRole(goog.dom.a11y.Role.LISTBOX);
<a name="line56"></a>};
<a name="line57"></a>goog.inherits(goog.ui.Select, goog.ui.MenuButton);
<a name="line58"></a>
<a name="line59"></a>
<a name="line60"></a>/**
<a name="line61"></a> * The selection model controlling the items in the menu.
<a name="line62"></a> * @type {goog.ui.SelectionModel}
<a name="line63"></a> * @private
<a name="line64"></a> */
<a name="line65"></a>goog.ui.Select.prototype.selectionModel_ = null;
<a name="line66"></a>
<a name="line67"></a>
<a name="line68"></a>/**
<a name="line69"></a> * Default caption to be shown when no option is selected.
<a name="line70"></a> * @type {goog.ui.ControlContent}
<a name="line71"></a> * @private
<a name="line72"></a> */
<a name="line73"></a>goog.ui.Select.prototype.defaultCaption_ = null;
<a name="line74"></a>
<a name="line75"></a>
<a name="line76"></a>/**
<a name="line77"></a> * Configures the component after its DOM has been rendered, and sets up event
<a name="line78"></a> * handling.  Overrides {@link goog.ui.MenuButton#enterDocument}.
<a name="line79"></a> */
<a name="line80"></a>goog.ui.Select.prototype.enterDocument = function() {
<a name="line81"></a>  goog.ui.Select.superClass_.enterDocument.call(this);
<a name="line82"></a>  this.updateCaption();
<a name="line83"></a>  this.listenToSelectionModelEvents_();
<a name="line84"></a>  // Need to set HASPOPUP to false since it&#39;s set to true in the parent class.
<a name="line85"></a>  goog.dom.a11y.setState(this.getElement(),
<a name="line86"></a>      goog.dom.a11y.State.HASPOPUP, &#39;false&#39;);
<a name="line87"></a>};
<a name="line88"></a>
<a name="line89"></a>
<a name="line90"></a>/**
<a name="line91"></a> * Decorates the given element with this control.  Overrides the superclass
<a name="line92"></a> * implementation by initializing the default caption on the select button.
<a name="line93"></a> * @param {Element} element Element to decorate.
<a name="line94"></a> */
<a name="line95"></a>goog.ui.Select.prototype.decorateInternal = function(element) {
<a name="line96"></a>  goog.ui.Select.superClass_.decorateInternal.call(this, element);
<a name="line97"></a>  var caption = this.getCaption();
<a name="line98"></a>  if (caption) {
<a name="line99"></a>    // Initialize the default caption.
<a name="line100"></a>    this.setDefaultCaption(caption);
<a name="line101"></a>  } else {
<a name="line102"></a>    // There is no default caption; select the first option.
<a name="line103"></a>    this.setSelectedIndex(0);
<a name="line104"></a>  }
<a name="line105"></a>};
<a name="line106"></a>
<a name="line107"></a>
<a name="line108"></a>/** @override */
<a name="line109"></a>goog.ui.Select.prototype.disposeInternal = function() {
<a name="line110"></a>  goog.ui.Select.superClass_.disposeInternal.call(this);
<a name="line111"></a>
<a name="line112"></a>  if (this.selectionModel_) {
<a name="line113"></a>    this.selectionModel_.dispose();
<a name="line114"></a>    this.selectionModel_ = null;
<a name="line115"></a>  }
<a name="line116"></a>
<a name="line117"></a>  this.defaultCaption_ = null;
<a name="line118"></a>};
<a name="line119"></a>
<a name="line120"></a>
<a name="line121"></a>/**
<a name="line122"></a> * Handles {@link goog.ui.Component.EventType.ACTION} events dispatched by
<a name="line123"></a> * the menu item clicked by the user.  Updates the selection model, calls
<a name="line124"></a> * the superclass implementation to hide the menu, stops the propagation of
<a name="line125"></a> * the event, and dispatches an ACTION event on behalf of the select control
<a name="line126"></a> * itself.  Overrides {@link goog.ui.MenuButton#handleMenuAction}.
<a name="line127"></a> * @param {goog.events.Event} e Action event to handle.
<a name="line128"></a> */
<a name="line129"></a>goog.ui.Select.prototype.handleMenuAction = function(e) {
<a name="line130"></a>  this.setSelectedItem(/** @type {goog.ui.MenuItem} */ (e.target));
<a name="line131"></a>  goog.ui.Select.superClass_.handleMenuAction.call(this, e);
<a name="line132"></a>  e.stopPropagation();
<a name="line133"></a>  this.dispatchEvent(goog.ui.Component.EventType.ACTION);
<a name="line134"></a>};
<a name="line135"></a>
<a name="line136"></a>
<a name="line137"></a>/**
<a name="line138"></a> * Handles {@link goog.events.EventType.SELECT} events raised by the
<a name="line139"></a> * selection model when the selection changes.  Updates the contents of the
<a name="line140"></a> * select button.
<a name="line141"></a> * @param {goog.events.Event} e Selection event to handle.
<a name="line142"></a> */
<a name="line143"></a>goog.ui.Select.prototype.handleSelectionChange = function(e) {
<a name="line144"></a>  var item = this.getSelectedItem();
<a name="line145"></a>  goog.ui.Select.superClass_.setValue.call(this, item &amp;&amp; item.getValue());
<a name="line146"></a>  this.updateCaption();
<a name="line147"></a>};
<a name="line148"></a>
<a name="line149"></a>
<a name="line150"></a>/**
<a name="line151"></a> * Replaces the menu currently attached to the control (if any) with the given
<a name="line152"></a> * argument, and updates the selection model.  Does nothing if the new menu is
<a name="line153"></a> * the same as the old one.  Overrides {@link goog.ui.MenuButton#setMenu}.
<a name="line154"></a> * @param {goog.ui.Menu} menu New menu to be attached to the menu button.
<a name="line155"></a> * @return {goog.ui.Menu|undefined} Previous menu (undefined if none).
<a name="line156"></a> */
<a name="line157"></a>goog.ui.Select.prototype.setMenu = function(menu) {
<a name="line158"></a>  // Call superclass implementation to replace the menu.
<a name="line159"></a>  var oldMenu = goog.ui.Select.superClass_.setMenu.call(this, menu);
<a name="line160"></a>
<a name="line161"></a>  // Do nothing unless the new menu is different from the current one.
<a name="line162"></a>  if (menu != oldMenu) {
<a name="line163"></a>    // Clear the old selection model (if any).
<a name="line164"></a>    if (this.selectionModel_) {
<a name="line165"></a>      this.selectionModel_.clear();
<a name="line166"></a>    }
<a name="line167"></a>
<a name="line168"></a>    // Initialize new selection model (unless the new menu is null).
<a name="line169"></a>    if (menu) {
<a name="line170"></a>      if (this.selectionModel_) {
<a name="line171"></a>        menu.forEachChild(function(child, index) {
<a name="line172"></a>          this.setCorrectAriaRole_(child);
<a name="line173"></a>          this.selectionModel_.addItem(child);
<a name="line174"></a>        }, this);
<a name="line175"></a>      } else {
<a name="line176"></a>        this.createSelectionModel_(menu);
<a name="line177"></a>      }
<a name="line178"></a>    }
<a name="line179"></a>  }
<a name="line180"></a>
<a name="line181"></a>  return oldMenu;
<a name="line182"></a>};
<a name="line183"></a>
<a name="line184"></a>
<a name="line185"></a>/**
<a name="line186"></a> * Returns the default caption to be shown when no option is selected.
<a name="line187"></a> * @return {goog.ui.ControlContent} Default caption.
<a name="line188"></a> */
<a name="line189"></a>goog.ui.Select.prototype.getDefaultCaption = function() {
<a name="line190"></a>  return this.defaultCaption_;
<a name="line191"></a>};
<a name="line192"></a>
<a name="line193"></a>
<a name="line194"></a>/**
<a name="line195"></a> * Sets the default caption to the given string or DOM structure.
<a name="line196"></a> * @param {goog.ui.ControlContent} caption Default caption to be shown
<a name="line197"></a> *    when no option is selected.
<a name="line198"></a> */
<a name="line199"></a>goog.ui.Select.prototype.setDefaultCaption = function(caption) {
<a name="line200"></a>  this.defaultCaption_ = caption;
<a name="line201"></a>  this.updateCaption();
<a name="line202"></a>};
<a name="line203"></a>
<a name="line204"></a>
<a name="line205"></a>/**
<a name="line206"></a> * Adds a new menu item at the end of the menu.
<a name="line207"></a> * @param {goog.ui.MenuItem|goog.ui.MenuSeparator} item Menu item to add to the
<a name="line208"></a> *     menu.
<a name="line209"></a> */
<a name="line210"></a>goog.ui.Select.prototype.addItem = function(item) {
<a name="line211"></a>  this.setCorrectAriaRole_(item);
<a name="line212"></a>  goog.ui.Select.superClass_.addItem.call(this, item);
<a name="line213"></a>
<a name="line214"></a>  if (this.selectionModel_) {
<a name="line215"></a>    this.selectionModel_.addItem(item);
<a name="line216"></a>  } else {
<a name="line217"></a>    this.createSelectionModel_(this.getMenu());
<a name="line218"></a>  }
<a name="line219"></a>};
<a name="line220"></a>
<a name="line221"></a>
<a name="line222"></a>/**
<a name="line223"></a> * Adds a new menu item at a specific index in the menu.
<a name="line224"></a> * @param {goog.ui.MenuItem|goog.ui.MenuSeparator} item Menu item to add to the
<a name="line225"></a> *     menu.
<a name="line226"></a> * @param {number} index Index at which to insert the menu item.
<a name="line227"></a> */
<a name="line228"></a>goog.ui.Select.prototype.addItemAt = function(item, index) {
<a name="line229"></a>  this.setCorrectAriaRole_(item);
<a name="line230"></a>  goog.ui.Select.superClass_.addItemAt.call(this, item, index);
<a name="line231"></a>
<a name="line232"></a>  if (this.selectionModel_) {
<a name="line233"></a>    this.selectionModel_.addItemAt(item, index);
<a name="line234"></a>  } else {
<a name="line235"></a>    this.createSelectionModel_(this.getMenu());
<a name="line236"></a>  }
<a name="line237"></a>};
<a name="line238"></a>
<a name="line239"></a>
<a name="line240"></a>/**
<a name="line241"></a> * Removes an item from the menu and disposes it.
<a name="line242"></a> * @param {goog.ui.MenuItem} item The menu item to remove.
<a name="line243"></a> */
<a name="line244"></a>goog.ui.Select.prototype.removeItem = function(item) {
<a name="line245"></a>  goog.ui.Select.superClass_.removeItem.call(this, item);
<a name="line246"></a>  if (this.selectionModel_) {
<a name="line247"></a>    this.selectionModel_.removeItem(item);
<a name="line248"></a>  }
<a name="line249"></a>};
<a name="line250"></a>
<a name="line251"></a>
<a name="line252"></a>/**
<a name="line253"></a> * Removes a menu item at a given index in the menu and disposes it.
<a name="line254"></a> * @param {number} index Index of item.
<a name="line255"></a> */
<a name="line256"></a>goog.ui.Select.prototype.removeItemAt = function(index) {
<a name="line257"></a>  goog.ui.Select.superClass_.removeItemAt.call(this, index);
<a name="line258"></a>  if (this.selectionModel_) {
<a name="line259"></a>    this.selectionModel_.removeItemAt(index);
<a name="line260"></a>  }
<a name="line261"></a>};
<a name="line262"></a>
<a name="line263"></a>
<a name="line264"></a>/**
<a name="line265"></a> * Selects the specified option (assumed to be in the select menu), and
<a name="line266"></a> * deselects the previously selected option, if any.  A null argument clears
<a name="line267"></a> * the selection.
<a name="line268"></a> * @param {goog.ui.MenuItem} item Option to be selected (null to clear
<a name="line269"></a> *     the selection).
<a name="line270"></a> */
<a name="line271"></a>goog.ui.Select.prototype.setSelectedItem = function(item) {
<a name="line272"></a>  if (this.selectionModel_) {
<a name="line273"></a>    this.selectionModel_.setSelectedItem(item);
<a name="line274"></a>  }
<a name="line275"></a>};
<a name="line276"></a>
<a name="line277"></a>
<a name="line278"></a>/**
<a name="line279"></a> * Selects the option at the specified index, or clears the selection if the
<a name="line280"></a> * index is out of bounds.
<a name="line281"></a> * @param {number} index Index of the option to be selected.
<a name="line282"></a> */
<a name="line283"></a>goog.ui.Select.prototype.setSelectedIndex = function(index) {
<a name="line284"></a>  if (this.selectionModel_) {
<a name="line285"></a>    this.setSelectedItem(/** @type {goog.ui.MenuItem} */
<a name="line286"></a>        (this.selectionModel_.getItemAt(index)));
<a name="line287"></a>  }
<a name="line288"></a>};
<a name="line289"></a>
<a name="line290"></a>
<a name="line291"></a>/**
<a name="line292"></a> * Selects the first option found with an associated value equal to the
<a name="line293"></a> * argument, or clears the selection if no such option is found.  A null
<a name="line294"></a> * argument also clears the selection.  Overrides {@link
<a name="line295"></a> * goog.ui.Button#setValue}.
<a name="line296"></a> * @param {*} value Value of the option to be selected (null to clear
<a name="line297"></a> *     the selection).
<a name="line298"></a> */
<a name="line299"></a>goog.ui.Select.prototype.setValue = function(value) {
<a name="line300"></a>  if (goog.isDefAndNotNull(value) &amp;&amp; this.selectionModel_) {
<a name="line301"></a>    for (var i = 0, item; item = this.selectionModel_.getItemAt(i); i++) {
<a name="line302"></a>      if (item &amp;&amp; typeof item.getValue == &#39;function&#39; &amp;&amp;
<a name="line303"></a>          item.getValue() == value) {
<a name="line304"></a>        this.setSelectedItem(/** @type {goog.ui.MenuItem} */ (item));
<a name="line305"></a>        return;
<a name="line306"></a>      }
<a name="line307"></a>    }
<a name="line308"></a>  }
<a name="line309"></a>
<a name="line310"></a>  this.setSelectedItem(null);
<a name="line311"></a>};
<a name="line312"></a>
<a name="line313"></a>
<a name="line314"></a>/**
<a name="line315"></a> * Returns the currently selected option.
<a name="line316"></a> * @return {goog.ui.MenuItem} The currently selected option (null if none).
<a name="line317"></a> */
<a name="line318"></a>goog.ui.Select.prototype.getSelectedItem = function() {
<a name="line319"></a>  return this.selectionModel_ ?
<a name="line320"></a>      /** @type {goog.ui.MenuItem} */ (this.selectionModel_.getSelectedItem()) :
<a name="line321"></a>      null;
<a name="line322"></a>};
<a name="line323"></a>
<a name="line324"></a>
<a name="line325"></a>/**
<a name="line326"></a> * Returns the index of the currently selected option.
<a name="line327"></a> * @return {number} 0-based index of the currently selected option (-1 if none).
<a name="line328"></a> */
<a name="line329"></a>goog.ui.Select.prototype.getSelectedIndex = function() {
<a name="line330"></a>  return this.selectionModel_ ? this.selectionModel_.getSelectedIndex() : -1;
<a name="line331"></a>};
<a name="line332"></a>
<a name="line333"></a>
<a name="line334"></a>/**
<a name="line335"></a> * @return {goog.ui.SelectionModel} The selection model.
<a name="line336"></a> * @protected
<a name="line337"></a> */
<a name="line338"></a>goog.ui.Select.prototype.getSelectionModel = function() {
<a name="line339"></a>  return this.selectionModel_;
<a name="line340"></a>};
<a name="line341"></a>
<a name="line342"></a>
<a name="line343"></a>/**
<a name="line344"></a> * Creates a new selection model and sets up an event listener to handle
<a name="line345"></a> * {@link goog.events.EventType.SELECT} events dispatched by it.
<a name="line346"></a> * @param {goog.ui.Component=} opt_component If provided, will add the
<a name="line347"></a> *     component&#39;s children as items to the selection model.
<a name="line348"></a> * @private
<a name="line349"></a> */
<a name="line350"></a>goog.ui.Select.prototype.createSelectionModel_ = function(opt_component) {
<a name="line351"></a>  this.selectionModel_ = new goog.ui.SelectionModel();
<a name="line352"></a>  if (opt_component) {
<a name="line353"></a>    opt_component.forEachChild(function(child, index) {
<a name="line354"></a>      this.setCorrectAriaRole_(child);
<a name="line355"></a>      this.selectionModel_.addItem(child);
<a name="line356"></a>    }, this);
<a name="line357"></a>  }
<a name="line358"></a>  this.listenToSelectionModelEvents_();
<a name="line359"></a>};
<a name="line360"></a>
<a name="line361"></a>
<a name="line362"></a>/**
<a name="line363"></a> * Subscribes to events dispatched by the selection model.
<a name="line364"></a> * @private
<a name="line365"></a> */
<a name="line366"></a>goog.ui.Select.prototype.listenToSelectionModelEvents_ = function() {
<a name="line367"></a>  if (this.selectionModel_) {
<a name="line368"></a>    this.getHandler().listen(this.selectionModel_, goog.events.EventType.SELECT,
<a name="line369"></a>        this.handleSelectionChange);
<a name="line370"></a>  }
<a name="line371"></a>};
<a name="line372"></a>
<a name="line373"></a>
<a name="line374"></a>/**
<a name="line375"></a> * Updates the caption to be shown in the select button.  If no option is
<a name="line376"></a> * selected and a default caption is set, sets the caption to the default
<a name="line377"></a> * caption; otherwise to the empty string.
<a name="line378"></a> * @protected
<a name="line379"></a> */
<a name="line380"></a>goog.ui.Select.prototype.updateCaption = function() {
<a name="line381"></a>  var item = this.getSelectedItem();
<a name="line382"></a>  this.setContent(item ? item.getCaption() : this.defaultCaption_);
<a name="line383"></a>};
<a name="line384"></a>
<a name="line385"></a>
<a name="line386"></a>/**
<a name="line387"></a> * Sets the correct ARIA role for the menu item or separator.
<a name="line388"></a> * @param {goog.ui.MenuItem|goog.ui.MenuSeparator} item The item to set.
<a name="line389"></a> * @private
<a name="line390"></a> */
<a name="line391"></a>goog.ui.Select.prototype.setCorrectAriaRole_ = function(item) {
<a name="line392"></a>  item.setPreferredAriaRole(item instanceof goog.ui.MenuItem ?
<a name="line393"></a>      goog.dom.a11y.Role.OPTION : goog.dom.a11y.Role.SEPARATOR);
<a name="line394"></a>};
<a name="line395"></a>
<a name="line396"></a>
<a name="line397"></a>/**
<a name="line398"></a> * Opens or closes the menu.  Overrides {@link goog.ui.MenuButton#setOpen} by
<a name="line399"></a> * highlighting the currently selected option on open.
<a name="line400"></a> * @param {boolean} open Whether to open or close the menu.
<a name="line401"></a> * @param {goog.events.Event=} opt_e Mousedown event that caused the menu to
<a name="line402"></a> *     be opened.
<a name="line403"></a> * @override
<a name="line404"></a> */
<a name="line405"></a>goog.ui.Select.prototype.setOpen = function(open, opt_e) {
<a name="line406"></a>  goog.ui.Select.superClass_.setOpen.call(this, open, opt_e);
<a name="line407"></a>
<a name="line408"></a>  if (this.isOpen()) {
<a name="line409"></a>    this.getMenu().setHighlightedIndex(this.getSelectedIndex());
<a name="line410"></a>  }
<a name="line411"></a>};
<a name="line412"></a>
<a name="line413"></a>
<a name="line414"></a>// Register a decorator factory function for goog.ui.Selects.
<a name="line415"></a>goog.ui.registry.setDecoratorByClassName(
<a name="line416"></a>    goog.getCssName(&#39;goog-select&#39;), function() {
<a name="line417"></a>      // Select defaults to using MenuButtonRenderer, since it shares its L&amp;F.
<a name="line418"></a>      return new goog.ui.Select(null);
<a name="line419"></a>    });
</pre>


</body>
</html>
