<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>reflect.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_reflect_reflect.js.html">reflect.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2009 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Useful compiler idioms.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>
<a name="line20"></a>goog.provide(&#39;goog.reflect&#39;);
<a name="line21"></a>
<a name="line22"></a>
<a name="line23"></a>/**
<a name="line24"></a> * Syntax for object literal casts.
<a name="line25"></a> * @see http://go/jscompiler-renaming
<a name="line26"></a> * @see http://code.google.com/p/closure-compiler/wiki/
<a name="line27"></a> *      ExperimentalTypeBasedPropertyRenaming
<a name="line28"></a> *
<a name="line29"></a> * Use this if you have an object literal whose keys need to have the same names
<a name="line30"></a> * as the properties of some class even after they are renamed by the compiler.
<a name="line31"></a> *
<a name="line32"></a> * @param {!Function} type Type to cast to.
<a name="line33"></a> * @param {Object} object Object literal to cast.
<a name="line34"></a> * @return {Object} The object literal.
<a name="line35"></a> */
<a name="line36"></a>goog.reflect.object = function(type, object) {
<a name="line37"></a>  return object;
<a name="line38"></a>};
<a name="line39"></a>
<a name="line40"></a>
<a name="line41"></a>/**
<a name="line42"></a> * To assert to the compiler that an operation is needed when it would
<a name="line43"></a> * otherwise be stripped. For example:
<a name="line44"></a> * &lt;code&gt;
<a name="line45"></a> *     // Force a layout
<a name="line46"></a> *     goog.reflect.sinkValue(dialog.offsetHeight);
<a name="line47"></a> * &lt;/code&gt;
<a name="line48"></a> * @type {!Function}
<a name="line49"></a> */
<a name="line50"></a>goog.reflect.sinkValue = function(x) {
<a name="line51"></a>  goog.reflect.sinkValue[&#39; &#39;](x);
<a name="line52"></a>  return x;
<a name="line53"></a>};
<a name="line54"></a>
<a name="line55"></a>
<a name="line56"></a>/**
<a name="line57"></a> * The compiler should optimize this function away iff no one ever uses
<a name="line58"></a> * goog.reflect.sinkValue.
<a name="line59"></a> */
<a name="line60"></a>goog.reflect.sinkValue[&#39; &#39;] = goog.nullFunction;
<a name="line61"></a>
<a name="line62"></a>
<a name="line63"></a>/**
<a name="line64"></a> * Check if a property can be accessed without throwing an exception.
<a name="line65"></a> * @param {Object} obj The owner of the property.
<a name="line66"></a> * @param {string} prop The property name.
<a name="line67"></a> * @return {boolean} Whether the property is accessible. Will also return true
<a name="line68"></a> *     if obj is null.
<a name="line69"></a> */
<a name="line70"></a>goog.reflect.canAccessProperty = function(obj, prop) {
<a name="line71"></a>  /** @preserveTry */
<a name="line72"></a>  try {
<a name="line73"></a>    goog.reflect.sinkValue(obj[prop]);
<a name="line74"></a>    return true;
<a name="line75"></a>  } catch (e) {}
<a name="line76"></a>  return false;
<a name="line77"></a>};
</pre>


</body>
</html>
