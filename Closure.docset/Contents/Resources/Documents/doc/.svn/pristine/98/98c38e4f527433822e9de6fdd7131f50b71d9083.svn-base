<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>mechanism_test.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_storage_mechanism_mechanism_test.js.html">mechanism_test.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Unit tests for the abstract storage mechanism interface.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>
<a name="line20"></a>goog.provide(&#39;goog.storage.mechanism.mechanism_test&#39;);
<a name="line21"></a>
<a name="line22"></a>goog.require(&#39;goog.storage.mechanism.ErrorCode&#39;);
<a name="line23"></a>goog.require(&#39;goog.storage.mechanism.HTML5LocalStorage&#39;);
<a name="line24"></a>goog.require(&#39;goog.storage.mechanism.Mechanism&#39;);
<a name="line25"></a>goog.require(&#39;goog.testing.asserts&#39;);
<a name="line26"></a>goog.require(&#39;goog.userAgent.product&#39;);
<a name="line27"></a>goog.require(&#39;goog.userAgent.product.isVersion&#39;);
<a name="line28"></a>goog.setTestOnly(&#39;mechanism_test&#39;);
<a name="line29"></a>
<a name="line30"></a>
<a name="line31"></a>goog.storage.mechanism.mechanism_test.runBasicTests = function(mechanism) {
<a name="line32"></a>  // Clean up.
<a name="line33"></a>  mechanism.remove(&#39;first&#39;);
<a name="line34"></a>  mechanism.remove(&#39;first&#39;);
<a name="line35"></a>  assertNull(mechanism.get(&#39;first&#39;));
<a name="line36"></a>
<a name="line37"></a>  // Set-get.
<a name="line38"></a>  mechanism.set(&#39;first&#39;, &#39;one&#39;);
<a name="line39"></a>  assertEquals(&#39;one&#39;, mechanism.get(&#39;first&#39;));
<a name="line40"></a>
<a name="line41"></a>  // Change.
<a name="line42"></a>  mechanism.set(&#39;first&#39;, &#39;two&#39;);
<a name="line43"></a>  assertEquals(&#39;two&#39;, mechanism.get(&#39;first&#39;));
<a name="line44"></a>
<a name="line45"></a>  // Removal.
<a name="line46"></a>  mechanism.remove(&#39;first&#39;);
<a name="line47"></a>  assertNull(mechanism.get(&#39;first&#39;));
<a name="line48"></a>
<a name="line49"></a>  // Re-set.
<a name="line50"></a>  mechanism.set(&#39;first&#39;, &#39;one&#39;);
<a name="line51"></a>  assertEquals(&#39;one&#39;, mechanism.get(&#39;first&#39;));
<a name="line52"></a>
<a name="line53"></a>  // More elements.
<a name="line54"></a>  mechanism.set(&#39;second&#39;, &#39;two&#39;);
<a name="line55"></a>  mechanism.set(&#39;third&#39;, &#39;three&#39;);
<a name="line56"></a>  assertEquals(&#39;one&#39;, mechanism.get(&#39;first&#39;));
<a name="line57"></a>  assertEquals(&#39;two&#39;, mechanism.get(&#39;second&#39;));
<a name="line58"></a>  assertEquals(&#39;three&#39;, mechanism.get(&#39;third&#39;));
<a name="line59"></a>
<a name="line60"></a>  // Remove and check.
<a name="line61"></a>  mechanism.remove(&#39;second&#39;);
<a name="line62"></a>  assertNull(mechanism.get(&#39;second&#39;));
<a name="line63"></a>  assertEquals(&#39;one&#39;, mechanism.get(&#39;first&#39;));
<a name="line64"></a>  assertEquals(&#39;three&#39;, mechanism.get(&#39;third&#39;));
<a name="line65"></a>  mechanism.remove(&#39;first&#39;);
<a name="line66"></a>  assertNull(mechanism.get(&#39;first&#39;));
<a name="line67"></a>  assertEquals(&#39;three&#39;, mechanism.get(&#39;third&#39;));
<a name="line68"></a>
<a name="line69"></a>  // Empty string as a value.
<a name="line70"></a>  mechanism.set(&#39;third&#39;, &#39;&#39;);
<a name="line71"></a>  assertEquals(&#39;&#39;, mechanism.get(&#39;third&#39;));
<a name="line72"></a>
<a name="line73"></a>  // Some weird keys. We leave out some tests for some browsers where they
<a name="line74"></a>  // trigger browser bugs, and where the keys are too obscure to prepare a
<a name="line75"></a>  // workaround.
<a name="line76"></a>  mechanism.set(&#39; &#39;, &#39;space&#39;);
<a name="line77"></a>  mechanism.set(&#39;=+!@#$%^&amp;*()-_\\|;:\&#39;&quot;,./&lt;&gt;?[]{}~`&#39;, &#39;control&#39;);
<a name="line78"></a>  mechanism.set(
<a name="line79"></a>      &#39;\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341&#39;, &#39;ten&#39;);
<a name="line80"></a>  mechanism.set(&#39;\0&#39;, &#39;null&#39;);
<a name="line81"></a>  mechanism.set(&#39;\0\0&#39;, &#39;double null&#39;);
<a name="line82"></a>  mechanism.set(&#39;\0A&#39;, &#39;null A&#39;);
<a name="line83"></a>  mechanism.set(&#39;&#39;, &#39;zero&#39;);
<a name="line84"></a>  assertEquals(&#39;space&#39;, mechanism.get(&#39; &#39;));
<a name="line85"></a>  assertEquals(&#39;control&#39;, mechanism.get(&#39;=+!@#$%^&amp;*()-_\\|;:\&#39;&quot;,./&lt;&gt;?[]{}~`&#39;));
<a name="line86"></a>  assertEquals(&#39;ten&#39;, mechanism.get(
<a name="line87"></a>      &#39;\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341&#39;));
<a name="line88"></a>  if (!goog.userAgent.IE ||
<a name="line89"></a>      !mechanism instanceof goog.storage.mechanism.HTML5LocalStorage) {
<a name="line90"></a>    // IE does not properly handle nulls in HTML5 localStorage keys (IE8, IE9).
<a name="line91"></a>    // https://connect.microsoft.com/IE/feedback/details/667799/
<a name="line92"></a>    assertEquals(&#39;null&#39;, mechanism.get(&#39;\0&#39;));
<a name="line93"></a>    assertEquals(&#39;double null&#39;, mechanism.get(&#39;\0\0&#39;));
<a name="line94"></a>    assertEquals(&#39;null A&#39;, mechanism.get(&#39;\0A&#39;));
<a name="line95"></a>  }
<a name="line96"></a>  if (!goog.userAgent.GECKO) {
<a name="line97"></a>    // Firefox does not properly handle the empty key (FF 3.5, 3.6, 4.0).
<a name="line98"></a>    // https://bugzilla.mozilla.org/show_bug.cgi?id=510849
<a name="line99"></a>    assertEquals(&#39;zero&#39;, mechanism.get(&#39;&#39;));
<a name="line100"></a>  }
<a name="line101"></a>  mechanism.remove(&#39; &#39;);
<a name="line102"></a>  mechanism.remove(&#39;=+!@#$%^&amp;*()-_\\|;:\&#39;&quot;,./&lt;&gt;?[]{}~`&#39;);
<a name="line103"></a>  mechanism.remove(
<a name="line104"></a>      &#39;\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341&#39;);
<a name="line105"></a>  mechanism.remove(&#39;\0&#39;);
<a name="line106"></a>  mechanism.remove(&#39;\0\0&#39;);
<a name="line107"></a>  mechanism.remove(&#39;\0A&#39;);
<a name="line108"></a>  mechanism.remove(&#39;&#39;);
<a name="line109"></a>
<a name="line110"></a>  // Clean up.
<a name="line111"></a>  mechanism.remove(&#39;third&#39;);
<a name="line112"></a>  assertNull(mechanism.get(&#39;third&#39;));
<a name="line113"></a>};
<a name="line114"></a>
<a name="line115"></a>
<a name="line116"></a>// This is only suitable for manual testing.
<a name="line117"></a>goog.storage.mechanism.mechanism_test.runPersistenceTests = function(
<a name="line118"></a>    mechanism) {
<a name="line119"></a>  try {
<a name="line120"></a>    assertEquals(&#39;hello&#39;, mechanism.get(&#39;persist&#39;));
<a name="line121"></a>  } catch (ex) {
<a name="line122"></a>    mechanism.set(&#39;persist&#39;, &#39;hello&#39;);
<a name="line123"></a>    throw ex;
<a name="line124"></a>  }
<a name="line125"></a>};
<a name="line126"></a>
<a name="line127"></a>
<a name="line128"></a>goog.storage.mechanism.mechanism_test.runQuotaTests = function(
<a name="line129"></a>    mechanism, atLeastBytes) {
<a name="line130"></a>  // This test might crash Safari 4, so it is disabled for this version.
<a name="line131"></a>  // It works fine on Safari 3 and Safari 5.
<a name="line132"></a>  if (goog.userAgent.product.SAFARI &amp;&amp;
<a name="line133"></a>      goog.userAgent.product.isVersion(4) &amp;&amp;
<a name="line134"></a>      !goog.userAgent.product.isVersion(5)) {
<a name="line135"></a>    return
<a name="line136"></a>  }
<a name="line137"></a>
<a name="line138"></a>  var buffer = &#39;\u03ff&#39;; // 2 bytes
<a name="line139"></a>  var savedBytes = 0;
<a name="line140"></a>  try {
<a name="line141"></a>    while (true) {
<a name="line142"></a>      mechanism.set(&#39;foo&#39;, buffer);
<a name="line143"></a>      savedBytes = 2 * buffer.length;
<a name="line144"></a>      buffer = buffer + buffer;
<a name="line145"></a>    }
<a name="line146"></a>  } catch (ex) {
<a name="line147"></a>    if (ex != goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED) {
<a name="line148"></a>      throw ex;
<a name="line149"></a>    }
<a name="line150"></a>  }
<a name="line151"></a>  mechanism.remove(&#39;foo&#39;);
<a name="line152"></a>  assertTrue(savedBytes &gt;= atLeastBytes);
<a name="line153"></a>};
</pre>


</body>
</html>
