<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>exponentialbackoff.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_math_exponentialbackoff.js.html">exponentialbackoff.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>
<a name="line16"></a>/**
<a name="line17"></a> * @fileoverview Utility class to manage the mathematics behind computing an
<a name="line18"></a> * exponential backoff model.  Given an initial backoff value and a maximum
<a name="line19"></a> * backoff value, every call to backoff() will double the value until maximum
<a name="line20"></a> * backoff value is reached.
<a name="line21"></a> *
<a name="line22"></a> */
<a name="line23"></a>
<a name="line24"></a>
<a name="line25"></a>goog.provide(&#39;goog.math.ExponentialBackoff&#39;);
<a name="line26"></a>
<a name="line27"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line28"></a>
<a name="line29"></a>
<a name="line30"></a>
<a name="line31"></a>/**
<a name="line32"></a> * @constructor
<a name="line33"></a> *
<a name="line34"></a> * @param {number} initialValue The initial backoff value.
<a name="line35"></a> * @param {number} maxValue The maximum backoff value.
<a name="line36"></a> */
<a name="line37"></a>goog.math.ExponentialBackoff = function(initialValue, maxValue) {
<a name="line38"></a>  goog.asserts.assert(initialValue &gt; 0,
<a name="line39"></a>      &#39;Initial value must be greater than zero.&#39;);
<a name="line40"></a>  goog.asserts.assert(maxValue &gt;= initialValue,
<a name="line41"></a>      &#39;Max value should be at least as large as initial value.&#39;);
<a name="line42"></a>
<a name="line43"></a>  /**
<a name="line44"></a>   * @type {number}
<a name="line45"></a>   * @private
<a name="line46"></a>   */
<a name="line47"></a>  this.initialValue_ = initialValue;
<a name="line48"></a>
<a name="line49"></a>  /**
<a name="line50"></a>   * @type {number}
<a name="line51"></a>   * @private
<a name="line52"></a>   */
<a name="line53"></a>  this.maxValue_ = maxValue;
<a name="line54"></a>
<a name="line55"></a>  /**
<a name="line56"></a>   * The current backoff value.
<a name="line57"></a>   * @type {number}
<a name="line58"></a>   * @private
<a name="line59"></a>   */
<a name="line60"></a>  this.currValue_ = initialValue;
<a name="line61"></a>};
<a name="line62"></a>
<a name="line63"></a>
<a name="line64"></a>/**
<a name="line65"></a> * The number of backoffs that have happened.
<a name="line66"></a> * @type {number}
<a name="line67"></a> * @private
<a name="line68"></a> */
<a name="line69"></a>goog.math.ExponentialBackoff.prototype.currCount_ = 0;
<a name="line70"></a>
<a name="line71"></a>
<a name="line72"></a>/**
<a name="line73"></a> * Resets the backoff value to its initial value.
<a name="line74"></a> */
<a name="line75"></a>goog.math.ExponentialBackoff.prototype.reset = function() {
<a name="line76"></a>  this.currValue_ = this.initialValue_;
<a name="line77"></a>  this.currCount_ = 0;
<a name="line78"></a>};
<a name="line79"></a>
<a name="line80"></a>
<a name="line81"></a>/**
<a name="line82"></a> * @return {number} The current backoff value.
<a name="line83"></a> */
<a name="line84"></a>goog.math.ExponentialBackoff.prototype.getValue = function() {
<a name="line85"></a>  return this.currValue_;
<a name="line86"></a>};
<a name="line87"></a>
<a name="line88"></a>
<a name="line89"></a>/**
<a name="line90"></a> * @return {number} The number of times this class has backed off.
<a name="line91"></a> */
<a name="line92"></a>goog.math.ExponentialBackoff.prototype.getBackoffCount = function() {
<a name="line93"></a>  return this.currCount_;
<a name="line94"></a>};
<a name="line95"></a>
<a name="line96"></a>
<a name="line97"></a>/**
<a name="line98"></a> * Initiates a backoff.
<a name="line99"></a> */
<a name="line100"></a>goog.math.ExponentialBackoff.prototype.backoff = function() {
<a name="line101"></a>  this.currValue_ = Math.min(this.maxValue_, this.currValue_ * 2);
<a name="line102"></a>  this.currCount_++;
<a name="line103"></a>};
</pre>


</body>
</html>
