<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>transport.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_net_xpc_transport.js.html">transport.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2007 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview Contains the base class for transports.
<a name="line17"></a> *
<a name="line18"></a> */
<a name="line19"></a>
<a name="line20"></a>
<a name="line21"></a>goog.provide(&#39;goog.net.xpc.Transport&#39;);
<a name="line22"></a>
<a name="line23"></a>goog.require(&#39;goog.Disposable&#39;);
<a name="line24"></a>goog.require(&#39;goog.dom&#39;);
<a name="line25"></a>goog.require(&#39;goog.net.xpc&#39;);
<a name="line26"></a>
<a name="line27"></a>
<a name="line28"></a>
<a name="line29"></a>/**
<a name="line30"></a> * The base class for transports.
<a name="line31"></a> * @param {goog.dom.DomHelper=} opt_domHelper The dom helper to use for
<a name="line32"></a> *     finding the window objects.
<a name="line33"></a> * @constructor
<a name="line34"></a> * @extends {goog.Disposable};
<a name="line35"></a> */
<a name="line36"></a>goog.net.xpc.Transport = function(opt_domHelper) {
<a name="line37"></a>  goog.Disposable.call(this);
<a name="line38"></a>
<a name="line39"></a>  /**
<a name="line40"></a>   * The dom helper to use for finding the window objects to reference.
<a name="line41"></a>   * @type {goog.dom.DomHelper}
<a name="line42"></a>   * @private
<a name="line43"></a>   */
<a name="line44"></a>  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
<a name="line45"></a>};
<a name="line46"></a>goog.inherits(goog.net.xpc.Transport, goog.Disposable);
<a name="line47"></a>
<a name="line48"></a>
<a name="line49"></a>/**
<a name="line50"></a> * The transport type.
<a name="line51"></a> * @type {number}
<a name="line52"></a> * @protected
<a name="line53"></a> */
<a name="line54"></a>goog.net.xpc.Transport.prototype.transportType = 0;
<a name="line55"></a>
<a name="line56"></a>
<a name="line57"></a>/**
<a name="line58"></a> * @return {number} The transport type identifier.
<a name="line59"></a> */
<a name="line60"></a>goog.net.xpc.Transport.prototype.getType = function() {
<a name="line61"></a>  return this.transportType;
<a name="line62"></a>};
<a name="line63"></a>
<a name="line64"></a>
<a name="line65"></a>/**
<a name="line66"></a> * Returns the window associated with this transport instance.
<a name="line67"></a> * @return {Window} The window to use.
<a name="line68"></a> */
<a name="line69"></a>goog.net.xpc.Transport.prototype.getWindow = function() {
<a name="line70"></a>  return this.domHelper_.getWindow();
<a name="line71"></a>};
<a name="line72"></a>
<a name="line73"></a>
<a name="line74"></a>/**
<a name="line75"></a> * Return the transport name.
<a name="line76"></a> * @return {string} the transport name.
<a name="line77"></a> */
<a name="line78"></a>goog.net.xpc.Transport.prototype.getName = function() {
<a name="line79"></a>  return goog.net.xpc.TransportNames[this.transportType] || &#39;&#39;;
<a name="line80"></a>};
<a name="line81"></a>
<a name="line82"></a>
<a name="line83"></a>/**
<a name="line84"></a> * Handles transport service messages (internal signalling).
<a name="line85"></a> * @param {string} payload The message content.
<a name="line86"></a> */
<a name="line87"></a>goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
<a name="line88"></a>
<a name="line89"></a>
<a name="line90"></a>/**
<a name="line91"></a> * Connects this transport.
<a name="line92"></a> * The transport implementation is expected to call
<a name="line93"></a> * CrossPageChannel.prototype.notifyConnected_ when the channel is ready
<a name="line94"></a> * to be used.
<a name="line95"></a> */
<a name="line96"></a>goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
<a name="line97"></a>
<a name="line98"></a>
<a name="line99"></a>/**
<a name="line100"></a> * Sends a message.
<a name="line101"></a> * @param {string} service The name off the service the message is to be
<a name="line102"></a> * delivered to.
<a name="line103"></a> * @param {string|Object} payload The message content.
<a name="line104"></a> */
<a name="line105"></a>goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
</pre>


</body>
</html>
