<!doctype html>

<html>
<head>
  <link rel="shortcut icon" href="static/images/favicon.ico" type="image/x-icon">
  <title>filedownloader.js (Closure Library API Documentation - JavaScript)</title>
  <link rel="stylesheet" href="static/css/base.css">
  <link rel="stylesheet" href="static/css/doc.css">
  <link rel="stylesheet" href="static/css/sidetree.css">
  <link rel="stylesheet" href="static/css/prettify.css">

  <script>
     var _staticFilePath = "static/";
     var _typeTreeName = "goog";
     var _fileTreeName = "Source";
  </script>

  <script src="static/js/doc.js">
  </script>


  <meta charset="utf8">
</head>

<body onload="grokdoc.onLoad();">

<div id="header">
  <div class="g-section g-tpl-50-50 g-split">
    <div class="g-unit g-first">
      <a id="logo" href="index.html">Closure Library API Documentation</a>
    </div>

    <div class="g-unit">
      <div class="g-c">
        <strong>Go to class or file:</strong>
        <input type="text" id="ac">
      </div>
    </div>
  </div>
</div>

<div class="clear"></div>

<h2><a href="closure_goog_net_filedownloader.js.html">filedownloader.js</a></h2>

<pre class="prettyprint lang-js">
<a name="line1"></a>// Copyright 2011 The Closure Library Authors. All Rights Reserved.
<a name="line2"></a>//
<a name="line3"></a>// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
<a name="line4"></a>// you may not use this file except in compliance with the License.
<a name="line5"></a>// You may obtain a copy of the License at
<a name="line6"></a>//
<a name="line7"></a>//      http://www.apache.org/licenses/LICENSE-2.0
<a name="line8"></a>//
<a name="line9"></a>// Unless required by applicable law or agreed to in writing, software
<a name="line10"></a>// distributed under the License is distributed on an &quot;AS-IS&quot; BASIS,
<a name="line11"></a>// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
<a name="line12"></a>// See the License for the specific language governing permissions and
<a name="line13"></a>// limitations under the License.
<a name="line14"></a>
<a name="line15"></a>/**
<a name="line16"></a> * @fileoverview A class for downloading remote files and storing them
<a name="line17"></a> * locally using the HTML5 FileSystem API.
<a name="line18"></a> *
<a name="line19"></a> * The directory structure is of the form /HASH/URL/BASENAME:
<a name="line20"></a> *
<a name="line21"></a> * The HASH portion is a three-character slice of the hash of the URL. Since the
<a name="line22"></a> * filesystem has a limit of about 5000 files per directory, this should divide
<a name="line23"></a> * the downloads roughly evenly among about 5000 directories, thus allowing for
<a name="line24"></a> * at most 5000^2 downloads.
<a name="line25"></a> *
<a name="line26"></a> * The URL portion is the (sanitized) full URL used for downloading the file.
<a name="line27"></a> * This is used to ensure that each file ends up in a different location, even
<a name="line28"></a> * if the HASH and BASENAME are the same.
<a name="line29"></a> *
<a name="line30"></a> * The BASENAME portion is the basename of the URL. It&#39;s used for the filename
<a name="line31"></a> * proper so that the local filesystem: URL will be downloaded to a file with a
<a name="line32"></a> * recognizable name.
<a name="line33"></a> *
<a name="line34"></a> */
<a name="line35"></a>
<a name="line36"></a>goog.provide(&#39;goog.net.FileDownloader&#39;);
<a name="line37"></a>goog.provide(&#39;goog.net.FileDownloader.Error&#39;);
<a name="line38"></a>
<a name="line39"></a>goog.require(&#39;goog.Disposable&#39;);
<a name="line40"></a>goog.require(&#39;goog.asserts&#39;);
<a name="line41"></a>goog.require(&#39;goog.async.Deferred&#39;);
<a name="line42"></a>goog.require(&#39;goog.crypt.hash32&#39;);
<a name="line43"></a>goog.require(&#39;goog.debug.Error&#39;);
<a name="line44"></a>goog.require(&#39;goog.events.EventHandler&#39;);
<a name="line45"></a>goog.require(&#39;goog.fs&#39;);
<a name="line46"></a>goog.require(&#39;goog.fs.DirectoryEntry.Behavior&#39;);
<a name="line47"></a>goog.require(&#39;goog.fs.Error.ErrorCode&#39;);
<a name="line48"></a>goog.require(&#39;goog.fs.FileSaver.EventType&#39;);
<a name="line49"></a>goog.require(&#39;goog.net.EventType&#39;);
<a name="line50"></a>goog.require(&#39;goog.net.XhrIo.ResponseType&#39;);
<a name="line51"></a>goog.require(&#39;goog.net.XhrIoPool&#39;);
<a name="line52"></a>
<a name="line53"></a>
<a name="line54"></a>
<a name="line55"></a>/**
<a name="line56"></a> * A class for downloading remote files and storing them locally using the
<a name="line57"></a> * HTML5 filesystem API.
<a name="line58"></a> *
<a name="line59"></a> * @param {!goog.fs.DirectoryEntry} dir The directory in which the downloaded
<a name="line60"></a> *     files are stored. This directory should be solely managed by
<a name="line61"></a> *     FileDownloader.
<a name="line62"></a> * @param {goog.net.XhrIoPool=} opt_pool The pool of XhrIo objects to use for
<a name="line63"></a> *     downloading files.
<a name="line64"></a> * @constructor
<a name="line65"></a> * @extends {goog.Disposable}
<a name="line66"></a> */
<a name="line67"></a>goog.net.FileDownloader = function(dir, opt_pool) {
<a name="line68"></a>  goog.base(this);
<a name="line69"></a>
<a name="line70"></a>  /**
<a name="line71"></a>   * The directory in which the downloaded files are stored.
<a name="line72"></a>   * @type {!goog.fs.DirectoryEntry}
<a name="line73"></a>   * @private
<a name="line74"></a>   */
<a name="line75"></a>  this.dir_ = dir;
<a name="line76"></a>
<a name="line77"></a>  /**
<a name="line78"></a>   * The pool of XHRs to use for capturing.
<a name="line79"></a>   * @type {!goog.net.XhrIoPool}
<a name="line80"></a>   * @private
<a name="line81"></a>   */
<a name="line82"></a>  this.pool_ = opt_pool || new goog.net.XhrIoPool();
<a name="line83"></a>
<a name="line84"></a>  /**
<a name="line85"></a>   * A map from URLs to active downloads running for those URLs.
<a name="line86"></a>   * @type {!Object.&lt;!goog.net.FileDownloader.Download_&gt;}
<a name="line87"></a>   * @private
<a name="line88"></a>   */
<a name="line89"></a>  this.downloads_ = {};
<a name="line90"></a>
<a name="line91"></a>  /**
<a name="line92"></a>   * The handler for URL capturing events.
<a name="line93"></a>   * @type {!goog.events.EventHandler}
<a name="line94"></a>   * @private
<a name="line95"></a>   */
<a name="line96"></a>  this.eventHandler_ = new goog.events.EventHandler(this);
<a name="line97"></a>};
<a name="line98"></a>goog.inherits(goog.net.FileDownloader, goog.Disposable);
<a name="line99"></a>
<a name="line100"></a>
<a name="line101"></a>/**
<a name="line102"></a> * Download a remote file and save its contents to the filesystem. A given file
<a name="line103"></a> * is uniquely identified by its URL string; this means that the relative and
<a name="line104"></a> * absolute URLs for a single file are considered different for the purposes of
<a name="line105"></a> * the FileDownloader.
<a name="line106"></a> *
<a name="line107"></a> * Returns a Deferred that will contain the downloaded blob. If there&#39;s an error
<a name="line108"></a> * while downloading the URL, this Deferred will be passed the
<a name="line109"></a> * {@link goog.net.FileDownloader.Error} object as an errback.
<a name="line110"></a> *
<a name="line111"></a> * If a download is already in progress for the given URL, this will return the
<a name="line112"></a> * deferred blob for that download. If the URL has already been downloaded, this
<a name="line113"></a> * will fail once it tries to save the downloaded blob.
<a name="line114"></a> *
<a name="line115"></a> * When a download is in progress, all Deferreds returned for that download will
<a name="line116"></a> * be branches of a single parent. If all such branches are cancelled, or if one
<a name="line117"></a> * is cancelled with opt_deepCancel set, then the download will be cancelled as
<a name="line118"></a> * well.
<a name="line119"></a> *
<a name="line120"></a> * @param {string} url The URL of the file to download.
<a name="line121"></a> * @return {!goog.async.Deferred} The deferred result blob.
<a name="line122"></a> */
<a name="line123"></a>goog.net.FileDownloader.prototype.download = function(url) {
<a name="line124"></a>  if (this.isDownloading(url)) {
<a name="line125"></a>    return this.downloads_[url].deferred.branch(true /* opt_propagateCancel */);
<a name="line126"></a>  }
<a name="line127"></a>
<a name="line128"></a>  var download = new goog.net.FileDownloader.Download_(url, this);
<a name="line129"></a>  this.downloads_[url] = download;
<a name="line130"></a>  this.pool_.getObject(goog.bind(this.gotXhr_, this, download));
<a name="line131"></a>  return download.deferred.branch(true /* opt_propagateCancel */);
<a name="line132"></a>};
<a name="line133"></a>
<a name="line134"></a>
<a name="line135"></a>/**
<a name="line136"></a> * Return a Deferred that will fire once no download is active for a given URL.
<a name="line137"></a> * If there&#39;s no download active for that URL when this is called, the deferred
<a name="line138"></a> * will fire immediately; otherwise, it will fire once the download is complete,
<a name="line139"></a> * whether or not it succeeds.
<a name="line140"></a> *
<a name="line141"></a> * @param {string} url The URL of the download to wait for.
<a name="line142"></a> * @return {!goog.async.Deferred} The Deferred that will fire when the download
<a name="line143"></a> *     is complete.
<a name="line144"></a> */
<a name="line145"></a>goog.net.FileDownloader.prototype.waitForDownload = function(url) {
<a name="line146"></a>  var deferred = new goog.async.Deferred();
<a name="line147"></a>  if (this.isDownloading(url)) {
<a name="line148"></a>    this.downloads_[url].deferred.addBoth(function() {
<a name="line149"></a>      deferred.callback(null);
<a name="line150"></a>    }, this);
<a name="line151"></a>  } else {
<a name="line152"></a>    deferred.callback(null);
<a name="line153"></a>  }
<a name="line154"></a>  return deferred;
<a name="line155"></a>};
<a name="line156"></a>
<a name="line157"></a>
<a name="line158"></a>/**
<a name="line159"></a> * Returns whether or not there is an active download for a given URL.
<a name="line160"></a> *
<a name="line161"></a> * @param {string} url The URL of the download to check.
<a name="line162"></a> * @return {boolean} Whether or not there is an active download for the URL.
<a name="line163"></a> */
<a name="line164"></a>goog.net.FileDownloader.prototype.isDownloading = function(url) {
<a name="line165"></a>  return url in this.downloads_;
<a name="line166"></a>};
<a name="line167"></a>
<a name="line168"></a>
<a name="line169"></a>/**
<a name="line170"></a> * Load a downloaded blob from the filesystem. Will fire a deferred error if the
<a name="line171"></a> * given URL has not yet been downloaded.
<a name="line172"></a> *
<a name="line173"></a> * @param {string} url The URL of the blob to load.
<a name="line174"></a> * @return {!goog.async.Deferred} The deferred Blob object. The callback will be
<a name="line175"></a> *     passed the blob. If a file API error occurs while loading the blob, that
<a name="line176"></a> *     error will be passed to the errback.
<a name="line177"></a> */
<a name="line178"></a>goog.net.FileDownloader.prototype.getDownloadedBlob = function(url) {
<a name="line179"></a>  return this.getFile_(url).
<a name="line180"></a>      addCallback(function(fileEntry) { return fileEntry.file(); });
<a name="line181"></a>};
<a name="line182"></a>
<a name="line183"></a>
<a name="line184"></a>/**
<a name="line185"></a> * Get the local filesystem: URL for a downloaded file. This is different from
<a name="line186"></a> * the blob: URL that&#39;s available from getDownloadedBlob(). If the end user
<a name="line187"></a> * accesses the filesystem: URL, the resulting file&#39;s name will be determined by
<a name="line188"></a> * the download filename as opposed to an arbitrary GUID. In addition, the
<a name="line189"></a> * filesystem: URL is connected to a filesystem location, so if the download is
<a name="line190"></a> * removed then that URL will become invalid.
<a name="line191"></a> *
<a name="line192"></a> * Warning: in Chrome 12, some filesystem: URLs are opened inline. This means
<a name="line193"></a> * that e.g. HTML pages given to the user via filesystem: URLs will be opened
<a name="line194"></a> * and processed by the browser.
<a name="line195"></a> *
<a name="line196"></a> * @param {string} url The URL of the file to get the URL of.
<a name="line197"></a> * @return {!goog.async.Deferred} The deferred filesystem: URL. The callback
<a name="line198"></a> *     will be passed the URL. If a file API error occurs while loading the
<a name="line199"></a> *     blob, that error will be passed to the errback.
<a name="line200"></a> */
<a name="line201"></a>goog.net.FileDownloader.prototype.getLocalUrl = function(url) {
<a name="line202"></a>  return this.getFile_(url).
<a name="line203"></a>      addCallback(function(fileEntry) { return fileEntry.toUrl(); });
<a name="line204"></a>};
<a name="line205"></a>
<a name="line206"></a>
<a name="line207"></a>/**
<a name="line208"></a> * Return (deferred) whether or not a URL has been downloaded. Will fire a
<a name="line209"></a> * deferred error if something goes wrong when determining this.
<a name="line210"></a> *
<a name="line211"></a> * @param {string} url The URL to check.
<a name="line212"></a> * @return {!goog.async.Deferred} The deferred boolean. The callback will be
<a name="line213"></a> *     passed the boolean. If a file API error occurs while checking the
<a name="line214"></a> *     existence of the downloaded URL, that error will be passed to the
<a name="line215"></a> *     errback.
<a name="line216"></a> */
<a name="line217"></a>goog.net.FileDownloader.prototype.isDownloaded = function(url) {
<a name="line218"></a>  var deferred = new goog.async.Deferred();
<a name="line219"></a>  var blobDeferred = this.getDownloadedBlob(url);
<a name="line220"></a>  blobDeferred.addCallback(function() {
<a name="line221"></a>    deferred.callback(true);
<a name="line222"></a>  });
<a name="line223"></a>  blobDeferred.addErrback(function(err) {
<a name="line224"></a>    if (err.code == goog.fs.Error.ErrorCode.NOT_FOUND) {
<a name="line225"></a>      deferred.callback(false);
<a name="line226"></a>    } else {
<a name="line227"></a>      deferred.errback(err);
<a name="line228"></a>    }
<a name="line229"></a>  });
<a name="line230"></a>  return deferred;
<a name="line231"></a>};
<a name="line232"></a>
<a name="line233"></a>
<a name="line234"></a>/**
<a name="line235"></a> * Remove a URL from the FileDownloader.
<a name="line236"></a> *
<a name="line237"></a> * This returns a Deferred. If the removal is completed successfully, its
<a name="line238"></a> * callback will be called without any value. If the removal fails, its errback
<a name="line239"></a> * will be called with the {@link goog.fs.Error}.
<a name="line240"></a> *
<a name="line241"></a> * @param {string} url The URL to remove.
<a name="line242"></a> * @return {!goog.async.Deferred} The deferred used for registering callbacks on
<a name="line243"></a> *     success or on error.
<a name="line244"></a> */
<a name="line245"></a>goog.net.FileDownloader.prototype.remove = function(url) {
<a name="line246"></a>  return this.getDir_(url, goog.fs.DirectoryEntry.Behavior.DEFAULT).
<a name="line247"></a>      addCallback(function(dir) { return dir.removeRecursively(); });
<a name="line248"></a>};
<a name="line249"></a>
<a name="line250"></a>
<a name="line251"></a>/**
<a name="line252"></a> * Save a blob for a given URL. This works just as through the blob were
<a name="line253"></a> * downloaded form that URL, except you specify the blob and no HTTP request is
<a name="line254"></a> * made.
<a name="line255"></a> *
<a name="line256"></a> * If the URL is currently being downloaded, it&#39;s indeterminate whether the blob
<a name="line257"></a> * being set or the blob being downloaded will end up in the filesystem.
<a name="line258"></a> * Whichever one doesn&#39;t get saved will have an error. To ensure that one or the
<a name="line259"></a> * other takes precedence, use {@link #waitForDownload} to allow the download to
<a name="line260"></a> * complete before setting the blob.
<a name="line261"></a> *
<a name="line262"></a> * @param {string} url The URL at which to set the blob.
<a name="line263"></a> * @param {!Blob} blob The blob to set.
<a name="line264"></a> * @param {string=} opt_name The name of the file. If this isn&#39;t given, it&#39;s
<a name="line265"></a> *     determined from the URL.
<a name="line266"></a> * @return {!goog.async.Deferred} The deferred used for registering callbacks on
<a name="line267"></a> *     success or on error. This can be cancelled just like a {@link #download}
<a name="line268"></a> *     Deferred. The objects passed to the errback will be
<a name="line269"></a> *     {@link goog.net.FileDownloader.Error}s.
<a name="line270"></a> */
<a name="line271"></a>goog.net.FileDownloader.prototype.setBlob = function(url, blob, opt_name) {
<a name="line272"></a>  var name = this.sanitize_(opt_name || this.urlToName_(url));
<a name="line273"></a>  var download = new goog.net.FileDownloader.Download_(url, this);
<a name="line274"></a>  this.downloads_[url] = download;
<a name="line275"></a>  download.blob = blob;
<a name="line276"></a>  this.getDir_(download.url, goog.fs.DirectoryEntry.Behavior.CREATE_EXCLUSIVE).
<a name="line277"></a>      addCallback(function(dir) {
<a name="line278"></a>        return dir.getFile(
<a name="line279"></a>            name, goog.fs.DirectoryEntry.Behavior.CREATE_EXCLUSIVE);
<a name="line280"></a>      }).
<a name="line281"></a>      addCallback(goog.bind(this.fileSuccess_, this, download)).
<a name="line282"></a>      addErrback(goog.bind(this.error_, this, download));
<a name="line283"></a>  return download.deferred.branch(true /* opt_propagateCancel */);
<a name="line284"></a>};
<a name="line285"></a>
<a name="line286"></a>
<a name="line287"></a>/**
<a name="line288"></a> * The callback called when an XHR becomes available from the XHR pool.
<a name="line289"></a> *
<a name="line290"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line291"></a> *     this download.
<a name="line292"></a> * @param {!goog.net.XhrIo} xhr The XhrIo object for downloading the page.
<a name="line293"></a> * @private
<a name="line294"></a> */
<a name="line295"></a>goog.net.FileDownloader.prototype.gotXhr_ = function(download, xhr) {
<a name="line296"></a>  if (download.cancelled) {
<a name="line297"></a>    this.freeXhr_(xhr);
<a name="line298"></a>    return;
<a name="line299"></a>  }
<a name="line300"></a>
<a name="line301"></a>  this.eventHandler_.listen(
<a name="line302"></a>      xhr, goog.net.EventType.SUCCESS,
<a name="line303"></a>      goog.bind(this.xhrSuccess_, this, download));
<a name="line304"></a>  this.eventHandler_.listen(
<a name="line305"></a>      xhr, [goog.net.EventType.ERROR, goog.net.EventType.ABORT],
<a name="line306"></a>      goog.bind(this.error_, this, download));
<a name="line307"></a>  this.eventHandler_.listen(
<a name="line308"></a>      xhr, goog.net.EventType.READY,
<a name="line309"></a>      goog.bind(this.freeXhr_, this, xhr));
<a name="line310"></a>
<a name="line311"></a>  download.xhr = xhr;
<a name="line312"></a>  xhr.setResponseType(goog.net.XhrIo.ResponseType.ARRAY_BUFFER);
<a name="line313"></a>  xhr.send(download.url);
<a name="line314"></a>};
<a name="line315"></a>
<a name="line316"></a>
<a name="line317"></a>/**
<a name="line318"></a> * The callback called when an XHR succeeds in downloading a remote file.
<a name="line319"></a> *
<a name="line320"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line321"></a> *     this download.
<a name="line322"></a> * @private
<a name="line323"></a> */
<a name="line324"></a>goog.net.FileDownloader.prototype.xhrSuccess_ = function(download) {
<a name="line325"></a>  if (download.cancelled) {
<a name="line326"></a>    return;
<a name="line327"></a>  }
<a name="line328"></a>
<a name="line329"></a>  var name = this.sanitize_(this.getName_(
<a name="line330"></a>      /** @type {!goog.net.XhrIo} */ (download.xhr)));
<a name="line331"></a>  var resp = /** @type {ArrayBuffer} */ (download.xhr.getResponse());
<a name="line332"></a>  if (!resp) {
<a name="line333"></a>    // This should never happen - it indicates the XHR hasn&#39;t completed, has
<a name="line334"></a>    // failed or has been cleaned up.  If it does happen (eg. due to a bug
<a name="line335"></a>    // somewhere) we don&#39;t want to pass null to getBlob - it&#39;s not valid and
<a name="line336"></a>    // triggers a bug in some versions of WebKit causing it to crash.
<a name="line337"></a>    this.error_(download);
<a name="line338"></a>    return;
<a name="line339"></a>  }
<a name="line340"></a>
<a name="line341"></a>  download.blob = goog.fs.getBlob(resp);
<a name="line342"></a>  delete download.xhr;
<a name="line343"></a>
<a name="line344"></a>  this.getDir_(download.url, goog.fs.DirectoryEntry.Behavior.CREATE_EXCLUSIVE).
<a name="line345"></a>      addCallback(function(dir) {
<a name="line346"></a>        return dir.getFile(
<a name="line347"></a>            name, goog.fs.DirectoryEntry.Behavior.CREATE_EXCLUSIVE);
<a name="line348"></a>      }).
<a name="line349"></a>      addCallback(goog.bind(this.fileSuccess_, this, download)).
<a name="line350"></a>      addErrback(goog.bind(this.error_, this, download));
<a name="line351"></a>};
<a name="line352"></a>
<a name="line353"></a>
<a name="line354"></a>/**
<a name="line355"></a> * The callback called when a file that will be used for saving a file is
<a name="line356"></a> * successfully opened.
<a name="line357"></a> *
<a name="line358"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line359"></a> *     this download.
<a name="line360"></a> * @param {!goog.fs.FileEntry} file The newly-opened file object.
<a name="line361"></a> * @private
<a name="line362"></a> */
<a name="line363"></a>goog.net.FileDownloader.prototype.fileSuccess_ = function(download, file) {
<a name="line364"></a>  if (download.cancelled) {
<a name="line365"></a>    file.remove();
<a name="line366"></a>    return;
<a name="line367"></a>  }
<a name="line368"></a>
<a name="line369"></a>  download.file = file;
<a name="line370"></a>  file.createWriter().
<a name="line371"></a>      addCallback(goog.bind(this.fileWriterSuccess_, this, download)).
<a name="line372"></a>      addErrback(goog.bind(this.error_, this, download));
<a name="line373"></a>};
<a name="line374"></a>
<a name="line375"></a>
<a name="line376"></a>/**
<a name="line377"></a> * The callback called when a file writer is succesfully created for writing a
<a name="line378"></a> * file to the filesystem.
<a name="line379"></a> *
<a name="line380"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line381"></a> *     this download.
<a name="line382"></a> * @param {!goog.fs.FileWriter} writer The newly-created file writer object.
<a name="line383"></a> * @private
<a name="line384"></a> */
<a name="line385"></a>goog.net.FileDownloader.prototype.fileWriterSuccess_ = function(
<a name="line386"></a>    download, writer) {
<a name="line387"></a>  if (download.cancelled) {
<a name="line388"></a>    download.file.remove();
<a name="line389"></a>    return;
<a name="line390"></a>  }
<a name="line391"></a>
<a name="line392"></a>  download.writer = writer;
<a name="line393"></a>  writer.write(/** @type {!Blob} */ (download.blob));
<a name="line394"></a>  this.eventHandler_.listenOnce(
<a name="line395"></a>      writer,
<a name="line396"></a>      goog.fs.FileSaver.EventType.WRITE_END,
<a name="line397"></a>      goog.bind(this.writeEnd_, this, download));
<a name="line398"></a>};
<a name="line399"></a>
<a name="line400"></a>
<a name="line401"></a>/**
<a name="line402"></a> * The callback called when file writing ends, whether or not it&#39;s successful.
<a name="line403"></a> *
<a name="line404"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line405"></a> *     this download.
<a name="line406"></a> * @private
<a name="line407"></a> */
<a name="line408"></a>goog.net.FileDownloader.prototype.writeEnd_ = function(download) {
<a name="line409"></a>  if (download.cancelled || download.writer.getError()) {
<a name="line410"></a>    this.error_(download, download.writer.getError());
<a name="line411"></a>    return;
<a name="line412"></a>  }
<a name="line413"></a>
<a name="line414"></a>  delete this.downloads_[download.url];
<a name="line415"></a>  download.deferred.callback(download.blob);
<a name="line416"></a>};
<a name="line417"></a>
<a name="line418"></a>
<a name="line419"></a>/**
<a name="line420"></a> * The error callback for all asynchronous operations. Ensures that all stages
<a name="line421"></a> * of a given download are cleaned up, and emits the error event.
<a name="line422"></a> *
<a name="line423"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line424"></a> *     this download.
<a name="line425"></a> * @param {goog.fs.Error=} opt_err The file error object. Only defined if the
<a name="line426"></a> *     error was raised by the file API.
<a name="line427"></a> * @private
<a name="line428"></a> */
<a name="line429"></a>goog.net.FileDownloader.prototype.error_ = function(download, opt_err) {
<a name="line430"></a>  if (download.file) {
<a name="line431"></a>    download.file.remove();
<a name="line432"></a>  }
<a name="line433"></a>
<a name="line434"></a>  if (download.cancelled) {
<a name="line435"></a>    return;
<a name="line436"></a>  }
<a name="line437"></a>
<a name="line438"></a>  delete this.downloads_[download.url];
<a name="line439"></a>  download.deferred.errback(
<a name="line440"></a>      new goog.net.FileDownloader.Error(download, opt_err));
<a name="line441"></a>};
<a name="line442"></a>
<a name="line443"></a>
<a name="line444"></a>/**
<a name="line445"></a> * Abort the download of the given URL.
<a name="line446"></a> *
<a name="line447"></a> * @param {!goog.net.FileDownloader.Download_} download The download to abort.
<a name="line448"></a> * @private
<a name="line449"></a> */
<a name="line450"></a>goog.net.FileDownloader.prototype.cancel_ = function(download) {
<a name="line451"></a>  goog.dispose(download);
<a name="line452"></a>  delete this.downloads_[download.url];
<a name="line453"></a>};
<a name="line454"></a>
<a name="line455"></a>
<a name="line456"></a>/**
<a name="line457"></a> * Get the directory for a given URL. If the directory already exists when this
<a name="line458"></a> * is called, it will contain exactly one file: the downloaded file.
<a name="line459"></a> *
<a name="line460"></a> * This not only calls the FileSystem API&#39;s getFile method, but attempts to
<a name="line461"></a> * distribute the files so that they don&#39;t overload the filesystem. The spec
<a name="line462"></a> * says directories can&#39;t contain more than 5000 files
<a name="line463"></a> * (http://www.w3.org/TR/file-system-api/#directories), so this ensures that
<a name="line464"></a> * each file is put into a subdirectory based on its SHA1 hash.
<a name="line465"></a> *
<a name="line466"></a> * All parameters are the same as in the FileSystem API&#39;s Entry#getFile method.
<a name="line467"></a> *
<a name="line468"></a> * @param {string} url The URL corresponding to the directory to get.
<a name="line469"></a> * @param {goog.fs.DirectoryEntry.Behavior} behavior The behavior to pass to the
<a name="line470"></a> *     underlying method.
<a name="line471"></a> * @return {!goog.async.Deferred} The deferred DirectoryEntry object.
<a name="line472"></a> * @private
<a name="line473"></a> */
<a name="line474"></a>goog.net.FileDownloader.prototype.getDir_ = function(url, behavior) {
<a name="line475"></a>  // 3 hex digits provide 16**3 = 4096 different possible dirnames, which is
<a name="line476"></a>  // less than the maximum of 5000 entries. Downloaded files should be
<a name="line477"></a>  // distributed roughly evenly throughout the directories due to the hash
<a name="line478"></a>  // function, allowing many more than 5000 files to be downloaded.
<a name="line479"></a>  //
<a name="line480"></a>  // The leading ` ensures that no illegal dirnames are accidentally used. % was
<a name="line481"></a>  // previously used, but Chrome has a bug (as of 12.0.725.0 dev) where
<a name="line482"></a>  // filenames are URL-decoded before checking their validity, so filenames
<a name="line483"></a>  // containing e.g. &#39;%3f&#39; (the URL-encoding of :, an invalid character) are
<a name="line484"></a>  // rejected.
<a name="line485"></a>  var dirname = &#39;`&#39; + Math.abs(goog.crypt.hash32.encodeString(url)).
<a name="line486"></a>      toString(16).substring(0, 3);
<a name="line487"></a>
<a name="line488"></a>  return this.dir_.
<a name="line489"></a>      getDirectory(dirname, goog.fs.DirectoryEntry.Behavior.CREATE).
<a name="line490"></a>      addCallback(function(dir) {
<a name="line491"></a>        return dir.getDirectory(this.sanitize_(url), behavior);
<a name="line492"></a>      }, this);
<a name="line493"></a>};
<a name="line494"></a>
<a name="line495"></a>
<a name="line496"></a>/**
<a name="line497"></a> * Get the file for a given URL. This will only retrieve files that have already
<a name="line498"></a> * been saved; it shouldn&#39;t be used for creating the file in the first place.
<a name="line499"></a> * This is because the filename isn&#39;t necessarily determined by the URL, but by
<a name="line500"></a> * the headers of the XHR response.
<a name="line501"></a> *
<a name="line502"></a> * @param {string} url The URL corresponding to the file to get.
<a name="line503"></a> * @return {!goog.async.Deferred} The deferred FileEntry object.
<a name="line504"></a> * @private
<a name="line505"></a> */
<a name="line506"></a>goog.net.FileDownloader.prototype.getFile_ = function(url) {
<a name="line507"></a>  return this.getDir_(url, goog.fs.DirectoryEntry.Behavior.DEFAULT).
<a name="line508"></a>      addCallback(function(dir) {
<a name="line509"></a>        return dir.listDirectory().addCallback(function(files) {
<a name="line510"></a>          goog.asserts.assert(files.length == 1);
<a name="line511"></a>          // If the filesystem somehow gets corrupted and we end up with an
<a name="line512"></a>          // empty directory here, it makes sense to just return the normal
<a name="line513"></a>          // file-not-found error.
<a name="line514"></a>          return files[0] || dir.getFile(&#39;file&#39;);
<a name="line515"></a>        });
<a name="line516"></a>      });
<a name="line517"></a>};
<a name="line518"></a>
<a name="line519"></a>
<a name="line520"></a>/**
<a name="line521"></a> * Sanitize a string so it can be safely used as a file or directory name for
<a name="line522"></a> * the FileSystem API.
<a name="line523"></a> *
<a name="line524"></a> * @param {string} str The string to sanitize.
<a name="line525"></a> * @return {string} The sanitized string.
<a name="line526"></a> * @private
<a name="line527"></a> */
<a name="line528"></a>goog.net.FileDownloader.prototype.sanitize_ = function(str) {
<a name="line529"></a>  // Add a prefix, since certain prefixes are disallowed for paths. None of the
<a name="line530"></a>  // disallowed prefixes start with &#39;`&#39;. We use ` rather than % for escaping the
<a name="line531"></a>  // filename due to a Chrome bug (as of 12.0.725.0 dev) where filenames are
<a name="line532"></a>  // URL-decoded before checking their validity, so filenames containing e.g.
<a name="line533"></a>  // &#39;%3f&#39; (the URL-encoding of :, an invalid character) are rejected.
<a name="line534"></a>  return &#39;`&#39; + str.replace(/[\/\\&lt;&gt;:?*&quot;|%`]/g, encodeURIComponent).
<a name="line535"></a>      replace(/%/g, &#39;`&#39;);
<a name="line536"></a>};
<a name="line537"></a>
<a name="line538"></a>
<a name="line539"></a>/**
<a name="line540"></a> * Gets the filename specified by the XHR. This first attempts to parse the
<a name="line541"></a> * Content-Disposition header for a filename and, failing that, falls back on
<a name="line542"></a> * deriving the filename from the URL.
<a name="line543"></a> *
<a name="line544"></a> * @param {!goog.net.XhrIo} xhr The XHR containing the response headers.
<a name="line545"></a> * @return {string} The filename.
<a name="line546"></a> * @private
<a name="line547"></a> */
<a name="line548"></a>goog.net.FileDownloader.prototype.getName_ = function(xhr) {
<a name="line549"></a>  var disposition = xhr.getResponseHeader(&#39;Content-Disposition&#39;);
<a name="line550"></a>  var match = disposition &amp;&amp;
<a name="line551"></a>      disposition.match(/^attachment *; *filename=&quot;(.*)&quot;$/i);
<a name="line552"></a>  if (match) {
<a name="line553"></a>    // The Content-Disposition header allows for arbitrary backslash-escaped
<a name="line554"></a>    // characters (usually &quot; and \). We want to unescape them before using them
<a name="line555"></a>    // in the filename.
<a name="line556"></a>    return match[1].replace(/\\(.)/g, &#39;$1&#39;);
<a name="line557"></a>  }
<a name="line558"></a>
<a name="line559"></a>  return this.urlToName_(xhr.getLastUri());
<a name="line560"></a>};
<a name="line561"></a>
<a name="line562"></a>
<a name="line563"></a>/**
<a name="line564"></a> * Extracts the basename from a URL.
<a name="line565"></a> *
<a name="line566"></a> * @param {string} url The URL.
<a name="line567"></a> * @return {string} The basename.
<a name="line568"></a> * @private
<a name="line569"></a> */
<a name="line570"></a>goog.net.FileDownloader.prototype.urlToName_ = function(url) {
<a name="line571"></a>  var segments = url.split(&#39;/&#39;);
<a name="line572"></a>  return segments[segments.length - 1];
<a name="line573"></a>};
<a name="line574"></a>
<a name="line575"></a>
<a name="line576"></a>/**
<a name="line577"></a> * Remove all event listeners for an XHR and release it back into the pool.
<a name="line578"></a> *
<a name="line579"></a> * @param {!goog.net.XhrIo} xhr The XHR to free.
<a name="line580"></a> * @private
<a name="line581"></a> */
<a name="line582"></a>goog.net.FileDownloader.prototype.freeXhr_ = function(xhr) {
<a name="line583"></a>  goog.events.removeAll(xhr);
<a name="line584"></a>  this.pool_.addFreeObject(xhr);
<a name="line585"></a>};
<a name="line586"></a>
<a name="line587"></a>
<a name="line588"></a>/** @override */
<a name="line589"></a>goog.net.FileDownloader.prototype.disposeInternal = function() {
<a name="line590"></a>  delete this.dir_;
<a name="line591"></a>  goog.dispose(this.eventHandler_);
<a name="line592"></a>  delete this.eventHandler_;
<a name="line593"></a>  goog.object.forEach(this.downloads_, function(download) {
<a name="line594"></a>    download.deferred.cancel();
<a name="line595"></a>  }, this);
<a name="line596"></a>  delete this.downloads_;
<a name="line597"></a>  goog.dispose(this.pool_);
<a name="line598"></a>  delete this.pool_;
<a name="line599"></a>
<a name="line600"></a>  goog.base(this, &#39;disposeInternal&#39;);
<a name="line601"></a>};
<a name="line602"></a>
<a name="line603"></a>
<a name="line604"></a>
<a name="line605"></a>/**
<a name="line606"></a> * The error object for FileDownloader download errors.
<a name="line607"></a> *
<a name="line608"></a> * @param {!goog.net.FileDownloader.Download_} download The download object for
<a name="line609"></a> *     the download in question.
<a name="line610"></a> * @param {goog.fs.Error=} opt_fsErr The file error object, if this was a file
<a name="line611"></a> *     error.
<a name="line612"></a> *
<a name="line613"></a> * @constructor
<a name="line614"></a> * @extends {goog.debug.Error}
<a name="line615"></a> */
<a name="line616"></a>goog.net.FileDownloader.Error = function(download, opt_fsErr) {
<a name="line617"></a>  goog.base(this, &#39;Error capturing URL &#39; + download.url);
<a name="line618"></a>
<a name="line619"></a>  /**
<a name="line620"></a>   * The URL the event relates to.
<a name="line621"></a>   * @type {string}
<a name="line622"></a>   */
<a name="line623"></a>  this.url = download.url;
<a name="line624"></a>
<a name="line625"></a>  if (download.xhr) {
<a name="line626"></a>    this.xhrStatus = download.xhr.getStatus();
<a name="line627"></a>    this.xhrErrorCode = download.xhr.getLastErrorCode();
<a name="line628"></a>    this.message += &#39;: XHR failed with status &#39; + this.xhrStatus +
<a name="line629"></a>        &#39; (error code &#39; + this.xhrErrorCode + &#39;)&#39;;
<a name="line630"></a>  } else if (opt_fsErr) {
<a name="line631"></a>    this.fileError = opt_fsErr;
<a name="line632"></a>    this.message += &#39;: file API failed (&#39; + opt_fsErr.message + &#39;)&#39;;
<a name="line633"></a>  }
<a name="line634"></a>};
<a name="line635"></a>goog.inherits(goog.net.FileDownloader.Error, goog.debug.Error);
<a name="line636"></a>
<a name="line637"></a>
<a name="line638"></a>/**
<a name="line639"></a> * The status of the XHR. Only set if the error was caused by an XHR failure.
<a name="line640"></a> * @type {number|undefined}
<a name="line641"></a> */
<a name="line642"></a>goog.net.FileDownloader.Error.prototype.xhrStatus;
<a name="line643"></a>
<a name="line644"></a>
<a name="line645"></a>/**
<a name="line646"></a> * The error code of the XHR. Only set if the error was caused by an XHR
<a name="line647"></a> * failure.
<a name="line648"></a> * @type {goog.net.ErrorCode|undefined}
<a name="line649"></a> */
<a name="line650"></a>goog.net.FileDownloader.Error.prototype.xhrErrorCode;
<a name="line651"></a>
<a name="line652"></a>
<a name="line653"></a>/**
<a name="line654"></a> * The file API error. Only set if the error was caused by the file API.
<a name="line655"></a> * @type {goog.fs.Error|undefined}
<a name="line656"></a> */
<a name="line657"></a>goog.net.FileDownloader.Error.prototype.fileError;
<a name="line658"></a>
<a name="line659"></a>
<a name="line660"></a>
<a name="line661"></a>/**
<a name="line662"></a> * A struct containing the data for a single download.
<a name="line663"></a> *
<a name="line664"></a> * @param {string} url The URL for the file being downloaded.
<a name="line665"></a> * @param {!goog.net.FileDownloader} downloader The parent FileDownloader.
<a name="line666"></a> * @extends {goog.Disposable}
<a name="line667"></a> * @constructor
<a name="line668"></a> * @private
<a name="line669"></a> */
<a name="line670"></a>goog.net.FileDownloader.Download_ = function(url, downloader) {
<a name="line671"></a>  goog.base(this);
<a name="line672"></a>
<a name="line673"></a>  /**
<a name="line674"></a>   * The URL for the file being downloaded.
<a name="line675"></a>   * @type {string}
<a name="line676"></a>   */
<a name="line677"></a>  this.url = url;
<a name="line678"></a>
<a name="line679"></a>  /**
<a name="line680"></a>   * The Deferred that will be fired when the download is complete.
<a name="line681"></a>   * @type {!goog.async.Deferred}
<a name="line682"></a>   */
<a name="line683"></a>  this.deferred = new goog.async.Deferred(
<a name="line684"></a>      goog.bind(downloader.cancel_, downloader, this));
<a name="line685"></a>
<a name="line686"></a>  /**
<a name="line687"></a>   * Whether this download has been cancelled by the user.
<a name="line688"></a>   * @type {boolean}
<a name="line689"></a>   */
<a name="line690"></a>  this.cancelled = false;
<a name="line691"></a>
<a name="line692"></a>  /**
<a name="line693"></a>   * The XhrIo object for downloading the file. Only set once it&#39;s been
<a name="line694"></a>   * retrieved from the pool.
<a name="line695"></a>   * @type {goog.net.XhrIo}
<a name="line696"></a>   */
<a name="line697"></a>  this.xhr = null;
<a name="line698"></a>
<a name="line699"></a>  /**
<a name="line700"></a>   * The name of the blob being downloaded. Only sey once the XHR has completed,
<a name="line701"></a>   * if it completed successfully.
<a name="line702"></a>   * @type {?string}
<a name="line703"></a>   */
<a name="line704"></a>  this.name = null;
<a name="line705"></a>
<a name="line706"></a>  /**
<a name="line707"></a>   * The downloaded blob. Only set once the XHR has completed, if it completed
<a name="line708"></a>   * successfully.
<a name="line709"></a>   * @type {Blob}
<a name="line710"></a>   */
<a name="line711"></a>  this.blob = null;
<a name="line712"></a>
<a name="line713"></a>  /**
<a name="line714"></a>   * The file entry where the blob is to be stored. Only set once it&#39;s been
<a name="line715"></a>   * loaded from the filesystem.
<a name="line716"></a>   * @type {goog.fs.FileEntry}
<a name="line717"></a>   */
<a name="line718"></a>  this.file = null;
<a name="line719"></a>
<a name="line720"></a>  /**
<a name="line721"></a>   * The file writer for writing the blob to the filesystem. Only set once it&#39;s
<a name="line722"></a>   * been loaded from the filesystem.
<a name="line723"></a>   * @type {goog.fs.FileWriter}
<a name="line724"></a>   */
<a name="line725"></a>  this.writer = null;
<a name="line726"></a>};
<a name="line727"></a>goog.inherits(goog.net.FileDownloader.Download_, goog.Disposable);
<a name="line728"></a>
<a name="line729"></a>
<a name="line730"></a>/** @override */
<a name="line731"></a>goog.net.FileDownloader.Download_.prototype.disposeInternal = function() {
<a name="line732"></a>  this.cancelled = true;
<a name="line733"></a>  if (this.xhr) {
<a name="line734"></a>    this.xhr.abort();
<a name="line735"></a>  } else if (this.writer &amp;&amp; this.writer.getReadyState() ==
<a name="line736"></a>             goog.fs.FileSaver.ReadyState.WRITING) {
<a name="line737"></a>    this.writer.abort();
<a name="line738"></a>  }
<a name="line739"></a>
<a name="line740"></a>  goog.base(this, &#39;disposeInternal&#39;);
<a name="line741"></a>};
</pre>


</body>
</html>
